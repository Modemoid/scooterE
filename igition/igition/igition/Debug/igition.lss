
igition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000296  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000210  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010f  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001db  00000000  00000000  00000635  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000108  00000000  00000000  00000810  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c0  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001c3  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	95 c0       	rjmp	.+298    	; 0x132 <__vector_3>
   8:	9f c0       	rjmp	.+318    	; 0x148 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	5b c0       	rjmp	.+182    	; 0xc4 <__vector_6>
   e:	78 c0       	rjmp	.+240    	; 0x100 <__vector_7>
  10:	83 c0       	rjmp	.+262    	; 0x118 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	91 d0       	rcall	.+290    	; 0x166 <main>
  44:	ec c0       	rjmp	.+472    	; 0x21e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:
unsigned int time;
unsigned char igt=0;
unsigned int delay=0;


ISR(INT0_vect){
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	2f 93       	push	r18
  54:	3f 93       	push	r19
  56:	4f 93       	push	r20
  58:	5f 93       	push	r21
  5a:	6f 93       	push	r22
  5c:	7f 93       	push	r23
  5e:	8f 93       	push	r24
  60:	9f 93       	push	r25
  62:	af 93       	push	r26
  64:	bf 93       	push	r27

	TCCR1B=0x03;
  66:	83 e0       	ldi	r24, 0x03	; 3
  68:	8e bd       	out	0x2e, r24	; 46
	time=TCNT1;
  6a:	8c b5       	in	r24, 0x2c	; 44
  6c:	9d b5       	in	r25, 0x2d	; 45
  6e:	90 93 63 00 	sts	0x0063, r25
  72:	80 93 62 00 	sts	0x0062, r24
	TCNT1=0;
  76:	1d bc       	out	0x2d, r1	; 45
  78:	1c bc       	out	0x2c, r1	; 44
	delay=(time*1000)/5236; 
  7a:	40 91 62 00 	lds	r20, 0x0062
  7e:	50 91 63 00 	lds	r21, 0x0063
  82:	28 ee       	ldi	r18, 0xE8	; 232
  84:	33 e0       	ldi	r19, 0x03	; 3
  86:	42 9f       	mul	r20, r18
  88:	c0 01       	movw	r24, r0
  8a:	43 9f       	mul	r20, r19
  8c:	90 0d       	add	r25, r0
  8e:	52 9f       	mul	r21, r18
  90:	90 0d       	add	r25, r0
  92:	11 24       	eor	r1, r1
  94:	64 e7       	ldi	r22, 0x74	; 116
  96:	74 e1       	ldi	r23, 0x14	; 20
  98:	ae d0       	rcall	.+348    	; 0x1f6 <__udivmodhi4>
  9a:	70 93 61 00 	sts	0x0061, r23
  9e:	60 93 60 00 	sts	0x0060, r22
	OCR1A=delay;
  a2:	7b bd       	out	0x2b, r23	; 43
  a4:	6a bd       	out	0x2a, r22	; 42
	#endif		 
	//if (time<3200) 
	//igt=64; 
	//else igt=0;

}
  a6:	bf 91       	pop	r27
  a8:	af 91       	pop	r26
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	7f 91       	pop	r23
  b0:	6f 91       	pop	r22
  b2:	5f 91       	pop	r21
  b4:	4f 91       	pop	r20
  b6:	3f 91       	pop	r19
  b8:	2f 91       	pop	r18
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_6>:

ISR(TIMER1_COMPA_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25

	PORTB^=(1<<3);
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	89 27       	eor	r24, r25
  d8:	88 bb       	out	0x18, r24	; 24
	// Place your code here
	//PORTD&=~(1<<4);
	TCCR2=0x02;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	85 bd       	out	0x25, r24	; 37
	 	TCNT2=TF;
  de:	81 ec       	ldi	r24, 0xC1	; 193
  e0:	84 bd       	out	0x24, r24	; 36
	 	OCR2=PTF;
  e2:	8f ed       	ldi	r24, 0xDF	; 223
  e4:	83 bd       	out	0x23, r24	; 35
	OCR1B=OCR1A+1000;
  e6:	8a b5       	in	r24, 0x2a	; 42
  e8:	9b b5       	in	r25, 0x2b	; 43
  ea:	88 51       	subi	r24, 0x18	; 24
  ec:	9c 4f       	sbci	r25, 0xFC	; 252
  ee:	99 bd       	out	0x29, r25	; 41
  f0:	88 bd       	out	0x28, r24	; 40
	//igt++;

}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_7>:

ISR(TIMER1_COMPB_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1

	// Place your code here
	PORTD&=~(1<<4);
 10a:	94 98       	cbi	0x12, 4	; 18
	TCCR2=0;
 10c:	15 bc       	out	0x25, r1	; 37
// 	if (igt<=2) {
// 		OCR1A=OCR1B+600;
// 	}
// 	else igt=0;

}
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_8>:

ISR(TIMER1_OVF_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
	PORTD&=~(1<<4);
 122:	94 98       	cbi	0x12, 4	; 18
	TCCR1B=0x00;
 124:	1e bc       	out	0x2e, r1	; 46
	TCCR2=0;
 126:	15 bc       	out	0x25, r1	; 37
	
}
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_3>:

ISR (TIMER2_COMP_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1

PORTD|=(1<<4);	
 13c:	94 9a       	sbi	0x12, 4	; 18
	
}
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_4>:

ISR(TIMER2_OVF_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
	
PORTD&=~(1<<4);	
 154:	94 98       	cbi	0x12, 4	; 18
TCNT2=TF;
 156:	81 ec       	ldi	r24, 0xC1	; 193
 158:	84 bd       	out	0x24, r24	; 36

}
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <main>:
{
// Input/Output Ports initialization
// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=0 State2=T State1=T State0=T
PORTB=0x10;
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	88 bb       	out	0x18, r24	; 24
DDRB=0x08;
 16a:	98 e0       	ldi	r25, 0x08	; 8
 16c:	97 bb       	out	0x17, r25	; 23

// Port C initialization
// Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTC=0x00;
 16e:	15 ba       	out	0x15, r1	; 21
DDRC=0x00;
 170:	14 ba       	out	0x14, r1	; 20

// Port D initialization
// Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=P
PORTD=0x01;
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	92 bb       	out	0x12, r25	; 18
DDRD=0x10;
 176:	81 bb       	out	0x11, r24	; 17

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
TCCR0=0x00;
 178:	13 be       	out	0x33, r1	; 51
TCNT0=0x00;
 17a:	12 be       	out	0x32, r1	; 50
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: On
// Compare B Match Interrupt: On
TCCR1A=0x00;
 17c:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x00;
 17e:	1e bc       	out	0x2e, r1	; 46
TCNT1H=0x00;
 180:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
 182:	1c bc       	out	0x2c, r1	; 44
ICR1H=0x00;
 184:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
 186:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
 188:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
 18a:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
 18c:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
 18e:	18 bc       	out	0x28, r1	; 40
// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
 190:	12 bc       	out	0x22, r1	; 34
TCCR2=0x00;
 192:	15 bc       	out	0x25, r1	; 37
TCNT2=0x00;
 194:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
 196:	13 bc       	out	0x23, r1	; 35

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Rising Edge
// INT1: Off
GICR|=0x40;
 198:	8b b7       	in	r24, 0x3b	; 59
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	8b bf       	out	0x3b, r24	; 59
MCUCR=0x03;
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	85 bf       	out	0x35, r24	; 53
GIFR=0x40;
 1a2:	80 e4       	ldi	r24, 0x40	; 64
 1a4:	8a bf       	out	0x3a, r24	; 58

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x1C;
 1a6:	8c e1       	ldi	r24, 0x1C	; 28
 1a8:	89 bf       	out	0x39, r24	; 57

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(1<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
 1aa:	8c ed       	ldi	r24, 0xDC	; 220
 1ac:	89 bf       	out	0x39, r24	; 57


// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	88 b9       	out	0x08, r24	; 8
SFIOR=0x00;
 1b2:	10 be       	out	0x30, r1	; 48

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 1b4:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=0x00;
 1b6:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=0x00;
 1b8:	16 be       	out	0x36, r1	; 54
//	PORTD|=(1<<4);
/*MSCS_init();
unsigned char transmit_buf[17],resiv_buf[17];
unsigned int fractional;
float fractional_part;*/
asm("sei");	
 1ba:	78 94       	sei
		transmit_buf[4]=fractional%100;
		MSCS_com(transmit_buf,0,resiv_buf);
		*/
 if (!( (1 << PB4) & PINB))
 		{
 	TCCR2=0x02;
 1bc:	22 e0       	ldi	r18, 0x02	; 2
 	TCNT2=TF;
 1be:	91 ec       	ldi	r25, 0xC1	; 193
 	OCR2=PTF;		
 1c0:	8f ed       	ldi	r24, 0xDF	; 223
		fractional=fractional_part;
		transmit_buf[3]=fractional/100;
		transmit_buf[4]=fractional%100;
		MSCS_com(transmit_buf,0,resiv_buf);
		*/
 if (!( (1 << PB4) & PINB))
 1c2:	b4 99       	sbic	0x16, 4	; 22
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <main+0x5c>
 		{
 	TCCR2=0x02;
 1c6:	25 bd       	out	0x25, r18	; 37
 	TCNT2=TF;
 1c8:	94 bd       	out	0x24, r25	; 36
 	OCR2=PTF;		
 1ca:	83 bd       	out	0x23, r24	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	3f ef       	ldi	r19, 0xFF	; 255
 1ce:	43 ec       	ldi	r20, 0xC3	; 195
 1d0:	59 e0       	ldi	r21, 0x09	; 9
 1d2:	31 50       	subi	r19, 0x01	; 1
 1d4:	40 40       	sbci	r20, 0x00	; 0
 1d6:	50 40       	sbci	r21, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x6c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x76>
 1dc:	00 00       	nop
 	_delay_ms(400);
 	TCCR2=0x00;
 1de:	15 bc       	out	0x25, r1	; 37
	 PORTD&=~(1<<4);
 1e0:	94 98       	cbi	0x12, 4	; 18
 1e2:	3f ef       	ldi	r19, 0xFF	; 255
 1e4:	49 e6       	ldi	r20, 0x69	; 105
 1e6:	58 e1       	ldi	r21, 0x18	; 24
 1e8:	31 50       	subi	r19, 0x01	; 1
 1ea:	40 40       	sbci	r20, 0x00	; 0
 1ec:	50 40       	sbci	r21, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x82>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x8c>
 1f2:	00 00       	nop
 1f4:	e6 cf       	rjmp	.-52     	; 0x1c2 <main+0x5c>

000001f6 <__udivmodhi4>:
 1f6:	aa 1b       	sub	r26, r26
 1f8:	bb 1b       	sub	r27, r27
 1fa:	51 e1       	ldi	r21, 0x11	; 17
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <__udivmodhi4_ep>

000001fe <__udivmodhi4_loop>:
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	a6 17       	cp	r26, r22
 204:	b7 07       	cpc	r27, r23
 206:	10 f0       	brcs	.+4      	; 0x20c <__udivmodhi4_ep>
 208:	a6 1b       	sub	r26, r22
 20a:	b7 0b       	sbc	r27, r23

0000020c <__udivmodhi4_ep>:
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	5a 95       	dec	r21
 212:	a9 f7       	brne	.-22     	; 0x1fe <__udivmodhi4_loop>
 214:	80 95       	com	r24
 216:	90 95       	com	r25
 218:	bc 01       	movw	r22, r24
 21a:	cd 01       	movw	r24, r26
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
