;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 22.09.2014
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 3,276800 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;float koof;
;unsigned int time;
;unsigned char igt=0;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 // Place your code here
; 0000 0022 TCCR1B=0x05;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0023  time=TCNT1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0024  TCNT1=0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0025  OCR1A=time/koof;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0026  if (time<540) igt=64;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0027 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 002E {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002F // Place your code here
; 0000 0030  TCCR1B=0x05;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0031 }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0035 {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0036 #asm("cli")
;PCODE: $0000002D VOL: 0
	cli
;PCODE: $0000002E VOL: 0
; 0000 0037 PORTB.3^=1;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0038 // Place your code here
; 0000 0039    PORTD.4=1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003A    OCR1B=OCR1A+16;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003B    igt++;
;PCODE: $00000040 VOL: 0
; 0000 003C     #asm("sei")
;PCODE: $00000041 VOL: 0
	sei
;PCODE: $00000042 VOL: 0
; 0000 003D }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;
;// Timer1 output compare B interrupt service routine
;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
; 0000 0041 {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0042 #asm("cli")
;PCODE: $00000048 VOL: 0
	cli
;PCODE: $00000049 VOL: 0
; 0000 0043 // Place your code here
; 0000 0044 PORTD.4=0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0045 if (igt<=2) {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0046    OCR1A=OCR1B+16;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0047    }
; 0000 0048     else igt=0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0049 
; 0000 004A  #asm("sei")
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
	sei
;PCODE: $00000057 VOL: 0
; 0000 004B }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0050 {
;PCODE: $0000005B VOL: 0
; 0000 0051 // Declare your local variables here
; 0000 0052 
; 0000 0053 // Input/Output Ports initialization
; 0000 0054 // Port B initialization
; 0000 0055 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0056 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0057 PORTB=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0058 DDRB=0x08;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0059 
; 0000 005A // Port C initialization
; 0000 005B // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005C // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005D PORTC=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005E DDRC=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005F 
; 0000 0060 // Port D initialization
; 0000 0061 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0062 // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
; 0000 0063 PORTD=0x01;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0064 DDRD=0x10;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0065 
; 0000 0066 // Timer/Counter 0 initialization
; 0000 0067 // Clock source: System Clock
; 0000 0068 // Clock value: Timer 0 Stopped
; 0000 0069 TCCR0=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 006A TCNT0=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006B 
; 0000 006C // Timer/Counter 1 initialization
; 0000 006D // Clock source: System Clock
; 0000 006E // Clock value: 3,200 kHz
; 0000 006F // Mode: Normal top=0xFFFF
; 0000 0070 // OC1A output: Discon.
; 0000 0071 // OC1B output: Discon.
; 0000 0072 // Noise Canceler: Off
; 0000 0073 // Input Capture on Falling Edge
; 0000 0074 // Timer1 Overflow Interrupt: On
; 0000 0075 // Input Capture Interrupt: Off
; 0000 0076 // Compare A Match Interrupt: On
; 0000 0077 // Compare B Match Interrupt: Off
; 0000 0078 TCCR1A=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0079 TCCR1B=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007A TCNT1H=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 007B TCNT1L=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 007C ICR1H=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 007D ICR1L=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 007E OCR1AH=0xFF;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 007F OCR1AL=0xFF;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0080 OCR1BH=0xFF;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0081 OCR1BL=0xFF;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0082 
; 0000 0083 // Timer/Counter 2 initialization
; 0000 0084 // Clock source: System Clock
; 0000 0085 // Clock value: Timer2 Stopped
; 0000 0086 // Mode: Normal top=0xFF
; 0000 0087 // OC2 output: Disconnected
; 0000 0088 ASSR=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0089 TCCR2=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 008A TCNT2=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 008B OCR2=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 008C 
; 0000 008D // External Interrupt(s) initialization
; 0000 008E // INT0: On
; 0000 008F // INT0 Mode: Rising Edge
; 0000 0090 // INT1: Off
; 0000 0091 GICR|=0x40;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0092 MCUCR=0x03;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0093 GIFR=0x40;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0094 
; 0000 0095 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0096 TIMSK=0x1C;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0097 
; 0000 0098 
; 0000 0099 // USART initialization
; 0000 009A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 009B // USART Receiver: On
; 0000 009C // USART Transmitter: On
; 0000 009D // USART Mode: Asynchronous
; 0000 009E // USART Baud Rate: 300
; 0000 009F UCSRA=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A0 UCSRB=0x18;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A1 UCSRC=0x86;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00A2 UBRRH=0x02;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00A3 UBRRL=0xAA;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00A4 
; 0000 00A5 // Analog Comparator initialization
; 0000 00A6 // Analog Comparator: Off
; 0000 00A7 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00A8 ACSR=0x80;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00A9 SFIOR=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00AA 
; 0000 00AB // ADC initialization
; 0000 00AC // ADC disabled
; 0000 00AD ADCSRA=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00AE 
; 0000 00AF // SPI initialization
; 0000 00B0 // SPI disabled
; 0000 00B1 SPCR=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B2 
; 0000 00B3 // TWI initialization
; 0000 00B4 // TWI disabled
; 0000 00B5 TWCR=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00B6 //////
; 0000 00B7 
; 0000 00B8 koof=360/79.3;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00B9 // Global enable interrupts
; 0000 00BA #asm("sei")
;PCODE: $000000A7 VOL: 0
	sei
;PCODE: $000000A8 VOL: 0
; 0000 00BB 
; 0000 00BC while (1)
;PCODE: $000000A9 VOL: 0
; 0000 00BD       {
; 0000 00BE       // Place your code here
; 0000 00BF      // printf("->%d<-",OCR1A);
; 0000 00C0      if (PIND.0==0){
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C1           PORTD.4=1;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C2           PORTB.3=1;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00C3           delay_ms(4);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00C4           PORTD.4=0;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00C5           PORTB.3=0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00C6           delay_ms(10);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00C7      }
; 0000 00C8       }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00C9 }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
