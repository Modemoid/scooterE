;/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
;
;MSCS Bus - slave start read and write to bus: mosi-h, clk - h. read and write - synhro. package - 16 byte
;
;*///////////////////////////////////////////////////////////////////////////////////////////////////////////////
;#include "MSCS_lib.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#ifdef MASTER
;
;#define DDRMOSI  DDPORT( MOSIP )
;#define MOSI_PORT PPORT( MOSIP )
;
;#define DDRCLK  DDPORT( CLKP )
;#define CLK_PORT PPORT( CLKP )
;
;#define DDRMISO  DDPORT( MISOP )
;#define MISO_PORT PPIN( MISOP )
;
;void MSCS_delay(void){
; 0001 0013 void MSCS_delay(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0014 #ifdef CV
; 0001 0015 delay_ms(1);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0016 #else
; 0001 0017 _delay_ms(1);
; 0001 0018 #endif
; 0001 0019 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;void mosi(unsigned char mos){
; 0001 001B void mosi(unsigned char mos){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 001C  if (mos){
;PCODE: $00000016 VOL: 0
;	mos -> Y+0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 001D   MOSI_PORT|=(1<<MOSI_BIT);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 001E  } else {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 001F   MOSI_PORT&=~(1<<MOSI_BIT);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 0020  }
;PCODE: $00000020 VOL: 0
; 0001 0021 }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;void clk(unsigned char cl){
; 0001 0023 void clk(unsigned char cl){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0024  if (cl){
;PCODE: $00000026 VOL: 0
;	cl -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0025   CLK_PORT|=(1<<CLK_BIT);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0026  } else {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0027   CLK_PORT&=~(1<<CLK_BIT);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0028  }
;PCODE: $00000030 VOL: 0
; 0001 0029 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;unsigned char miso(void){
; 0001 002B unsigned char miso(void){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 002C  return ((MISO_PORT&(1<<MISO_BIT))&&(1<<MISO_BIT));
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 002D }
;PCODE: $00000042 VOL: 0
;
;void MSCS_com(unsigned char *data,unsigned char ret[17]){
; 0001 002F void MSCS_com(unsigned char *data,unsigned char ret[17]){
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0030 
; 0001 0031 unsigned char buffer,resiver=0,i,j;
; 0001 0032 mosi(1);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;	*data -> Y+6
;	ret -> Y+4
;	buffer -> R17
;	resiver -> R16
;	i -> R19
;	j -> R18
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0033 for (i=0; i<16; i++){
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 0034     buffer=data[i];
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0035     for (j=0; j<8; j++){
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0036         clk(1);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0037         MSCS_delay();
;PCODE: $00000062 VOL: 0
; 0001 0038         mosi(((buffer<<j)&0b10000000)&&0x80);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0039         MSCS_delay();
;PCODE: $00000073 VOL: 0
; 0001 003A         clk(0);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 003B         MSCS_delay();
;PCODE: $00000076 VOL: 0
; 0001 003C         resiver=(resiver<<1)|miso();
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 003D     }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 003E     ret[i]=resiver;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 003F     resiver=0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 0040 }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 0041 ret[16]=0;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0042 clk(1);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 0043 MSCS_delay();
;PCODE: $00000095 VOL: 0
; 0001 0044 clk(0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0001 0045 mosi(0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0046 MSCS_delay();
;PCODE: $0000009A VOL: 0
; 0001 0047 MSCS_delay();
;PCODE: $0000009B VOL: 0
; 0001 0048 MSCS_delay();
;PCODE: $0000009C VOL: 0
; 0001 0049 MSCS_delay();
;PCODE: $0000009D VOL: 0
; 0001 004A MSCS_delay();
;PCODE: $0000009E VOL: 0
; 0001 004B }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;void MSCS_init(void){
; 0001 004D void MSCS_init(void){
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 004E DDRMOSI|=(1<<MOSI_BIT);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 004F MOSI_PORT&=~(1<<MOSI_BIT);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 0050 DDRMISO&=~(1<<MISO_BIT);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0051 MISO_PORT&=~(1<<MISO_BIT);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 0052 DDRCLK|=(1<<CLK_BIT);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 0053 CLK_PORT&=~(1<<CLK_BIT);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 0054 }
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;
;#else
;#define DDRMOSI  DDPORT(MOSIP)
;#define MOSI_PORT PPIN(MOSIP)
;
;#define DDRCLK  DDPORT(CLKP)
;#define CLK_PORT PPIN(CLKP)
;
;#define DDRMISO  DDPORT(MISOP)
;#define MISO_PORT PPORT(MISOP)
;
;void MSCS_delay_framing(void){
;#ifdef CV
;delay_us(200);
;#else
;_delay_us(200);
;#endif
;}
;
;void miso(unsigned char mis){
; if (mis){
;  MISO_PORT|=(1<<MISO_BIT);
; } else {
;  MISO_PORT&=~(1<<MISO_BIT);
; }
;}
;
;inline unsigned char clk(void){
; return ((CLK_PORT&(1<<CLK_BIT))&&(1<<CLK_BIT));
;}
;
;inline unsigned char mosi(void){
; return ((MOSI_PORT&(1<<MOSI_BIT))&&(1<<MOSI_BIT));
;}
;
;unsigned char MSCS_framing(void){
;unsigned char i;
;for(i=0;i<25;i++) {
;MSCS_delay_framing();
; if (clk()) return 1;
;
;}
;return 0;
;}
;
;unsigned char MSCS_com(unsigned char *data,unsigned char wait, unsigned char result[17]){
;unsigned char buffer_tx,buffer_rx;
;unsigned char i,j;
;unsigned int c;
;if (MSCS_framing()) {
;while(MSCS_framing()) #asm ("nop");
;wait=1;
;}
;
;if (wait){
;
; while (!(mosi()&&clk())){
; #asm ("nop")
; }
; for(i=0;i<16;i++){
;  buffer_tx=data[i];
;  buffer_rx=0;
;  for(j=0;j<8;j++){
;  c=1;
;    while(clk()){
;        if (c) c++; else return 0;
;    }
;    buffer_rx=(buffer_rx<<1)|mosi();
;    miso(((buffer_tx<<j)&0b10000000)&&0x80);
;    c=1;
;    while(!clk()){
;        if (c) c++; else return 0;
;    }
;  }
;  result[i]=buffer_rx;
; }
; result[16]=0;
;  return 1;
;} else {
;if (mosi()&&clk()) {
; for(i=0;i<16;i++){
;  buffer_tx=data[i];
;  buffer_rx=0;
;  for(j=0;j<8;j++){
;  c=1;
;    while(clk()){
;        if (c) c++; else return 0;
;    }
;    buffer_rx=(buffer_rx<<1)|mosi();
;    miso(((buffer_tx<<j)&0b10000000)&&0x80);
;    c=1;
;    while(!clk()){
;        if (c) c++; else return 0;
;    }
;  }
;  result[i]=buffer_rx;
; }
;result[16]=0;
;  return 1;
;}
;}
;return 0;
;}
;
;void MSCS_init(void){
;DDRMOSI&=~(1<<MOSI_BIT);
;MOSI_PORT&=~(1<<MOSI_BIT);
;DDRMISO|=(1<<MISO_BIT);
;MISO_PORT|=(1<<MISO_BIT);
;DDRCLK&=~(1<<CLK_BIT);
;CLK_PORT&=~(1<<CLK_BIT);
;}
;#endif
