;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 18.01.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;
;#include "MSCS_lib.h"
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;#define FIRST_ADC_INPUT 7
;unsigned int adc_data;
;#define ADC_VREF_TYPE 0x40//0xC0
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A // Read the AD conversion result
; 0000 002B adc_data=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002C 
; 0000 002D ADMUX=(FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff));
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002E // Delay needed for the stabilization of the ADC input voltage
; 0000 002F delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0030 // Start the AD conversion
; 0000 0031 ADCSRA|=0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0032 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// Declare your global variables here
;unsigned char Vol;
;unsigned int NewState=0,OldState=0,upState=0,downState=0;
;
;unsigned char encoder(unsigned char val){
; 0000 0038 unsigned char encoder(unsigned char val){
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0039           NewState=PINB & 0b00000011;
;PCODE: $0000001B VOL: 0
;	val -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003A if(NewState!=OldState)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003B {
; 0000 003C 
; 0000 003D switch(OldState)
;PCODE: $00000023 VOL: 0
; 0000 003E     {
; 0000 003F     case 2:
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0040         {
; 0000 0041         if(NewState == 3) upState++;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0042         if(NewState == 0) downState++;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0043         break;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0044         }
; 0000 0045 
; 0000 0046     case 0:
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0047         {
; 0000 0048         if(NewState == 2) upState++;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0049         if(NewState == 1) downState++;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004A         break;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 004B         }
; 0000 004C     case 1:
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004D         {
; 0000 004E         if(NewState == 0) upState++;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004F         if(NewState == 3) downState++;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0050         break;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0051         }
; 0000 0052     case 3:
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0053         {
; 0000 0054         if(NewState == 1) upState++;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0055         if(NewState == 2) downState++;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0056         break;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0057         }
; 0000 0058     }
;PCODE: $0000006D VOL: 0
; 0000 0059 OldState=NewState;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005A }
; 0000 005B  if (upState >= 4)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 005C       {
; 0000 005D         val--;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 005E         upState = 0;
;PCODE: $00000077 VOL: 0
; 0000 005F       }
; 0000 0060       if (downState >= 4)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0061       {
; 0000 0062         val++;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0063         downState = 0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0064       }
; 0000 0065  return val;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0066 }
;PCODE: $00000085 VOL: 0
;
;void MSCS_com_veryfy(unsigned char *data,unsigned char ret[17]){
; 0000 0068 void MSCS_com_veryfy(unsigned char *data,unsigned char ret[17]){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0069 MSCS_com(data,ret);
;PCODE: $00000088 VOL: 0
;	*data -> Y+2
;	ret -> Y+0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 006A while(!((ret[12]=='g')&&(ret[13]=='e')&&(ret[14]=='r')&&(ret[15]=='b'))){
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 006B MSCS_com(data,ret);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 006C }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006D }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;void main(void)
; 0000 0070 {
;PCODE: $000000AD VOL: 0
; 0000 0071 // Declare your local variables here
; 0000 0072 unsigned char buf[32],buf1[17],buf2[17];
; 0000 0073 float ft;
; 0000 0074 unsigned char m1,m2=0,m3=0; //m1-galet switcher m2 - timer for read to Vol - 1-6 m3 - port POWER
; 0000 0075 
; 0000 0076 // Input/Output Ports initialization
; 0000 0077 // Port B initialization
; 0000 0078 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0079 // State7=T State6=T State5=T State4=T State3=T State2=T State1=P State0=P
; 0000 007A PORTB=0x03;
;PCODE: $000000AE VOL: 0
;	buf -> Y+38
;	buf1 -> Y+21
;	buf2 -> Y+4
;	ft -> Y+0
;	m1 -> R17
;	m2 -> R16
;	m3 -> R19
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 007B DDRB=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 007C 
; 0000 007D // Port C initialization
; 0000 007E // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007F // State6=T State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 0080 PORTC=0x3F;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0081 DDRC=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0082 
; 0000 0083 // Port D initialization
; 0000 0084 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0085 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0086 PORTD=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0087 DDRD=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0088 
; 0000 0089 // Timer/Counter 0 initialization
; 0000 008A // Clock source: System Clock
; 0000 008B // Clock value: Timer 0 Stopped
; 0000 008C TCCR0=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 008D TCNT0=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 008E 
; 0000 008F // Timer/Counter 1 initialization
; 0000 0090 // Clock source: System Clock
; 0000 0091 // Clock value: Timer1 Stopped
; 0000 0092 // Mode: Normal top=0xFFFF
; 0000 0093 // OC1A output: Discon.
; 0000 0094 // OC1B output: Discon.
; 0000 0095 // Noise Canceler: Off
; 0000 0096 // Input Capture on Falling Edge
; 0000 0097 // Timer1 Overflow Interrupt: Off
; 0000 0098 // Input Capture Interrupt: Off
; 0000 0099 // Compare A Match Interrupt: Off
; 0000 009A // Compare B Match Interrupt: Off
; 0000 009B TCCR1A=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 009C TCCR1B=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 009D TCNT1H=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 009E TCNT1L=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 009F ICR1H=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00A0 ICR1L=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00A1 OCR1AH=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A2 OCR1AL=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00A3 OCR1BH=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00A4 OCR1BL=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00A5 
; 0000 00A6 // Timer/Counter 2 initialization
; 0000 00A7 // Clock source: System Clock
; 0000 00A8 // Clock value: Timer2 Stopped
; 0000 00A9 // Mode: Normal top=0xFF
; 0000 00AA // OC2 output: Disconnected
; 0000 00AB ASSR=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00AC TCCR2=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00AD TCNT2=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00AE OCR2=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00AF 
; 0000 00B0 // External Interrupt(s) initialization
; 0000 00B1 // INT0: Off
; 0000 00B2 // INT1: Off
; 0000 00B3 MCUCR=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B4 
; 0000 00B5 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B6 TIMSK=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00B7 
; 0000 00B8 // USART initialization
; 0000 00B9 // USART disabled
; 0000 00BA UCSRB=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00BB 
; 0000 00BC // Analog Comparator initialization
; 0000 00BD // Analog Comparator: Off
; 0000 00BE // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00BF ACSR=0x80;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00C0 SFIOR=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00C1 
; 0000 00C2 // ADC initialization
; 0000 00C3 // ADC Clock frequency: 1000,000 kHz
; 0000 00C4 // ADC Voltage Reference: Int., cap. on AREF
; 0000 00C5 ADMUX=FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00C6 ADCSRA=0xCC;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00C7 
; 0000 00C8 // SPI initialization
; 0000 00C9 // SPI disabled
; 0000 00CA SPCR=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00CB 
; 0000 00CC // TWI initialization
; 0000 00CD // TWI disabled
; 0000 00CE TWCR=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00CF 
; 0000 00D0 // Alphanumeric LCD initialization
; 0000 00D1 // Connections specified in the
; 0000 00D2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D3 // RS - PORTD Bit 0
; 0000 00D4 // RD - PORTD Bit 1
; 0000 00D5 // EN - PORTD Bit 2
; 0000 00D6 // D4 - PORTD Bit 3
; 0000 00D7 // D5 - PORTD Bit 4
; 0000 00D8 // D6 - PORTD Bit 5
; 0000 00D9 // D7 - PORTD Bit 6
; 0000 00DA // Characters/line: 8
; 0000 00DB lcd_init(16);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00DC MSCS_init();
;PCODE: $000000F3 VOL: 0
; 0000 00DD delay_ms(10);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00DE 
; 0000 00DF  lcd_puts("Start!");
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00E0  delay_ms(2000);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00E1 // Global enable interrupts
; 0000 00E2 #asm("sei")
;PCODE: $000000FC VOL: 0
	sei
;PCODE: $000000FD VOL: 0
; 0000 00E3 
; 0000 00E4 while (1)
;PCODE: $000000FE VOL: 0
; 0000 00E5       {
; 0000 00E6 
; 0000 00E7 
; 0000 00E8 
; 0000 00E9       m1=PINC;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00EA       /*
; 0000 00EB       m1=0x00;
; 0000 00EC       delay_ms (100);
; 0000 00ED       // */
; 0000 00EE sprintf(buf,"");
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00EF switch (m1&0b1001111)
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00F0 {
; 0000 00F1     case 0xC:
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00F2     MSCS_com_veryfy("                ",buf1);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00F3     sprintf(buf,"Time for GM     h-%u m-%u s-%u",buf1[9],buf1[10],buf1[11]);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00F4     break;
;PCODE: $00000126 VOL: 0
; 0000 00F5     case 0x4:
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00F6     m2=encoder(m2);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00F7     if (m2>=250) m2=0;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00F8     if (m2>7) m2=7;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00F9     sprintf(buf,"Select timer     Timer%u",m2+1);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00FA     break;
;PCODE: $00000147 VOL: 0
; 0000 00FB     case 0x0:
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00FC     if (!((m1&0b100000)&&0b100000)){
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00FD     MSCS_com_veryfy("                ",buf1);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00FE     Vol=buf1[m2];
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00FF     }
; 0000 0100     Vol=encoder(Vol);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0101     sprintf(buf,"Timer edit no%uTT%u",m2+1,Vol);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0102 
; 0000 0103     break;
;PCODE: $00000172 VOL: 0
; 0000 0104 
; 0000 0105     case 0x8:
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0106     sprintf(buf,"Write timer no%u to memory",m2+1);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0107     if (!((m1&0b100000)&&0b100000)){
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0108      buf2[0]='w';
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0109      buf2[1]='r';
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 010A      buf2[2]='i';
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 010B      buf2[3]='t';
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 010C      buf2[4]='e';
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 010D      buf2[5]='t';
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 010E      buf2[6]=m2;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 010F      buf2[7]=Vol;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0110      MSCS_com_veryfy(buf2,buf1);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0111      sprintf(buf,"Write timer no%u to memory - Ok",m2+1);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0112     }
; 0000 0113     break;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0114 
; 0000 0115 
; 0000 0116     case 0xA:
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0117     sprintf(buf,"Enable test mode - sek");
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0118     if (!((m1&0b100000)&&0b100000)){
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0119      buf2[0]='w';
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 011A      buf2[1]='r';
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 011B      buf2[2]='i';
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 011C      buf2[3]='t';
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 011D      buf2[4]='e';
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 011E      buf2[5]='e';
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 011F      MSCS_com_veryfy(buf2,buf1);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0120      sprintf(buf,"Enable test mode - sek - Ok");
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0121     }
; 0000 0122     break;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0123     case 0x2:
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0124     m3=encoder(m3);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0125     if (m3>=250) m3=0;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0126     if (m3>3) m3=3;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0127     sprintf(buf,"Select PORT for  switch-PORT%u",m3+1);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0128      if (!((m1&0b100000)&&0b100000)){
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0129      buf2[0]='w';
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 012A      buf2[1]='r';
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 012B      buf2[2]='i';
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 012C      buf2[3]='t';
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 012D      buf2[4]='e';
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 012E      buf2[5]='s';
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 012F      buf2[6]=m3;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0130      MSCS_com_veryfy(buf2,buf1);
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0131      sprintf(buf,"PORT SWITCH Ok");
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0132     }
; 0000 0133     break;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0134     case 0x6:
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0135     sprintf(buf,"Menu 7 ");
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0136     break;
;PCODE: $00000230 VOL: 0
; 0000 0137     case 0xE:
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0138     sprintf(buf,"Menu 8 ");
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0139     break;
;PCODE: $0000023D VOL: 0
; 0000 013A     case 0xF:
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 013B     sprintf(buf,"Menu 9 ");
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 013C     break;
;PCODE: $0000024A VOL: 0
; 0000 013D     case 0xD:
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 013E     sprintf(buf,"Menu 10");
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 013F     break;
;PCODE: $00000257 VOL: 0
; 0000 0140     case 0x5:
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0141     sprintf(buf,"Menu 11");
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0142     break;
;PCODE: $00000264 VOL: 0
; 0000 0143     case 0x1:
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0144     sprintf(buf,"Menu 12");
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0145     break;
;PCODE: $00000271 VOL: 0
; 0000 0146     case 0x9:
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0147     sprintf(buf,"Menu 13");
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 0148     break;
;PCODE: $0000027E VOL: 0
; 0000 0149     case 0xB:
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 014A     sprintf(buf,"Menu 14");
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 014B     break;
;PCODE: $0000028B VOL: 0
; 0000 014C     case 0x3:
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 014D     sprintf(buf,"Restart clock");
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 014E     if (!((m1&0b100000)&&0b100000)){
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 014F      buf2[0]='w';
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0150      buf2[1]='r';
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0151      buf2[2]='i';
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0152      buf2[3]='t';
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0153      buf2[4]='e';
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0154      buf2[5]='c';
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0155      MSCS_com_veryfy(buf2,buf1);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0156      sprintf(buf,"Restart clock - Ok");
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0157      }
; 0000 0158     break;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 0159     case 0x7:
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 015A     ft=0.005*adc_data;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 015B     sprintf(buf,"Voltmeter mega8 %1.3f    Volt",ft);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 015C     break;
;PCODE: $000002CE VOL: 0
; 0000 015D     default:
;PCODE: $000002CF VOL: 0
; 0000 015E     sprintf(buf,"Pressed button");
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 015F }
;PCODE: $000002D9 VOL: 0
; 0000 0160       lcd_clear();
;PCODE: $000002DA VOL: 0
; 0000 0161       lcd_gotoxy(0,0);
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 0162       lcd_puts(buf);
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0163       }
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 0164 }
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0

	.DSEG
_0x1A:
	.BYTE 0x29
;    // */
;
