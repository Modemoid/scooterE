;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 18.01.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;
;#include "MSCS_lib.h"
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;#define FIRST_ADC_INPUT 7
;unsigned int adc_data;
;#define ADC_VREF_TYPE 0x40//0xC0
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A // Read the AD conversion result
; 0000 002B adc_data=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002C 
; 0000 002D ADMUX=(FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff));
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002E // Delay needed for the stabilization of the ADC input voltage
; 0000 002F delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0030 // Start the AD conversion
; 0000 0031 ADCSRA|=0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0032 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// Declare your global variables here
;unsigned char Vol;
;unsigned int NewState=0,OldState=0,upState=0,downState=0;
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 003A {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003B // Place your code here
; 0000 003C TCNT1=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003D PORTB.2=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003E }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;// Timer1 output compare B interrupt service routine
;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
; 0000 0042 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0043 // Place your code here
; 0000 0044 OCR1A=TCNT1+4;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0045 PORTB.2=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0046 }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;
;unsigned char encoder(unsigned char val){
; 0000 0049 unsigned char encoder(unsigned char val){
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004A unsigned char r;
; 0000 004B for (r=0;r<=16;r++){
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;	val -> Y+1
;	r -> R17
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004C NewState=PINB & 0b00000011;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004D if(NewState!=OldState)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004E {
; 0000 004F 
; 0000 0050 switch(OldState)
;PCODE: $00000040 VOL: 0
; 0000 0051 	{
; 0000 0052 	case 2:
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0053 		{
; 0000 0054 		if(NewState == 3) upState++;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0055 		if(NewState == 0) downState++;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0056 		break;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0057 		}
; 0000 0058 
; 0000 0059 	case 0:
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 005A 		{
; 0000 005B 		if(NewState == 2) upState++;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005C 		if(NewState == 1) downState++;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005D 		break;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 005E 		}
; 0000 005F 	case 1:
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0060 		{
; 0000 0061 		if(NewState == 0) upState++;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0062 		if(NewState == 3) downState++;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0063 		break;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0064 		}
; 0000 0065 	case 3:
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0066 		{
; 0000 0067 		if(NewState == 1) upState++;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0068 		if(NewState == 2) downState++;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0069 		break;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006A 		}
; 0000 006B 	}
;PCODE: $0000008A VOL: 0
; 0000 006C OldState=NewState;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 006D }
; 0000 006E  if (upState >= 4)
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 006F       {
; 0000 0070         val--;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0071         upState = 0;
;PCODE: $00000094 VOL: 0
; 0000 0072       }
; 0000 0073       if (downState >= 4)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0074       {
; 0000 0075         val++;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0076         downState = 0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0077       }
; 0000 0078 }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0079  return val;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 007A }
;PCODE: $000000A9 VOL: 0
;
;void MSCS_com_veryfy(unsigned char *data,unsigned char ret[17]){
; 0000 007C void MSCS_com_veryfy(unsigned char *data,unsigned char ret[17]){
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 007D MSCS_com(data,ret);
;PCODE: $000000AC VOL: 0
;	*data -> Y+2
;	ret -> Y+0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 007E while(!((ret[12]=='g')&&(ret[13]=='e')&&(ret[14]=='r')&&(ret[15]=='b'))){
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 007F MSCS_com(data,ret);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0080 }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0081 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;
;void main(void)
; 0000 0084 {
;PCODE: $000000D1 VOL: 0
; 0000 0085 // Declare your local variables here
; 0000 0086 unsigned char buf[32],buf1[17],buf2[17];
; 0000 0087 float ft;
; 0000 0088 unsigned char k,m1,m2=0,m3=0,m4=0; //m1-galet switcher m2 - timer for read to Vol - 1-6 m3 - port POWER m4 - pulsegen
; 0000 0089 
; 0000 008A // Input/Output Ports initialization
; 0000 008B // Port B initialization
; 0000 008C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008D // State7=T State6=T State5=T State4=T State3=T State2=T State1=P State0=P
; 0000 008E PORTB=0x03;
;PCODE: $000000D2 VOL: 0
;	buf -> Y+38
;	buf1 -> Y+21
;	buf2 -> Y+4
;	ft -> Y+0
;	k -> R17
;	m1 -> R16
;	m2 -> R19
;	m3 -> R18
;	m4 -> R21
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 008F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 0090 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0091 
; 0000 0092 
; 0000 0093 // Port C initialization
; 0000 0094 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0095 // State6=T State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 0096 PORTC=0x3F;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0097 DDRC=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0098 
; 0000 0099 // Port D initialization
; 0000 009A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009C PORTD=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 009D DDRD=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 009E 
; 0000 009F // Timer/Counter 0 initialization
; 0000 00A0 // Clock source: System Clock
; 0000 00A1 // Clock value: Timer 0 Stopped
; 0000 00A2 TCCR0=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A3 TCNT0=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 1 initialization
; 0000 00A6 // Clock source: System Clock
; 0000 00A7 // Clock value: Timer1 Stopped
; 0000 00A8 // Mode: Normal top=0xFFFF
; 0000 00A9 // OC1A output: Discon.
; 0000 00AA // OC1B output: Discon.
; 0000 00AB // Noise Canceler: Off
; 0000 00AC // Input Capture on Falling Edge
; 0000 00AD // Timer1 Overflow Interrupt: Off
; 0000 00AE // Input Capture Interrupt: Off
; 0000 00AF // Compare A Match Interrupt: Off
; 0000 00B0 // Compare B Match Interrupt: Off
; 0000 00B1 TCCR1A=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00B2 TCCR1B=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00B3 TCNT1H=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00B4 TCNT1L=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00B5 ICR1H=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B6 ICR1L=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00B7 OCR1AH=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00B8 OCR1AL=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00B9 OCR1BH=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00BA OCR1BL=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00BB 
; 0000 00BC 
; 0000 00BD // Timer/Counter 2 initialization
; 0000 00BE // Clock source: System Clock
; 0000 00BF // Clock value: Timer2 Stopped
; 0000 00C0 // Mode: Normal top=0xFF
; 0000 00C1 // OC2 output: Disconnected
; 0000 00C2 ASSR=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00C3 TCCR2=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00C4 TCNT2=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00C5 OCR2=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C6 
; 0000 00C7 // External Interrupt(s) initialization
; 0000 00C8 // INT0: Off
; 0000 00C9 // INT1: Off
; 0000 00CA MCUCR=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00CB 
; 0000 00CC // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00CD TIMSK=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00CE 
; 0000 00CF // USART initialization
; 0000 00D0 // USART disabled
; 0000 00D1 UCSRB=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00D2 
; 0000 00D3 // Analog Comparator initialization
; 0000 00D4 // Analog Comparator: Off
; 0000 00D5 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00D6 ACSR=0x80;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00D7 SFIOR=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00D8 
; 0000 00D9 // ADC initialization
; 0000 00DA // ADC Clock frequency: 1000,000 kHz
; 0000 00DB // ADC Voltage Reference: Int., cap. on AREF
; 0000 00DC ADMUX=0;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00DD ADCSRA=0;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00DE 
; 0000 00DF // SPI initialization
; 0000 00E0 // SPI disabled
; 0000 00E1 SPCR=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00E2 
; 0000 00E3 // TWI initialization
; 0000 00E4 // TWI disabled
; 0000 00E5 TWCR=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00E6 
; 0000 00E7 // Alphanumeric LCD initialization
; 0000 00E8 // Connections specified in the
; 0000 00E9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00EA // RS - PORTD Bit 0
; 0000 00EB // RD - PORTD Bit 1
; 0000 00EC // EN - PORTD Bit 2
; 0000 00ED // D4 - PORTD Bit 3
; 0000 00EE // D5 - PORTD Bit 4
; 0000 00EF // D6 - PORTD Bit 5
; 0000 00F0 // D7 - PORTD Bit 6
; 0000 00F1 // Characters/line: 8
; 0000 00F2 lcd_init(16);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00F3 MSCS_init();
;PCODE: $00000119 VOL: 0
; 0000 00F4 delay_ms(10);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00F5 
; 0000 00F6  lcd_puts("Start!");
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00F7 // delay_ms(2000);
; 0000 00F8 // Global enable interrupts
; 0000 00F9 #asm("sei")
;PCODE: $00000120 VOL: 0
	sei
;PCODE: $00000121 VOL: 0
; 0000 00FA 
; 0000 00FB while (1)
;PCODE: $00000122 VOL: 0
; 0000 00FC       {
; 0000 00FD       m1=PINC;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00FE sprintf(buf,"");
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00FF switch (m1&0b1111)
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0100 {
; 0000 0101     case 0xC://1
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0102     MSCS_com_veryfy("rh              ",buf1);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0103     sprintf(buf,"h-%2um-%2u        s-%2u %2d",buf1[9],buf1[10],buf1[11],buf1[8]);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0104     break;
;PCODE: $0000014C VOL: 0
; 0000 0105     case 0x4://2
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0106     m2=encoder(m2);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0107     if (m2>=250) m2=0;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0108     if (m2>7) m2=7;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0109     sprintf(buf,"SelTimer        Timer%u",m2+1);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 010A     break;
;PCODE: $0000016C VOL: 0
; 0000 010B     case 0x0://3
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 010C     if (!((m1&0b100000)&&0b100000)){
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 010D     MSCS_com_veryfy("rh              ",buf1);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 010E     Vol=buf1[m2];
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 010F     }
; 0000 0110     Vol=encoder(Vol);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0111     sprintf(buf,"TimerNo%u        time=%u",m2+1,Vol);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0112 
; 0000 0113     break;
;PCODE: $00000196 VOL: 0
; 0000 0114 
; 0000 0115     case 0x8://4
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0116     sprintf(buf,"WriteNo%u        toMemory",m2+1);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0117     if (!((m1&0b100000)&&0b100000)){
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0118      buf2[0]='w';
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0119      buf2[1]='r';
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 011A      buf2[2]='i';
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 011B      buf2[3]='t';
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 011C      buf2[4]='e';
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 011D      buf2[5]='t';
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 011E      buf2[6]=m2;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 011F      buf2[7]=Vol;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0120      MSCS_com_veryfy(buf2,buf1);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0121      sprintf(buf,"WriteNo%u        Ok",m2+1);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0122     }
; 0000 0123     break;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0124 
; 0000 0125 
; 0000 0126     case 0xA://5
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0127     sprintf(buf,"Enable          testMode");
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0128     if (!((m1&0b100000)&&0b100000)){
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0129      buf2[0]='w';
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 012A      buf2[1]='r';
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 012B      buf2[2]='i';
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 012C      buf2[3]='t';
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 012D      buf2[4]='e';
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 012E      buf2[5]='e';
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 012F      MSCS_com_veryfy(buf2,buf1);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0130      sprintf(buf,"Enable        Tmode Ok");
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0131     }
; 0000 0132     break;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0133     case 0x2://6
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0134     m3=encoder(m3);
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0135     if (m3>=250) m3=0;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0136     if (m3>3) m3=3;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0137     sprintf(buf,"PORT No%u        Switch",m3+1);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0138      if (!((m1&0b100000)&&0b100000)){
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0139      buf2[0]='w';
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 013A      buf2[1]='r';
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 013B      buf2[2]='i';
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 013C      buf2[3]='t';
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 013D      buf2[4]='e';
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 013E      buf2[5]='s';
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 013F      buf2[6]=m3;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0140      MSCS_com_veryfy(buf2,buf1);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0141      sprintf(buf,"PORT       SwitchOk");
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0142      delay_ms(1000);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0143     }
; 0000 0144     break;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0145     case 0x6://7
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0146        MSCS_com_veryfy("rtt             ",buf1);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0147     sprintf(buf,"t1=%2u %u         t2=%2u",buf1[2],buf[1],buf1[3]);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0148     delay_ms(3000);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0149     break;
;PCODE: $00000263 VOL: 0
; 0000 014A     case 0xE: //8
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 014B 
; 0000 014C     if (!((m1&0b100000)&&0b100000)){
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 014D      buf2[0]='w';
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 014E      buf2[1]='r';
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 014F      buf2[2]='i';
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0150      buf2[3]='t';
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0151      buf2[4]='e';
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0152      buf2[5]='a';
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0153      buf2[6]=m3;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 0154      MSCS_com_veryfy(buf2,buf1);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 0155      sprintf(buf,"Address         WRITE Ok");
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 0156     } else {
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0157      buf2[0]='r';
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 0158      buf2[1]='a';
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0159      buf2[2]='g';
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 015A      buf2[3]=m3;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 015B      MSCS_com_veryfy(buf2,buf1);
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 015C     sprintf(buf,"%2X%2X%2X%2X        %2X%2X t%2u",buf1[2],buf1[3],buf1[4],buf1[5],buf1[6],buf1[7],buf1[8]);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 015D 
; 0000 015E     }
;PCODE: $000002B6 VOL: 0
; 0000 015F     break;
;PCODE: $000002B7 VOL: 0
; 0000 0160     case 0xF:  //9
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 0161 
; 0000 0162      m3=encoder(m3);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0163      if (m3>=250) m3=0;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 0164      if (m3>(buf1[1]-1)) m3=(buf1[1]-1);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0165 
; 0000 0166     sprintf(buf,"sel term        %u",m3);
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0167     m4=0;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0168     break;
;PCODE: $000002DA VOL: 0
; 0000 0169     case 0xD: //10
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 016A 
; 0000 016B      buf2[0]='r';
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 016C      buf2[1]='t';
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 016D      buf2[2]='h';
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 016E 
; 0000 016F      m3=encoder(m3);
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 0170 
; 0000 0171     if (!((m1&0b100000)&&0b100000)){
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 0172      buf2[0]='w';
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 0173      buf2[1]='r';
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0174      buf2[2]='i';
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0175      buf2[3]='t';
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0176      buf2[4]='e';
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0177      buf2[5]='h';
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 0178      buf2[6]=m3;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0179      MSCS_com_veryfy(buf2,buf1);
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 017A      sprintf(buf,"HTemp           WRITE Ok");
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 017B 
; 0000 017C     } else {
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 017D 
; 0000 017E       if (!k){
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 017F       MSCS_com_veryfy(buf2,buf1);
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 0180       }
; 0000 0181       k++;
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0182       if (!m4) {
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 0183        m3=buf1[1];
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 0184        m4=1;
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 0185       }
; 0000 0186      sprintf(buf,"HLevel T        %3u  %3u",buf1[1],m3);
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0187     }
;PCODE: $0000032B VOL: 0
; 0000 0188     break;
;PCODE: $0000032C VOL: 0
; 0000 0189     case 0x5: //11
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 018A     m4=0;
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 018B 
; 0000 018C 
; 0000 018D 
; 0000 018E      m3=encoder(m3);
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 018F      if (m3>250) m3=0;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 0190      if (m3>3) m3=3;
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 0191 
; 0000 0192      buf2[0]='r';
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0193      buf2[1]='t';
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0194      buf2[2]='r';
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 0195      buf2[3]=m3;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 0196      if (!k) MSCS_com_veryfy(buf2,buf1);
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 0197      k++;
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 0198      if (buf1[1])
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 0199      {
; 0000 019A      sprintf(buf,"Sel Rel         %uTIMER",m3+1);
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 019B      } else{
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 019C      sprintf(buf,"Sel Rel         %uterm",m3+1);
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 019D      }
;PCODE: $00000371 VOL: 0
; 0000 019E 
; 0000 019F 
; 0000 01A0     if (!((m1&0b100000)&&0b100000)){
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 01A1      buf2[0]='w';
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 01A2      buf2[1]='r';
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 01A3      buf2[2]='i';
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 01A4      buf2[3]='t';
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 01A5      buf2[4]='e';
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 01A6      buf2[5]='r';
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 01A7      buf2[6]=m3;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 01A8      MSCS_com_veryfy(buf2,buf1);
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 01A9      }
; 0000 01AA     break;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 01AB     case 0x1://12
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 01AC 
; 0000 01AD      buf2[0]='r';
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 01AE      buf2[1]='t';
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 01AF      buf2[2]='l';
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 01B0      m3=encoder(m3);
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 01B1     if (!((m1&0b100000)&&0b100000)){
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 01B2      buf2[0]='w';
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 01B3      buf2[1]='r';
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 01B4      buf2[2]='i';
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 01B5      buf2[3]='t';
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 01B6      buf2[4]='e';
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 01B7      buf2[5]='l';
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 01B8      buf2[6]=m3;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 01B9      MSCS_com_veryfy(buf2,buf1);
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 01BA      sprintf(buf,"LTemp           WRITE Ok");
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 01BB 
; 0000 01BC     } else {
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0000 01BD 
; 0000 01BE       if (!k) MSCS_com_veryfy(buf2,buf1);
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 01BF       k++;
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 01C0       if (!m4) {
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 01C1        m3=buf1[1];
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 01C2        m4=1;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 01C3       }
; 0000 01C4      sprintf(buf,"LLevel T        %3u  %3u",buf1[1],m3);
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 01C5     }
;PCODE: $000003DE VOL: 0
; 0000 01C6     break;
;PCODE: $000003DF VOL: 0
; 0000 01C7     case 0x9://13
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 01C8     m4=0;
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 01C9 
; 0000 01CA 
; 0000 01CB 
; 0000 01CC     m4=0;
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 01CD 
; 0000 01CE 
; 0000 01CF 
; 0000 01D0      m3=encoder(m3);
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 01D1      if (m3>250) m3=0;
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0000 01D2      if (m3>3) m3=3;
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 01D3 
; 0000 01D4      buf2[0]='r';
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 01D5      buf2[1]='t';
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 01D6      buf2[2]='s';
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 01D7      buf2[3]=m3;
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 01D8      if (!k)
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
; 0000 01D9      MSCS_com_veryfy(buf2,buf1);
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 01DA      k++;
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 01DB      if (buf1[1])
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 01DC      {
; 0000 01DD      sprintf(buf,"Sel Rel         %1u LOW tm",m3+1);
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 01DE      } else{
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 01DF      sprintf(buf,"Sel Rel         %1u hi  tm",m3+1);
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 01E0      }
;PCODE: $00000426 VOL: 0
; 0000 01E1 
; 0000 01E2 
; 0000 01E3     if (!((m1&0b100000)&&0b100000)){
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 01E4      buf2[0]='w';
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 01E5      buf2[1]='r';
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 01E6      buf2[2]='i';
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 01E7      buf2[3]='t';
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 01E8      buf2[4]='e';
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 01E9      buf2[5]='g';
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 01EA      buf2[6]=m3;
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 01EB      MSCS_com_veryfy(buf2,buf1);
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 01EC      }
; 0000 01ED 
; 0000 01EE 
; 0000 01EF 
; 0000 01F0 
; 0000 01F1     break;
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 01F2     case 0xB: //14
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 01F3     if (!((m1&0b100000)&&0b100000)){
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 01F4     if (!m4){
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 01F5     Vol=1;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 01F6     m4=1;
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 01F7    // TCCR1A|=(1<<COM1B0);
; 0000 01F8     TCCR1B|=(1<<CS12)|(1<<CS10);
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 01F9     OCR1A=15629;
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 01FA     OCR1B=15625;
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 01FB     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01FC     TIMSK|=(1<<OCIE1A) | (1<<OCIE1B);
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 01FD     } else {
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0000 01FE     m4=0;
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 01FF     TCCR1A&=~(1<<COM1B0);
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 0200     TCCR1B&=~((1<<CS12)|(1<<CS10));
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 0201     TIMSK&=~((1<<OCIE1A) | (1<<OCIE1B));
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 0202     }
;PCODE: $0000046B VOL: 0
; 0000 0203 }
; 0000 0204     Vol=encoder(Vol);
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 0205     OCR1B=15625/Vol;
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 0206     if (m4)    sprintf(buf,"PulseGen        ON%4uOB",Vol*60);
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0000 0207     else sprintf(buf,"PulseGen        OFF     ");
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 0208     break;
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 0209     case 0x3: //15
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 020A     sprintf(buf,"Restart        clock");
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 020B     if (!((m1&0b100000)&&0b100000)){
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 020C      buf2[0]='w';
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 020D      buf2[1]='r';
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 020E      buf2[2]='i';
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 020F      buf2[3]='t';
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 0210      buf2[4]='e';
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 0211      buf2[5]='c';
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 0212      MSCS_com_veryfy(buf2,buf1);
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 0213      sprintf(buf,"Restart        clock-Ok");
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0000 0214      }
; 0000 0215     break;
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 0216     case 0x7: //16
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 0217     // ADC initialization
; 0000 0218 // ADC Clock frequency: 1000,000 kHz
; 0000 0219 // ADC Voltage Reference: Int., cap. on AREF
; 0000 021A ADMUX=FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff);
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0000 021B ADCSRA=0xCC;
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0000 021C     ft=0.005*adc_data;
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 021D     sprintf(buf,"Voltmetr        %1.3fVol",ft);
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 021E     break;
;PCODE: $000004D7 VOL: 0
; 0000 021F     default:
;PCODE: $000004D8 VOL: 0
; 0000 0220     sprintf(buf,"Pressed button   %X",PINC);
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 0221 }
;PCODE: $000004E5 VOL: 0
; 0000 0222       lcd_clear();
;PCODE: $000004E6 VOL: 0
; 0000 0223       lcd_gotoxy(0,0);
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
; 0000 0224       lcd_puts(buf);
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 0225       }
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
; 0000 0226 }
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0

	.DSEG
_0x21:
	.BYTE 0x3A
;    // */
;
