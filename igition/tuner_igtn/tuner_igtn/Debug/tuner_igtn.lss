
tuner_igtn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  0000041a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800108  00800108  00000556  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000531  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000253  00000000  00000000  00000aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000293  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000204  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b4  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
   2:	3c c0       	rjmp	.+120    	; 0x7c <__bad_interrupt>
   4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
   6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
   8:	39 c0       	rjmp	.+114    	; 0x7c <__bad_interrupt>
   a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
   c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
   e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
  10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
  12:	34 c0       	rjmp	.+104    	; 0x7c <__bad_interrupt>
  14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
  16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
  18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
  1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
  1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
  1e:	2e c0       	rjmp	.+92     	; 0x7c <__bad_interrupt>
  20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
  22:	2c c0       	rjmp	.+88     	; 0x7c <__bad_interrupt>
  24:	2b c0       	rjmp	.+86     	; 0x7c <__bad_interrupt>
  26:	e3 c0       	rjmp	.+454    	; 0x1ee <main+0xfe>
  28:	21 c1       	rjmp	.+578    	; 0x26c <main+0x17c>
  2a:	f6 c0       	rjmp	.+492    	; 0x218 <main+0x128>
  2c:	2e c1       	rjmp	.+604    	; 0x28a <main+0x19a>
  2e:	d8 c0       	rjmp	.+432    	; 0x1e0 <main+0xf0>
  30:	16 c1       	rjmp	.+556    	; 0x25e <main+0x16e>
  32:	f9 c0       	rjmp	.+498    	; 0x226 <main+0x136>
  34:	2f c1       	rjmp	.+606    	; 0x294 <main+0x1a4>
  36:	e2 c0       	rjmp	.+452    	; 0x1fc <main+0x10c>
  38:	1e c1       	rjmp	.+572    	; 0x276 <main+0x186>
  3a:	e7 c0       	rjmp	.+462    	; 0x20a <main+0x11a>
  3c:	21 c1       	rjmp	.+578    	; 0x280 <main+0x190>
  3e:	c9 c0       	rjmp	.+402    	; 0x1d2 <main+0xe2>
  40:	07 c1       	rjmp	.+526    	; 0x250 <main+0x160>
  42:	f8 c0       	rjmp	.+496    	; 0x234 <main+0x144>
  44:	fe c0       	rjmp	.+508    	; 0x242 <main+0x152>

00000046 <__ctors_end>:
  46:	11 24       	eor	r1, r1
  48:	1f be       	out	0x3f, r1	; 63
  4a:	cf e5       	ldi	r28, 0x5F	; 95
  4c:	d4 e0       	ldi	r29, 0x04	; 4
  4e:	de bf       	out	0x3e, r29	; 62
  50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
  52:	11 e0       	ldi	r17, 0x01	; 1
  54:	a0 e6       	ldi	r26, 0x60	; 96
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	ea e1       	ldi	r30, 0x1A	; 26
  5a:	f4 e0       	ldi	r31, 0x04	; 4
  5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
  5e:	05 90       	lpm	r0, Z+
  60:	0d 92       	st	X+, r0
  62:	a8 30       	cpi	r26, 0x08	; 8
  64:	b1 07       	cpc	r27, r17
  66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
  68:	21 e0       	ldi	r18, 0x01	; 1
  6a:	a8 e0       	ldi	r26, 0x08	; 8
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	ac 30       	cpi	r26, 0x0C	; 12
  74:	b2 07       	cpc	r27, r18
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	3b d0       	rcall	.+118    	; 0xf0 <main>
  7a:	cd c1       	rjmp	.+922    	; 0x416 <_exit>

0000007c <__bad_interrupt>:
  7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <LCDStrobeDelay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	8f e9       	ldi	r24, 0x9F	; 159
  80:	9f e0       	ldi	r25, 0x0F	; 15
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <LCDStrobeDelay+0x4>
  86:	00 c0       	rjmp	.+0      	; 0x88 <LCDStrobeDelay+0xa>
  88:	00 00       	nop
  8a:	08 95       	ret

0000008c <LCDEStrobe>:
}

//строб импульс
NOINLINE void LCDEStrobe (void)
{
	LCDControlPORT|= (1<<LCD_E);
  8c:	92 9a       	sbi	0x12, 2	; 18
	LCDStrobeDelay ();
  8e:	f7 df       	rcall	.-18     	; 0x7e <LCDStrobeDelay>
	LCDControlPORT &= ~(1<<LCD_E);
  90:	92 98       	cbi	0x12, 2	; 18
	LCDStrobeDelay ();
  92:	f5 df       	rcall	.-22     	; 0x7e <LCDStrobeDelay>
  94:	08 95       	ret

00000096 <LCDSendCommand>:
//----------------------------------------------------------------------------------------------
//Функция отправки команды на LCD
//АРГУМЕНТ - код команды

void LCDSendCommand (unsigned char byte)
{
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
	LCDDataPORT &= ~(1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4);	//очистить линии данных
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	87 78       	andi	r24, 0x87	; 135
  9e:	82 bb       	out	0x12, r24	; 18
	LCDDataPORT |= ((byte & 0b11110000) >> (4-LCD_D4));			//вывод старшей тетрады команды
  a0:	92 b3       	in	r25, 0x12	; 18
  a2:	8c 2f       	mov	r24, r28
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	86 95       	lsr	r24
  a8:	89 2b       	or	r24, r25
  aa:	82 bb       	out	0x12, r24	; 18
	LCDEStrobe ();												//строб импульс
  ac:	ef df       	rcall	.-34     	; 0x8c <LCDEStrobe>

	LCDDataPORT &= ~(1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4);	//очистить линии данных
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	87 78       	andi	r24, 0x87	; 135
  b2:	82 bb       	out	0x12, r24	; 18
	LCDDataPORT |= ((byte & 0b00001111) << (LCD_D4));			//вывод младшей тетрады команды
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	cf 70       	andi	r28, 0x0F	; 15
  b8:	cc 0f       	add	r28, r28
  ba:	cc 0f       	add	r28, r28
  bc:	cc 0f       	add	r28, r28
  be:	c8 2b       	or	r28, r24
  c0:	c2 bb       	out	0x12, r28	; 18
	LCDEStrobe ();												//строб импульс
  c2:	e4 df       	rcall	.-56     	; 0x8c <LCDEStrobe>
}
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <LCD_cls>:
static void LCDSendCommand (unsigned char);					//отправить команду на LCD
static void LCDInit (void);									//Инициализация LCD
static void LCDCurGotoXY(unsigned char x, unsigned char y); //Перемещение курсора LCD в X,Y позицию

void LCD_cls(void){
	LCDSendCommand (LCDCommandDispClear);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	e5 df       	rcall	.-54     	; 0x96 <LCDSendCommand>
  cc:	08 95       	ret

000000ce <LCDSendStr>:
	LCDControlPORT |= 1<<LCD_RS;								//признак загрузки символа
	LCDSendCommand (byte);										//вывод символа
	LCDControlPORT &= ~(1<<LCD_RS);
}

static void LCDSendStr (char *str ){
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	while (*str) {
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	41 f0       	breq	.+16     	; 0xea <LCDSendStr+0x1c>
  da:	21 96       	adiw	r28, 0x01	; 1
//функция вывода символа на LCD дисплей (в текущую позицию)
//АРГУМЕНТ - код символа

void LCDSendChar (unsigned char byte)
{
	LCDControlPORT |= 1<<LCD_RS;								//признак загрузки символа
  dc:	90 9a       	sbi	0x12, 0	; 18
	LCDSendCommand (byte);										//вывод символа
  de:	db df       	rcall	.-74     	; 0x96 <LCDSendCommand>
	LCDControlPORT &= ~(1<<LCD_RS);
  e0:	90 98       	cbi	0x12, 0	; 18
}

static void LCDSendStr (char *str ){
	while (*str) {
LCDSendChar(*str++);	
LCDStrobeDelay();
  e2:	cd df       	rcall	.-102    	; 0x7e <LCDStrobeDelay>
	LCDSendCommand (byte);										//вывод символа
	LCDControlPORT &= ~(1<<LCD_RS);
}

static void LCDSendStr (char *str ){
	while (*str) {
  e4:	89 91       	ld	r24, Y+
  e6:	81 11       	cpse	r24, r1
  e8:	f9 cf       	rjmp	.-14     	; 0xdc <LCDSendStr+0xe>
LCDStrobeDelay();
}


	
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:
{	
unsigned char m1,New;

unsigned int NewState,OldState,upState,downState;
unsigned char Vol;
DDRC=0x00;
  f0:	14 ba       	out	0x14, r1	; 20
PORTC|=1|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5);
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	8f 63       	ori	r24, 0x3F	; 63
  f6:	85 bb       	out	0x15, r24	; 21
DDRB&=~(1|(1<<1));
  f8:	87 b3       	in	r24, 0x17	; 23
  fa:	8c 7f       	andi	r24, 0xFC	; 252
  fc:	87 bb       	out	0x17, r24	; 23
PORTB|=1|(1<<1);
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	83 60       	ori	r24, 0x03	; 3
 102:	88 bb       	out	0x18, r24	; 24

	buf="Start!";
 104:	80 e6       	ldi	r24, 0x60	; 96
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 0b 01 	sts	0x010B, r25
 10c:	80 93 0a 01 	sts	0x010A, r24
}

//Функция инициализации LCD
void LCDInit (void)
{
	LCDDataPORT &= ~(1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4);	//очистить линии данных
 110:	82 b3       	in	r24, 0x12	; 18
 112:	87 78       	andi	r24, 0x87	; 135
 114:	82 bb       	out	0x12, r24	; 18
	LCDDataDDR |= (1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4);	//линии данных на вывод
 116:	81 b3       	in	r24, 0x11	; 17
 118:	88 67       	ori	r24, 0x78	; 120
 11a:	81 bb       	out	0x11, r24	; 17
	LCDControlPORT &= ~(1<<LCD_E|1<<LCD_RS);					//очистить линии управления
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	8a 7f       	andi	r24, 0xFA	; 250
 120:	82 bb       	out	0x12, r24	; 18
	LCDControlDDR |= (1<<LCD_E|1<<LCD_RS); 						//линии управления на вывод
 122:	81 b3       	in	r24, 0x11	; 17
 124:	85 60       	ori	r24, 0x05	; 5
 126:	81 bb       	out	0x11, r24	; 17

	//_delay_ms (50);		//закомментировать, если в фузах контроллера запрограммирована задержка при старте 64мс
	LCDDataPORT |= (1<<LCD_D5|1<<LCD_D4);
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	88 61       	ori	r24, 0x18	; 24
 12c:	82 bb       	out	0x12, r24	; 18
	LCDEStrobe ();
 12e:	ae df       	rcall	.-164    	; 0x8c <LCDEStrobe>
 130:	8f e1       	ldi	r24, 0x1F	; 31
 132:	9e e4       	ldi	r25, 0x4E	; 78
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x44>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x4a>
 13a:	00 00       	nop
	_delay_ms (5);
	LCDEStrobe ();
 13c:	a7 df       	rcall	.-178    	; 0x8c <LCDEStrobe>
	LCDEStrobe ();
 13e:	a6 df       	rcall	.-180    	; 0x8c <LCDEStrobe>
	LCDDataPORT &= ~(1<<LCD_D4);
 140:	93 98       	cbi	0x12, 3	; 18
	LCDEStrobe ();
 142:	a4 df       	rcall	.-184    	; 0x8c <LCDEStrobe>

	LCDSendCommand (0x28);										//режим - 4 бита, 2 строки
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	a7 df       	rcall	.-178    	; 0x96 <LCDSendCommand>
	LCDSendCommand (LCDCommandDispModeProg);					//режим дисплея (определен в дефайнах)
 148:	8c e0       	ldi	r24, 0x0C	; 12
 14a:	a5 df       	rcall	.-182    	; 0x96 <LCDSendCommand>
DDRB&=~(1|(1<<1));
PORTB|=1|(1<<1);

	buf="Start!";
	LCDInit();
	LCDSendCommand (LCDCommandDispClear);						//очистить данные в самом дисплее
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	a3 df       	rcall	.-186    	; 0x96 <LCDSendCommand>
	LCDSendCommand (LCDCommandCurHome);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	a1 df       	rcall	.-190    	; 0x96 <LCDSendCommand>
LCDSendStr(buf);
 154:	80 91 0a 01 	lds	r24, 0x010A
 158:	90 91 0b 01 	lds	r25, 0x010B
 15c:	b8 df       	rcall	.-144    	; 0xce <LCDSendStr>
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	2b e7       	ldi	r18, 0x7B	; 123
 162:	82 e9       	ldi	r24, 0x92	; 146
 164:	91 50       	subi	r25, 0x01	; 1
 166:	20 40       	sbci	r18, 0x00	; 0
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x74>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x7e>
 16e:	00 00       	nop
_delay_ms(3000);
LCD_cls();
 170:	ab df       	rcall	.-170    	; 0xc8 <LCD_cls>

void LCDCurGotoXY (unsigned char x, unsigned char y)
{
	if (y == 1)
	x |= 0x40;
	LCDSendCommand (0x80 | x);
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	90 df       	rcall	.-224    	; 0x96 <LCDSendCommand>
	LCDSendCommand (LCDCommandCurHome);
LCDSendStr(buf);
_delay_ms(3000);
LCD_cls();
LCDCurGotoXY(0,1);
LCDSendStr("Mod=    Read=   ");
 176:	87 e6       	ldi	r24, 0x67	; 103
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a9 df       	rcall	.-174    	; 0xce <LCDSendStr>
	break;
	case 0x37:
	buf="Menu 16";	
	break;
	default:
	buf="Pressed button";
 17c:	0f 2e       	mov	r0, r31
 17e:	f8 ef       	ldi	r31, 0xF8	; 248
 180:	af 2e       	mov	r10, r31
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	bf 2e       	mov	r11, r31
 186:	f0 2d       	mov	r31, r0
	break;
	case 0x3B:
	buf="Menu 14";	
	break;
	case 0x33:
	buf="Menu 15";	
 188:	0f 2e       	mov	r0, r31
 18a:	f8 ee       	ldi	r31, 0xE8	; 232
 18c:	8f 2e       	mov	r8, r31
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	9f 2e       	mov	r9, r31
 192:	f0 2d       	mov	r31, r0
	break;
	case 0x39:
	buf="Menu 13";	
	break;
	case 0x3B:
	buf="Menu 14";	
 194:	0f 2e       	mov	r0, r31
 196:	f0 ee       	ldi	r31, 0xE0	; 224
 198:	6f 2e       	mov	r6, r31
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	7f 2e       	mov	r7, r31
 19e:	f0 2d       	mov	r31, r0
	break;
	case 0x31:
	buf="Menu 12";	
	break;
	case 0x39:
	buf="Menu 13";	
 1a0:	0f 2e       	mov	r0, r31
 1a2:	f8 ed       	ldi	r31, 0xD8	; 216
 1a4:	4f 2e       	mov	r4, r31
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	5f 2e       	mov	r5, r31
 1aa:	f0 2d       	mov	r31, r0
	break;
	case 0x35:
	buf="Menu 11";	
	break;
	case 0x31:
	buf="Menu 12";	
 1ac:	0f 2e       	mov	r0, r31
 1ae:	f0 ed       	ldi	r31, 0xD0	; 208
 1b0:	2f 2e       	mov	r2, r31
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	3f 2e       	mov	r3, r31
 1b6:	f0 2d       	mov	r31, r0

void LCDCurGotoXY (unsigned char x, unsigned char y)
{
	if (y == 1)
	x |= 0x40;
	LCDSendCommand (0x80 | x);
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	6d df       	rcall	.-294    	; 0x96 <LCDSendCommand>
LCD_cls();
LCDCurGotoXY(0,1);
LCDSendStr("Mod=    Read=   ");
	while(1){
LCDCurGotoXY(0,0);
m1=PINC;
 1bc:	83 b3       	in	r24, 0x13	; 19
buf="";
switch (m1)
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	f0 97       	sbiw	r30, 0x30	; 48
 1c4:	e0 31       	cpi	r30, 0x10	; 16
 1c6:	f1 05       	cpc	r31, r1
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <main+0xdc>
 1ca:	6b c0       	rjmp	.+214    	; 0x2a2 <main+0x1b2>
 1cc:	ed 5e       	subi	r30, 0xED	; 237
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	09 94       	ijmp
{
	case 0x3C:
	buf="Menu 1 ";
 1d2:	88 e7       	ldi	r24, 0x78	; 120
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 0b 01 	sts	0x010B, r25
 1da:	80 93 0a 01 	sts	0x010A, r24
	break;
 1de:	65 c0       	rjmp	.+202    	; 0x2aa <main+0x1ba>
	case 0x34:
	buf="Menu 2 ";
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 0b 01 	sts	0x010B, r25
 1e8:	80 93 0a 01 	sts	0x010A, r24
	break;
 1ec:	5e c0       	rjmp	.+188    	; 0x2aa <main+0x1ba>
	case 0x30:
	buf="Menu 3 ";
 1ee:	88 e8       	ldi	r24, 0x88	; 136
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 0b 01 	sts	0x010B, r25
 1f6:	80 93 0a 01 	sts	0x010A, r24
	break;
 1fa:	57 c0       	rjmp	.+174    	; 0x2aa <main+0x1ba>
	case 0x38:
	buf="Menu 4 ";	
 1fc:	80 e9       	ldi	r24, 0x90	; 144
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 0b 01 	sts	0x010B, r25
 204:	80 93 0a 01 	sts	0x010A, r24
	break;
 208:	50 c0       	rjmp	.+160    	; 0x2aa <main+0x1ba>
	case 0x3A:
	buf="Menu 5 ";	
 20a:	88 e9       	ldi	r24, 0x98	; 152
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 0b 01 	sts	0x010B, r25
 212:	80 93 0a 01 	sts	0x010A, r24
	break;
 216:	49 c0       	rjmp	.+146    	; 0x2aa <main+0x1ba>
	case 0x32:
	buf="Menu 6 ";	
 218:	80 ea       	ldi	r24, 0xA0	; 160
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 0b 01 	sts	0x010B, r25
 220:	80 93 0a 01 	sts	0x010A, r24
	break;
 224:	42 c0       	rjmp	.+132    	; 0x2aa <main+0x1ba>
	case 0x36:
	buf="Menu 7 ";	
 226:	88 ea       	ldi	r24, 0xA8	; 168
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 0b 01 	sts	0x010B, r25
 22e:	80 93 0a 01 	sts	0x010A, r24
	break;
 232:	3b c0       	rjmp	.+118    	; 0x2aa <main+0x1ba>
	case 0x3E:
	buf="Menu 8 ";	
 234:	80 eb       	ldi	r24, 0xB0	; 176
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 0b 01 	sts	0x010B, r25
 23c:	80 93 0a 01 	sts	0x010A, r24
	break;
 240:	34 c0       	rjmp	.+104    	; 0x2aa <main+0x1ba>
	case 0x3F:
	buf="Menu 9 ";	
 242:	88 eb       	ldi	r24, 0xB8	; 184
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 0b 01 	sts	0x010B, r25
 24a:	80 93 0a 01 	sts	0x010A, r24
	break;
 24e:	2d c0       	rjmp	.+90     	; 0x2aa <main+0x1ba>
	case 0x3D:
	buf="Menu 10";	
 250:	80 ec       	ldi	r24, 0xC0	; 192
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 0b 01 	sts	0x010B, r25
 258:	80 93 0a 01 	sts	0x010A, r24
	break;
 25c:	26 c0       	rjmp	.+76     	; 0x2aa <main+0x1ba>
	case 0x35:
	buf="Menu 11";	
 25e:	88 ec       	ldi	r24, 0xC8	; 200
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 0b 01 	sts	0x010B, r25
 266:	80 93 0a 01 	sts	0x010A, r24
	break;
 26a:	1f c0       	rjmp	.+62     	; 0x2aa <main+0x1ba>
	case 0x31:
	buf="Menu 12";	
 26c:	30 92 0b 01 	sts	0x010B, r3
 270:	20 92 0a 01 	sts	0x010A, r2
	break;
 274:	1a c0       	rjmp	.+52     	; 0x2aa <main+0x1ba>
	case 0x39:
	buf="Menu 13";	
 276:	50 92 0b 01 	sts	0x010B, r5
 27a:	40 92 0a 01 	sts	0x010A, r4
	break;
 27e:	15 c0       	rjmp	.+42     	; 0x2aa <main+0x1ba>
	case 0x3B:
	buf="Menu 14";	
 280:	70 92 0b 01 	sts	0x010B, r7
 284:	60 92 0a 01 	sts	0x010A, r6
	break;
 288:	10 c0       	rjmp	.+32     	; 0x2aa <main+0x1ba>
	case 0x33:
	buf="Menu 15";	
 28a:	90 92 0b 01 	sts	0x010B, r9
 28e:	80 92 0a 01 	sts	0x010A, r8
	break;
 292:	0b c0       	rjmp	.+22     	; 0x2aa <main+0x1ba>
	case 0x37:
	buf="Menu 16";	
 294:	80 ef       	ldi	r24, 0xF0	; 240
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 0b 01 	sts	0x010B, r25
 29c:	80 93 0a 01 	sts	0x010A, r24
	break;
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <main+0x1ba>
	default:
	buf="Pressed button";
 2a2:	b0 92 0b 01 	sts	0x010B, r11
 2a6:	a0 92 0a 01 	sts	0x010A, r10
}

      NewState=PINB & 0b00000011;
 2aa:	86 b3       	in	r24, 0x16	; 22
 2ac:	83 70       	andi	r24, 0x03	; 3
 2ae:	90 e0       	ldi	r25, 0x00	; 0
      //NewState=NewState>>5;  
     // sprintf(line,"vol=%d",NewState);
      //lcd_gotoxy(0,1);
      //lcd_puts(line);
if(NewState!=OldState)
 2b0:	8c 17       	cp	r24, r28
 2b2:	9d 07       	cpc	r25, r29
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0x1c8>
 2b6:	4d c0       	rjmp	.+154    	; 0x352 <main+0x262>
{

switch(OldState)
 2b8:	c1 30       	cpi	r28, 0x01	; 1
 2ba:	d1 05       	cpc	r29, r1
 2bc:	21 f1       	breq	.+72     	; 0x306 <main+0x216>
 2be:	a0 f0       	brcs	.+40     	; 0x2e8 <main+0x1f8>
 2c0:	c2 30       	cpi	r28, 0x02	; 2
 2c2:	d1 05       	cpc	r29, r1
 2c4:	19 f0       	breq	.+6      	; 0x2cc <main+0x1dc>
 2c6:	23 97       	sbiw	r28, 0x03	; 3
 2c8:	61 f1       	breq	.+88     	; 0x322 <main+0x232>
 2ca:	3a c0       	rjmp	.+116    	; 0x340 <main+0x250>
	{
	case 2:
		{
		if(NewState == 3) upState++;
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	91 05       	cpc	r25, r1
 2d0:	21 f4       	brne	.+8      	; 0x2da <main+0x1ea>
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
		if(NewState == 1) upState++;
		if(NewState == 2) downState++; 
		break;
		}
	}            
OldState=NewState;
 2d6:	ec 01       	movw	r28, r24
 2d8:	3c c0       	rjmp	.+120    	; 0x352 <main+0x262>
switch(OldState)
	{
	case 2:
		{
		if(NewState == 3) upState++;
		if(NewState == 0) downState++; 
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	99 f5       	brne	.+102    	; 0x344 <main+0x254>
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	e2 1a       	sub	r14, r18
 2e2:	f2 0a       	sbc	r15, r18
		if(NewState == 1) upState++;
		if(NewState == 2) downState++; 
		break;
		}
	}            
OldState=NewState;
 2e4:	ec 01       	movw	r28, r24
 2e6:	35 c0       	rjmp	.+106    	; 0x352 <main+0x262>
		break;
		}
 
	case 0:
		{
		if(NewState == 2) upState++;
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	91 05       	cpc	r25, r1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <main+0x206>
 2ee:	0f 5f       	subi	r16, 0xFF	; 255
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
		if(NewState == 1) upState++;
		if(NewState == 2) downState++; 
		break;
		}
	}            
OldState=NewState;
 2f2:	ec 01       	movw	r28, r24
 2f4:	2e c0       	rjmp	.+92     	; 0x352 <main+0x262>
		}
 
	case 0:
		{
		if(NewState == 2) upState++;
		if(NewState == 1) downState++; 
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	91 05       	cpc	r25, r1
 2fa:	31 f5       	brne	.+76     	; 0x348 <main+0x258>
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	e2 1a       	sub	r14, r18
 300:	f2 0a       	sbc	r15, r18
		if(NewState == 1) upState++;
		if(NewState == 2) downState++; 
		break;
		}
	}            
OldState=NewState;
 302:	ec 01       	movw	r28, r24
 304:	26 c0       	rjmp	.+76     	; 0x352 <main+0x262>
		if(NewState == 1) downState++; 
		break;
		}
	case 1:
		{
		if(NewState == 0) upState++;
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	21 f4       	brne	.+8      	; 0x312 <main+0x222>
 30a:	0f 5f       	subi	r16, 0xFF	; 255
 30c:	1f 4f       	sbci	r17, 0xFF	; 255
		if(NewState == 1) upState++;
		if(NewState == 2) downState++; 
		break;
		}
	}            
OldState=NewState;
 30e:	ec 01       	movw	r28, r24
 310:	20 c0       	rjmp	.+64     	; 0x352 <main+0x262>
		break;
		}
	case 1:
		{
		if(NewState == 0) upState++;
		if(NewState == 3) downState++; 
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	91 05       	cpc	r25, r1
 316:	d1 f4       	brne	.+52     	; 0x34c <main+0x25c>
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	e2 1a       	sub	r14, r18
 31c:	f2 0a       	sbc	r15, r18
		if(NewState == 1) upState++;
		if(NewState == 2) downState++; 
		break;
		}
	}            
OldState=NewState;
 31e:	ec 01       	movw	r28, r24
 320:	18 c0       	rjmp	.+48     	; 0x352 <main+0x262>
		if(NewState == 3) downState++; 
		break;
		}
	case 3:
		{
		if(NewState == 1) upState++;
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	91 05       	cpc	r25, r1
 326:	21 f4       	brne	.+8      	; 0x330 <main+0x240>
 328:	0f 5f       	subi	r16, 0xFF	; 255
 32a:	1f 4f       	sbci	r17, 0xFF	; 255
		if(NewState == 2) downState++; 
		break;
		}
	}            
OldState=NewState;
 32c:	ec 01       	movw	r28, r24
 32e:	11 c0       	rjmp	.+34     	; 0x352 <main+0x262>
		break;
		}
	case 3:
		{
		if(NewState == 1) upState++;
		if(NewState == 2) downState++; 
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	91 05       	cpc	r25, r1
 334:	69 f4       	brne	.+26     	; 0x350 <main+0x260>
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	e2 1a       	sub	r14, r18
 33a:	f2 0a       	sbc	r15, r18
		break;
		}
	}            
OldState=NewState;
 33c:	ec 01       	movw	r28, r24
 33e:	09 c0       	rjmp	.+18     	; 0x352 <main+0x262>
 340:	ec 01       	movw	r28, r24
 342:	07 c0       	rjmp	.+14     	; 0x352 <main+0x262>
 344:	ec 01       	movw	r28, r24
 346:	05 c0       	rjmp	.+10     	; 0x352 <main+0x262>
 348:	ec 01       	movw	r28, r24
 34a:	03 c0       	rjmp	.+6      	; 0x352 <main+0x262>
 34c:	ec 01       	movw	r28, r24
 34e:	01 c0       	rjmp	.+2      	; 0x352 <main+0x262>
 350:	ec 01       	movw	r28, r24
}      
 if (upState >= 4) 
 352:	04 30       	cpi	r16, 0x04	; 4
 354:	11 05       	cpc	r17, r1
 356:	18 f0       	brcs	.+6      	; 0x35e <main+0x26e>
      {                            
        Vol--;
 358:	da 94       	dec	r13
        upState = 0;
 35a:	00 e0       	ldi	r16, 0x00	; 0
 35c:	10 e0       	ldi	r17, 0x00	; 0
      }
      if (downState >= 4) 
 35e:	84 e0       	ldi	r24, 0x04	; 4
 360:	e8 16       	cp	r14, r24
 362:	f1 04       	cpc	r15, r1
 364:	18 f0       	brcs	.+6      	; 0x36c <main+0x27c>
      {                              
        Vol++;
 366:	d3 94       	inc	r13
        downState = 0;
 368:	e1 2c       	mov	r14, r1
 36a:	f1 2c       	mov	r15, r1
      }
	  
itoa(Vol,rebuf,10);	  
 36c:	60 91 08 01 	lds	r22, 0x0108
 370:	70 91 09 01 	lds	r23, 0x0109
 374:	4a e0       	ldi	r20, 0x0A	; 10
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	8d 2d       	mov	r24, r13
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0f d0       	rcall	.+30     	; 0x39c <itoa>

void LCDCurGotoXY (unsigned char x, unsigned char y)
{
	if (y == 1)
	x |= 0x40;
	LCDSendCommand (0x80 | x);
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	8a de       	rcall	.-748    	; 0x96 <LCDSendCommand>
        downState = 0;
      }
	  
itoa(Vol,rebuf,10);	  
LCDCurGotoXY(0,0);
LCDSendStr(buf);
 382:	80 91 0a 01 	lds	r24, 0x010A
 386:	90 91 0b 01 	lds	r25, 0x010B
 38a:	a1 de       	rcall	.-702    	; 0xce <LCDSendStr>

void LCDCurGotoXY (unsigned char x, unsigned char y)
{
	if (y == 1)
	x |= 0x40;
	LCDSendCommand (0x80 | x);
 38c:	84 ec       	ldi	r24, 0xC4	; 196
 38e:	83 de       	rcall	.-762    	; 0x96 <LCDSendCommand>
	  
itoa(Vol,rebuf,10);	  
LCDCurGotoXY(0,0);
LCDSendStr(buf);
LCDCurGotoXY(4,1);
LCDSendStr(rebuf);
 390:	80 91 08 01 	lds	r24, 0x0108
 394:	90 91 09 01 	lds	r25, 0x0109
 398:	9a de       	rcall	.-716    	; 0xce <LCDSendStr>
	}
 39a:	0e cf       	rjmp	.-484    	; 0x1b8 <main+0xc8>

0000039c <itoa>:
 39c:	45 32       	cpi	r20, 0x25	; 37
 39e:	51 05       	cpc	r21, r1
 3a0:	18 f4       	brcc	.+6      	; 0x3a8 <itoa+0xc>
 3a2:	42 30       	cpi	r20, 0x02	; 2
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <itoa+0xc>
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <__itoa_ncheck>
 3a8:	fb 01       	movw	r30, r22
 3aa:	10 82       	st	Z, r1
 3ac:	cb 01       	movw	r24, r22
 3ae:	08 95       	ret

000003b0 <__itoa_ncheck>:
 3b0:	bb 27       	eor	r27, r27
 3b2:	4a 30       	cpi	r20, 0x0A	; 10
 3b4:	31 f4       	brne	.+12     	; 0x3c2 <__itoa_ncheck+0x12>
 3b6:	99 23       	and	r25, r25
 3b8:	22 f4       	brpl	.+8      	; 0x3c2 <__itoa_ncheck+0x12>
 3ba:	bd e2       	ldi	r27, 0x2D	; 45
 3bc:	90 95       	com	r25
 3be:	81 95       	neg	r24
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <__utoa_common>

000003c4 <__utoa_ncheck>:
 3c4:	bb 27       	eor	r27, r27

000003c6 <__utoa_common>:
 3c6:	fb 01       	movw	r30, r22
 3c8:	55 27       	eor	r21, r21
 3ca:	aa 27       	eor	r26, r26
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	aa 1f       	adc	r26, r26
 3d2:	a4 17       	cp	r26, r20
 3d4:	10 f0       	brcs	.+4      	; 0x3da <__utoa_common+0x14>
 3d6:	a4 1b       	sub	r26, r20
 3d8:	83 95       	inc	r24
 3da:	50 51       	subi	r21, 0x10	; 16
 3dc:	b9 f7       	brne	.-18     	; 0x3cc <__utoa_common+0x6>
 3de:	a0 5d       	subi	r26, 0xD0	; 208
 3e0:	aa 33       	cpi	r26, 0x3A	; 58
 3e2:	08 f0       	brcs	.+2      	; 0x3e6 <__utoa_common+0x20>
 3e4:	a9 5d       	subi	r26, 0xD9	; 217
 3e6:	a1 93       	st	Z+, r26
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	79 f7       	brne	.-34     	; 0x3ca <__utoa_common+0x4>
 3ec:	b1 11       	cpse	r27, r1
 3ee:	b1 93       	st	Z+, r27
 3f0:	11 92       	st	Z+, r1
 3f2:	cb 01       	movw	r24, r22
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <strrev>

000003f6 <strrev>:
 3f6:	dc 01       	movw	r26, r24
 3f8:	fc 01       	movw	r30, r24
 3fa:	67 2f       	mov	r22, r23
 3fc:	71 91       	ld	r23, Z+
 3fe:	77 23       	and	r23, r23
 400:	e1 f7       	brne	.-8      	; 0x3fa <strrev+0x4>
 402:	32 97       	sbiw	r30, 0x02	; 2
 404:	04 c0       	rjmp	.+8      	; 0x40e <strrev+0x18>
 406:	7c 91       	ld	r23, X
 408:	6d 93       	st	X+, r22
 40a:	70 83       	st	Z, r23
 40c:	62 91       	ld	r22, -Z
 40e:	ae 17       	cp	r26, r30
 410:	bf 07       	cpc	r27, r31
 412:	c8 f3       	brcs	.-14     	; 0x406 <strrev+0x10>
 414:	08 95       	ret

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>
