
ingectorIntEEprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000103  00800060  00800060  0000011a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000191  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000107  00000000  00000000  0000030b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015e  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b1  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006d  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000007e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	21 e0       	ldi	r18, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 36       	cpi	r26, 0x63	; 99
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	24 d0       	rcall	.+72     	; 0x8c <main>
  44:	2e c0       	rjmp	.+92     	; 0xa2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <eeprom_to_mem>:




void eeprom_to_mem(void)
{
  48:	0f 93       	push	r16
  4a:	1f 93       	push	r17
  4c:	cf 93       	push	r28
  4e:	df 93       	push	r29
  50:	02 e6       	ldi	r16, 0x62	; 98
  52:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t LocalCounter = 0;
	for (LocalCounter = 0;LocalCounter<def_ArrSize;LocalCounter++)
  54:	c0 e0       	ldi	r28, 0x00	; 0
  56:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
		TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  58:	ce 01       	movw	r24, r28
  5a:	1b d0       	rcall	.+54     	; 0x92 <__eerd_byte_m8>
  5c:	f8 01       	movw	r30, r16
  5e:	81 93       	st	Z+, r24
  60:	8f 01       	movw	r16, r30


void eeprom_to_mem(void)
{
	uint16_t LocalCounter = 0;
	for (LocalCounter = 0;LocalCounter<def_ArrSize;LocalCounter++)
  62:	21 96       	adiw	r28, 0x01	; 1
  64:	ca 3f       	cpi	r28, 0xFA	; 250
  66:	d1 05       	cpc	r29, r1
  68:	b9 f7       	brne	.-18     	; 0x58 <eeprom_to_mem+0x10>
	{
		//eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
		TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
	}
}
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	08 95       	ret

00000074 <Timer2Setup>:

	// LED_PORT|= 1<<LED4; //set
	// LED_PORT&= ~(1<<LED1);//clear
	// LED_PORT = LED_PORT ^ (1<<LED1); //switch
	
	OCR2 = 199; //нужно 200 тиков, счет с 0
  74:	87 ec       	ldi	r24, 0xC7	; 199
  76:	83 bd       	out	0x23, r24	; 35

	TCCR2|= (0<<FOC2|0<<WGM20|0<<COM21|0<<COM20|1<<WGM21|0<<CS22|0<<CS21|1<<CS20);
  78:	85 b5       	in	r24, 0x25	; 37
  7a:	89 60       	ori	r24, 0x09	; 9
  7c:	85 bd       	out	0x25, r24	; 37
	//CS22 =0
	//CS21 =0
	//CS20=1 //CPU clock
*/
	//теперь разрешим от него прерывания
	Timer2IntON
  7e:	89 b7       	in	r24, 0x39	; 57
  80:	80 6c       	ori	r24, 0xC0	; 192
  82:	89 bf       	out	0x39, r24	; 57
	Timer2IntOFF
  84:	89 b7       	in	r24, 0x39	; 57
  86:	8f 73       	andi	r24, 0x3F	; 63
  88:	89 bf       	out	0x39, r24	; 57
  8a:	08 95       	ret

0000008c <main>:

*/

int main(void)
{
eeprom_to_mem();//load data arrays into memory
  8c:	dd df       	rcall	.-70     	; 0x48 <eeprom_to_mem>
Timer2Setup(); //setup timer2 //считает отрезки по 25 микросекунд
  8e:	f2 df       	rcall	.-28     	; 0x74 <Timer2Setup>
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x4>

00000092 <__eerd_byte_m8>:
  92:	e1 99       	sbic	0x1c, 1	; 28
  94:	fe cf       	rjmp	.-4      	; 0x92 <__eerd_byte_m8>
  96:	9f bb       	out	0x1f, r25	; 31
  98:	8e bb       	out	0x1e, r24	; 30
  9a:	e0 9a       	sbi	0x1c, 0	; 28
  9c:	99 27       	eor	r25, r25
  9e:	8d b3       	in	r24, 0x1d	; 29
  a0:	08 95       	ret

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
