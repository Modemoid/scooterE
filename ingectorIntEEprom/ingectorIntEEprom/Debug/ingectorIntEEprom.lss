
ingectorIntEEprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  008000d8  008000d8  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000332  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000132  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000236  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000267  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000329  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	6b c0       	rjmp	.+214    	; 0xda <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	c8 c0       	rjmp	.+400    	; 0x198 <__vector_3>
   8:	a4 c0       	rjmp	.+328    	; 0x152 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	e0 c0       	rjmp	.+448    	; 0x1de <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e3       	ldi	r30, 0x32	; 50
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 3d       	cpi	r26, 0xD8	; 216
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a8 ed       	ldi	r26, 0xD8	; 216
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 35       	cpi	r26, 0x5D	; 93
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d4 d0       	rcall	.+424    	; 0x202 <main>
  5a:	e9 c0       	rjmp	.+466    	; 0x22e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <eeprom_to_mem>:




void eeprom_to_mem(void)
{
  5e:	0f 93       	push	r16
  60:	1f 93       	push	r17
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	0a ed       	ldi	r16, 0xDA	; 218
  68:	10 e0       	ldi	r17, 0x00	; 0
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  6a:	c0 e0       	ldi	r28, 0x00	; 0
  6c:	d0 e0       	ldi	r29, 0x00	; 0
  {
    //eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
    TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  6e:	ce 01       	movw	r24, r28
  70:	d6 d0       	rcall	.+428    	; 0x21e <__eerd_byte_m8>
  72:	f8 01       	movw	r30, r16
  74:	81 93       	st	Z+, r24
  76:	8f 01       	movw	r16, r30


void eeprom_to_mem(void)
{
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  78:	21 96       	adiw	r28, 0x01	; 1
  7a:	c8 37       	cpi	r28, 0x78	; 120
  7c:	d1 05       	cpc	r29, r1
  7e:	b9 f7       	brne	.-18     	; 0x6e <eeprom_to_mem+0x10>
  {
    //eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
    TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  }
  TimeArray[def_ArrSize] = 0;
  80:	10 92 52 01 	sts	0x0152, r1
}
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	0f 91       	pop	r16
  8c:	08 95       	ret

0000008e <Timer2Setup>:

  // LED_PORT|= 1<<LED4; //set
  // LED_PORT&= ~(1<<LED1);//clear
  // LED_PORT = LED_PORT ^ (1<<LED1); //switch

  OCR2 = 199; //нужно 200 тиков, счет с 0
  8e:	87 ec       	ldi	r24, 0xC7	; 199
  90:	83 bd       	out	0x23, r24	; 35

  TCCR2 |= (0 << FOC2 | 0 << WGM20 | 0 << COM21 | 0 << COM20 | 1 << WGM21 | 0 << CS22 | 0 << CS21 | 1 << CS20);
  92:	85 b5       	in	r24, 0x25	; 37
  94:	89 60       	ori	r24, 0x09	; 9
  96:	85 bd       	out	0x25, r24	; 37
  //CS22 =0
  //CS21 =0
  //CS20=1 //CPU clock
  */
  //теперь разрешим от него прерывания
  Timer2IntON
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	80 6c       	ori	r24, 0xC0	; 192
  9c:	89 bf       	out	0x39, r24	; 57
  9e:	08 95       	ret

000000a0 <ADCSetup>:
  // LED_PORT|= 1<<LED4; //set
  // LED_PORT&= ~(1<<LED1);//clear
  // LED_PORT = LED_PORT ^ (1<<LED1); //switch


  ADMUX |= (0 << REFS1 | 0 << REFS0 | 1 << ADLAR | 0 << MUX3 | 0 << MUX2 | 0 << MUX1 | 0 << MUX0); //ADC0 chanel (see MUX)
  a0:	3d 9a       	sbi	0x07, 5	; 7
  MUX2
  MUX1
  MUX0
  */

  ADCSRA |= (1 << ADEN | 1 << ADFR | 1 << ADIE | 1 << ADPS2 | 1 << ADPS1 | 0 << ADPS0);
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	8e 6a       	ori	r24, 0xAE	; 174
  a6:	86 b9       	out	0x06, r24	; 6
  a8:	08 95       	ret

000000aa <IntExtSetup>:
void IntExtSetup(void)
{
  //сбрасываем все биты ISCxx
  //MCUCR &= ~( (1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00) )
  //настраиваем на срабатывание INT0 по переднему фронту
  MCUCR |= (1 << ISC01) | (1 << ISC00); // по поднимающемуся фронту
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	85 bf       	out	0x35, r24	; 53
  GICR |= (1 << INT0);
  b0:	8b b7       	in	r24, 0x3b	; 59
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8b bf       	out	0x3b, r24	; 59
  b6:	08 95       	ret

000000b8 <LoadFuelTime>:
}

void LoadFuelTime(void)
{
  //    Coffs[6]; //0 - open time, 1 - close time, 2 - min drocel position, 3 - max drocel position, 4-drebezg
  TimeArray[def_ArrSize] = TimeArray[DrocelPosition] + CorrectionArray[DrocelPosition]; //TODO: загрузить значение из таблички "оставшиеся времея потока" в зависимости от того что у нас с АЦП(не забыть поправки начала-конца) + коэффициенты (открытие-закрытие)
  b8:	80 91 5c 01 	lds	r24, 0x015C
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	e0 5a       	subi	r30, 0xA0	; 160
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	dc 01       	movw	r26, r24
  c6:	a6 52       	subi	r26, 0x26	; 38
  c8:	bf 4f       	sbci	r27, 0xFF	; 255
  ca:	20 81       	ld	r18, Z
  cc:	8c 91       	ld	r24, X
  ce:	82 0f       	add	r24, r18
  d0:	80 93 52 01 	sts	0x0152, r24
  d4:	08 95       	ret

000000d6 <SoftBugON>:
}



void SoftBugON(void) {
  SetLed1//set bits
  d6:	c5 9a       	sbi	0x18, 5	; 24
  d8:	08 95       	ret

000000da <__vector_1>:




ISR( INT0_vect )
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31

  //тахометр
  OldTimer = CurrentTimer;
  fc:	80 91 d8 00 	lds	r24, 0x00D8
 100:	90 91 d9 00 	lds	r25, 0x00D9
 104:	90 93 5b 01 	sts	0x015B, r25
 108:	80 93 5a 01 	sts	0x015A, r24
  CurrentTimer = 0;
 10c:	10 92 d9 00 	sts	0x00D9, r1
 110:	10 92 d8 00 	sts	0x00D8, r1
  //конец тахометр

  if (Coffs[4] == 0) {//drebezg protection
 114:	80 91 56 01 	lds	r24, 0x0156
 118:	81 11       	cpse	r24, r1
 11a:	0a c0       	rjmp	.+20     	; 0x130 <__vector_1+0x56>
    Coffs[4] = 1;//set drebezg protection flag
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 56 01 	sts	0x0156, r24

    if (TimeArray[def_ArrSize] == 0) //TODO: проверить пустое ли у нас оставшееся время.
 122:	80 91 52 01 	lds	r24, 0x0152
 126:	81 11       	cpse	r24, r1
 128:	02 c0       	rjmp	.+4      	; 0x12e <__vector_1+0x54>
    {
      LoadFuelTime();
 12a:	c6 df       	rcall	.-116    	; 0xb8 <LoadFuelTime>
 12c:	01 c0       	rjmp	.+2      	; 0x130 <__vector_1+0x56>
    } else
    {
      Low_FuelFlow_Exeption();
      LoadFuelTime();
 12e:	c4 df       	rcall	.-120    	; 0xb8 <LoadFuelTime>

    //посчитать через сколько начать брызгать
    //проверить корректность "брызга"
    //запустить таймер 1 на "брызг" (комперА и комперБ)
    */
  }
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_4>:


  ISR( TIMER2_OVF_vect )
  {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
    SoftBugON();
 174:	b0 df       	rcall	.-160    	; 0xd6 <SoftBugON>
    //готово TODO: обработать эксепшен сюды я попасть не должен!
  }
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_3>:

  ISR(TIMER2_COMP_vect)
  {
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
    if (Coffs[4] == 1)
 1a8:	80 91 56 01 	lds	r24, 0x0156
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	11 f4       	brne	.+4      	; 0x1b4 <__vector_3+0x1c>
    {
      Coffs[4] = 0;
 1b0:	10 92 56 01 	sts	0x0156, r1
    }

    if (CurrentTimer < MinOperationRPM) //TODO: инкремент переменной тахометра
 1b4:	80 91 d8 00 	lds	r24, 0x00D8
 1b8:	90 91 d9 00 	lds	r25, 0x00D9
 1bc:	80 32       	cpi	r24, 0x20	; 32
 1be:	2e e4       	ldi	r18, 0x4E	; 78
 1c0:	92 07       	cpc	r25, r18
 1c2:	28 f4       	brcc	.+10     	; 0x1ce <__vector_3+0x36>
    {
      CurrentTimer++;
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 d9 00 	sts	0x00D9, r25
 1ca:	80 93 d8 00 	sts	0x00D8, r24
    }

    //TODO: декримент значения "оставшиеся времея потока"
    //тут мы должны вертеть "время впрыска"
    //обрабатывать нужно в основном цикле. ?
  }
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_14>:

  ISR(ADC_vect)
  {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
    if (ADCH < def_ArrSize) {
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	88 37       	cpi	r24, 0x78	; 120
 1ee:	18 f4       	brcc	.+6      	; 0x1f6 <__vector_14+0x18>
      DrocelPosition = ADCH;
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	80 93 5c 01 	sts	0x015C, r24
    } else
    {
      //TODO:Exeption - too big drocel travel
    }
  }
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <main>:



  int main(void)
  {
 202:	e0 e6       	ldi	r30, 0x60	; 96
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	88 ed       	ldi	r24, 0xD8	; 216
 208:	90 e0       	ldi	r25, 0x00	; 0

    unsigned char LocalCounter = 0;
    for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
    {
      CorrectionArray[LocalCounter] = 101; // clear correctiona rray
 20a:	25 e6       	ldi	r18, 0x65	; 101
 20c:	21 93       	st	Z+, r18

  int main(void)
  {

    unsigned char LocalCounter = 0;
    for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
 20e:	e8 17       	cp	r30, r24
 210:	f9 07       	cpc	r31, r25
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0xa>
    {
      CorrectionArray[LocalCounter] = 101; // clear correctiona rray
    }


    eeprom_to_mem();//load data arrays into memory
 214:	24 df       	rcall	.-440    	; 0x5e <eeprom_to_mem>
    Timer2Setup(); //setup timer2 //считает отрезки по 25 микросекунд
 216:	3b df       	rcall	.-394    	; 0x8e <Timer2Setup>
    ADCSetup();
 218:	43 df       	rcall	.-378    	; 0xa0 <ADCSetup>
    IntExtSetup();
 21a:	47 df       	rcall	.-370    	; 0xaa <IntExtSetup>
 21c:	ff cf       	rjmp	.-2      	; 0x21c <main+0x1a>

0000021e <__eerd_byte_m8>:
 21e:	e1 99       	sbic	0x1c, 1	; 28
 220:	fe cf       	rjmp	.-4      	; 0x21e <__eerd_byte_m8>
 222:	9f bb       	out	0x1f, r25	; 31
 224:	8e bb       	out	0x1e, r24	; 30
 226:	e0 9a       	sbi	0x1c, 0	; 28
 228:	99 27       	eor	r25, r25
 22a:	8d b3       	in	r24, 0x1d	; 29
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
