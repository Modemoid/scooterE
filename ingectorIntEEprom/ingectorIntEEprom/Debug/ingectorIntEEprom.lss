
ingectorIntEEprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000c0e  00000ca2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  00800144  00800144  00000ce6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b3  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000223  00000000  00000000  000013a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ef  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bb  00000000  00000000  00001e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_1>
   8:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_19>
  50:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_20>
  54:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0b 02 	call	0x416	; 0x416 <main>
  9e:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART0_Init>:
#define MYUBRR F_CPU/16/BAUD-1

void USART0_Init(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24

	/* Set frame format: 8-1-n */
   UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  ae:	e2 ec       	ldi	r30, 0xC2	; 194
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	80 83       	st	Z, r24
   //Enable transmitter only
   //UCSR0B |= (1<<TXEN0)|(1<<TXCIE0)|(1<<UDRIE0);
   UCSR0B |= (1<<TXEN0);
  b8:	e1 ec       	ldi	r30, 0xC1	; 193
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <eeprom_to_mem>:
#endif



void eeprom_to_mem(void)
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	08 ec       	ldi	r16, 0xC8	; 200
  ce:	11 e0       	ldi	r17, 0x01	; 1
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  {
    //eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
    TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 12 05 	call	0xa24	; 0xa24 <__eerd_byte_m328p>
  da:	f8 01       	movw	r30, r16
  dc:	81 93       	st	Z+, r24
  de:	8f 01       	movw	r16, r30


void eeprom_to_mem(void)
{
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  e0:	21 96       	adiw	r28, 0x01	; 1
  e2:	c8 37       	cpi	r28, 0x78	; 120
  e4:	d1 05       	cpc	r29, r1
  e6:	b1 f7       	brne	.-20     	; 0xd4 <eeprom_to_mem+0x10>
  {
    //eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
    TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  }
  TimeArray[def_ArrSize] = 0;
  e8:	10 92 40 02 	sts	0x0240, r1
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <mem_to_eeprom>:
void mem_to_eeprom(void)
{
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	1a e0       	ldi	r17, 0x0A	; 10
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
  {

    eeprom_write_byte ((uint8_t*)LocalCounter, LocalCounter * 2 + 10 );
 102:	61 2f       	mov	r22, r17
 104:	ce 01       	movw	r24, r28
 106:	0e 94 1a 05 	call	0xa34	; 0xa34 <__eewr_byte_m328p>
  TimeArray[def_ArrSize] = 0;
}
void mem_to_eeprom(void)
{
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
 10a:	21 96       	adiw	r28, 0x01	; 1
 10c:	1e 5f       	subi	r17, 0xFE	; 254
 10e:	1a 3f       	cpi	r17, 0xFA	; 250
 110:	c1 f7       	brne	.-16     	; 0x102 <mem_to_eeprom+0xc>
    eeprom_write_byte ((uint8_t*)LocalCounter, LocalCounter * 2 + 10 );

    //eeprom_write_byte ((uint8_t*)LocalCounter, TimeArray[LocalCounter]);
    //TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  }
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	08 95       	ret

0000011a <Timer2Setup>:
  // LED_PORT = LED_PORT ^ (1<<LED1); //switch

#ifdef Atmega8
  OCR2 = 199; //нужно 200 тиков, счет с 0
#else
  OCR2A = 199;
 11a:	87 ec       	ldi	r24, 0xC7	; 199
 11c:	80 93 b3 00 	sts	0x00B3, r24
  //CS20=1 //CPU clock
  */
  //теперь разрешим от него прерывания
#else

  TCCR2A = 0;
 120:	e0 eb       	ldi	r30, 0xB0	; 176
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	10 82       	st	Z, r1
  TCCR2A |= (1 << COM2A1 | 0 << COM2A1 | 1 << WGM21 | 0 << WGM20 );
 126:	80 81       	ld	r24, Z
 128:	82 68       	ori	r24, 0x82	; 130
 12a:	80 83       	st	Z, r24
  TCCR2B = 0;
 12c:	e1 eb       	ldi	r30, 0xB1	; 177
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	10 82       	st	Z, r1
  TCCR2B |= ( 0 << CS22 | 0 << CS21 | 1 << CS20);
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 83       	st	Z, r24
#endif
  Timer2IntON
 138:	e0 e7       	ldi	r30, 0x70	; 112
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <ADCSetup>:
  // LED_PORT|= 1<<LED4; //set
  // LED_PORT&= ~(1<<LED1);//clear
  // LED_PORT = LED_PORT ^ (1<<LED1); //switch


  ADMUX |= (0 << REFS1 | 1 << REFS0 | 1 << ADLAR | 0 << MUX3 | 0 << MUX2 | 0 << MUX1 | 0 << MUX0); //ADC0 chanel (see MUX)
 144:	ec e7       	ldi	r30, 0x7C	; 124
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 66       	ori	r24, 0x60	; 96
 14c:	80 83       	st	Z, r24
  ADPS2 1\
  ADPS1 1 | 125 kHz@8Mhz
  ADPS0 0/
  */
#else
  ADCSRA |= (1 << ADEN | 1 << ADSC | 1 << ADATE | 1 << ADIE | 1 << ADPS2 | 1 << ADPS1 | 0 << ADPS0);
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8e 6e       	ori	r24, 0xEE	; 238
 156:	80 83       	st	Z, r24
  //ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
  ADCSRB |= (0 << ACME | 0 << ADTS2 | 1 << ADTS1 | 0 << ADTS0);
 158:	eb e7       	ldi	r30, 0x7B	; 123
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <IntExtSetup>:
#ifdef Atmega8
  MCUCR |= (1 << ISC01) | (1 << ISC00); // по поднимающемуся фронту
  GICR |= (1 << INT0);
#else

  EICRA |= (1 << ISC11 | 1 << ISC10 | 1 << ISC01 | 1 << ISC00);
 164:	e9 e6       	ldi	r30, 0x69	; 105
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	80 83       	st	Z, r24
  EIMSK |= (1 << INT0 | 1 << INT1);
 16e:	8d b3       	in	r24, 0x1d	; 29
 170:	83 60       	ori	r24, 0x03	; 3
 172:	8d bb       	out	0x1d, r24	; 29
 174:	08 95       	ret

00000176 <PortSetup>:

}
void PortSetup(void)
{
  //настройка портов для кнопок
  DDRC = 0b00000000;  //kb port
 176:	17 b8       	out	0x07, r1	; 7
  PORTC = 0b00000000; //kb port
 178:	18 b8       	out	0x08, r1	; 8

  //настройка портов
  //DDRB = 0b11100110;  //kb port
  //PORTB = 0b00000000; //kb port

  DDRD = 0b00000011; //rx tx as led
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0b00000000;
 17e:	1b b8       	out	0x0b, r1	; 11
  //PINx регистр чтения
  //PORTx 1=pullup(in)
  //DDRx 0=in 1=out

  Out_DDR |= (1 << Out1 | 1 << Out2 | 1 << Out3);
 180:	84 b1       	in	r24, 0x04	; 4
 182:	8e 60       	ori	r24, 0x0E	; 14
 184:	84 b9       	out	0x04, r24	; 4

  //#ifdef DEBUG_LEDS
  LED_DDR |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4); //Led port
 186:	84 b1       	in	r24, 0x04	; 4
 188:	80 6f       	ori	r24, 0xF0	; 240
 18a:	84 b9       	out	0x04, r24	; 4
  LED_PORT &= ~(1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4); //Led port
 18c:	2d 98       	cbi	0x05, 5	; 5
 18e:	08 95       	ret

00000190 <LoadFuelTime>:
  //#endif
}
void LoadFuelTime(void)
{
  //    Coffs[6]; //0 - open time (use as "+ingector open time -ingector close time", 1 - NU, 2 - min drocel position, 3 - max drocel position, 4-drebezg flag
  RemainingFlowTime = Coffs[6] + TimeArray[DrocelPosition] + CorrectionArray[DrocelPosition] + ADCCorrection; //TODO: загрузить значение из таблички "оставшиеся времея потока" в зависимости от того что у нас с ј?ѕ(не забыть поправки начала-конца) + коэффициенты (открытие-закрытие)
 190:	80 91 46 02 	lds	r24, 0x0246
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	40 91 27 01 	lds	r20, 0x0127
 19a:	fc 01       	movw	r30, r24
 19c:	e8 53       	subi	r30, 0x38	; 56
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	20 81       	ld	r18, Z
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	24 0f       	add	r18, r20
 1a6:	31 1d       	adc	r19, r1
 1a8:	fc 01       	movw	r30, r24
 1aa:	e2 5b       	subi	r30, 0xB2	; 178
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	80 81       	ld	r24, Z
 1b0:	a9 01       	movw	r20, r18
 1b2:	48 0f       	add	r20, r24
 1b4:	51 1d       	adc	r21, r1
 1b6:	87 fd       	sbrc	r24, 7
 1b8:	5a 95       	dec	r21
 1ba:	ca 01       	movw	r24, r20
 1bc:	20 91 46 01 	lds	r18, 0x0146
 1c0:	82 0f       	add	r24, r18
 1c2:	91 1d       	adc	r25, r1
 1c4:	90 93 4d 01 	sts	0x014D, r25
 1c8:	80 93 4c 01 	sts	0x014C, r24
 1cc:	08 95       	ret

000001ce <__vector_2>:
char charmap(char x, char in_min, char in_max, char out_min, char out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
ISR( INT1_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
}
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_1>:
ISR( INT0_vect )
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
  //SwitchTX
  //тахометр
  OldTimer = CurrentTimer;
 204:	80 91 c6 01 	lds	r24, 0x01C6
 208:	90 91 c7 01 	lds	r25, 0x01C7
 20c:	90 93 45 02 	sts	0x0245, r25
 210:	80 93 44 02 	sts	0x0244, r24
  CurrentTimer = 0;
 214:	10 92 c7 01 	sts	0x01C7, r1
 218:	10 92 c6 01 	sts	0x01C6, r1
  //конец тахометр

  if (Coffs[4] == 0) {//drebezg protection
 21c:	80 91 25 01 	lds	r24, 0x0125
 220:	81 11       	cpse	r24, r1
 222:	0e c0       	rjmp	.+28     	; 0x240 <__vector_1+0x5e>
    Coffs[4] = 1;//set drebezg protection flag
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 25 01 	sts	0x0125, r24

    if (RemainingFlowTime == 0) //TODO: проверить пустое ли у нас оставшееся время.
 22a:	80 91 4c 01 	lds	r24, 0x014C
 22e:	90 91 4d 01 	lds	r25, 0x014D
 232:	89 2b       	or	r24, r25
 234:	19 f4       	brne	.+6      	; 0x23c <__vector_1+0x5a>
    {
      LoadFuelTime();
 236:	0e 94 c8 00 	call	0x190	; 0x190 <LoadFuelTime>
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__vector_1+0x5e>
	  ClearTX
	  #endif
    } else
    {
      Low_FuelFlow_Exeption();
      LoadFuelTime();
 23c:	0e 94 c8 00 	call	0x190	; 0x190 <LoadFuelTime>
  /*
  //если стоит мало оборотов дернуть процедуру "стартовая порция", сбросить "мало оборотов"
  //посчитать через сколько начать брызгать
  //запустить таймер 1 на "брызг" (комперј и комперЅ)
  */
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_9>:
ISR( TIMER2_OVF_vect )
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
  asm ("nop"); //прерывание вызывается вслед за timer_comp - в этом режиме работы таймера бессмысленно
 26c:	00 00       	nop
}
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_20>:

#ifdef UART_TX
ISR(USART_TX_vect)
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
	
}
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_19>:
ISR(USART_UDRE_vect)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	8f 93       	push	r24
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	if (Uart_Bufer_index < Uart_pointer)
 29c:	e0 91 44 01 	lds	r30, 0x0144
 2a0:	80 91 00 01 	lds	r24, 0x0100
 2a4:	8e 17       	cp	r24, r30
 2a6:	50 f4       	brcc	.+20     	; 0x2bc <__vector_19+0x30>
		{
		//Запретить перерывание
			Uart_Bufer_index = 0;
 2a8:	10 92 00 01 	sts	0x0100, r1
			Uart_pointer = 0;
 2ac:	10 92 44 01 	sts	0x0144, r1
		   UCSR0B &= ~(1<<UDRIE0);
 2b0:	e1 ec       	ldi	r30, 0xC1	; 193
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	80 83       	st	Z, r24
 2ba:	0b c0       	rjmp	.+22     	; 0x2d2 <__vector_19+0x46>
		}
	else 
		{
		UDR0 = Bufer[Uart_pointer];
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ef 5f       	subi	r30, 0xFF	; 255
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	80 81       	ld	r24, Z
 2c4:	80 93 c6 00 	sts	0x00C6, r24
		Uart_pointer++;
 2c8:	80 91 44 01 	lds	r24, 0x0144
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 44 01 	sts	0x0144, r24
		}
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_7>:
#ifdef Atmega8
ISR( TIMER2_COMP_vect )
#else
ISR( TIMER2_COMPA_vect)
#endif
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
  //SwitchRX
  //SwitchOut1
  //Coffs[5]++;
  if (Coffs[4] == 1)
 2f2:	80 91 25 01 	lds	r24, 0x0125
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	11 f4       	brne	.+4      	; 0x2fe <__vector_7+0x1c>
  {
    Coffs[4] = 0;
 2fa:	10 92 25 01 	sts	0x0125, r1
  }

  if (CurrentTimer < MinOperationRPM) //TODO: инкремент переменной тахометра
 2fe:	80 91 c6 01 	lds	r24, 0x01C6
 302:	90 91 c7 01 	lds	r25, 0x01C7
 306:	80 32       	cpi	r24, 0x20	; 32
 308:	2e e4       	ldi	r18, 0x4E	; 78
 30a:	92 07       	cpc	r25, r18
 30c:	28 f4       	brcc	.+10     	; 0x318 <__vector_7+0x36>
  {
    CurrentTimer++;
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 c7 01 	sts	0x01C7, r25
 314:	80 93 c6 01 	sts	0x01C6, r24
  } else
  {
    //todo: exeption низкие обороты работы двигателя
  }
  if (RemainingFlowTime)
 318:	80 91 4c 01 	lds	r24, 0x014C
 31c:	90 91 4d 01 	lds	r25, 0x014D
 320:	00 97       	sbiw	r24, 0x00	; 0
 322:	29 f0       	breq	.+10     	; 0x32e <__vector_7+0x4c>
  {
    RemainingFlowTime--; //уменьшаем оставшееся время потока
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	90 93 4d 01 	sts	0x014D, r25
 32a:	80 93 4c 01 	sts	0x014C, r24
  }
}
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_21>:
//#define USRTTEST
#ifndef USRTTEST
ISR(ADC_vect)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31

  switch (AdcCH)
 360:	80 91 47 01 	lds	r24, 0x0147
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	59 f1       	breq	.+86     	; 0x3be <__vector_21+0x80>
 368:	18 f0       	brcs	.+6      	; 0x370 <__vector_21+0x32>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	c1 f1       	breq	.+112    	; 0x3de <__vector_21+0xa0>
 36e:	42 c0       	rjmp	.+132    	; 0x3f4 <__vector_21+0xb6>
  {
    case 0:
      {
        RawADC0 =  ADCH;
 370:	80 91 79 00 	lds	r24, 0x0079
 374:	80 93 48 01 	sts	0x0148, r24
        ADMUX |= 1 << MUX1; //set (mux0 =0 mun1=1)
 378:	ec e7       	ldi	r30, 0x7C	; 124
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	80 83       	st	Z, r24
        AdcCH = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 47 01 	sts	0x0147, r24

        DrocelPosition = charmap(RawADC0, 1, 255, Coffs[2], Coffs[3]);
 388:	e0 91 23 01 	lds	r30, 0x0123
  asm ("nop");
  //SetLed1//set bits
}
char charmap(char x, char in_min, char in_max, char out_min, char out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 38c:	40 91 48 01 	lds	r20, 0x0148
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	41 50       	subi	r20, 0x01	; 1
 394:	51 09       	sbc	r21, r1
 396:	20 91 24 01 	lds	r18, 0x0124
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	2e 1b       	sub	r18, r30
 39e:	31 09       	sbc	r19, r1
 3a0:	42 9f       	mul	r20, r18
 3a2:	c0 01       	movw	r24, r0
 3a4:	43 9f       	mul	r20, r19
 3a6:	90 0d       	add	r25, r0
 3a8:	52 9f       	mul	r21, r18
 3aa:	90 0d       	add	r25, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	6e ef       	ldi	r22, 0xFE	; 254
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	0e 94 b5 02 	call	0x56a	; 0x56a <__divmodhi4>
 3b6:	e6 0f       	add	r30, r22
      {
        RawADC0 =  ADCH;
        ADMUX |= 1 << MUX1; //set (mux0 =0 mun1=1)
        AdcCH = 1;

        DrocelPosition = charmap(RawADC0, 1, 255, Coffs[2], Coffs[3]);
 3b8:	e0 93 46 02 	sts	0x0246, r30
        break;
 3bc:	1b c0       	rjmp	.+54     	; 0x3f4 <__vector_21+0xb6>
      }
    case 1:
      {
        RawADC2 =  ADCH;
 3be:	80 91 79 00 	lds	r24, 0x0079
 3c2:	80 93 4a 01 	sts	0x014A, r24
        ADMUX |= 1 << MUX0; //set
 3c6:	ec e7       	ldi	r30, 0x7C	; 124
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	80 83       	st	Z, r24
        ADMUX &= ~(1 << MUX1); //clear (mux0=1 mun1=0)
 3d0:	80 81       	ld	r24, Z
 3d2:	8d 7f       	andi	r24, 0xFD	; 253
 3d4:	80 83       	st	Z, r24
        AdcCH = 2;
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	80 93 47 01 	sts	0x0147, r24
        break;
 3dc:	0b c0       	rjmp	.+22     	; 0x3f4 <__vector_21+0xb6>
      }
    case 2:
      {
        RawADC1 =  ADCH;
 3de:	80 91 79 00 	lds	r24, 0x0079
 3e2:	80 93 49 01 	sts	0x0149, r24
        ADMUX &= ~(1 << MUX0); //clear(mux0=0 mun1=0)
 3e6:	ec e7       	ldi	r30, 0x7C	; 124
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	8e 7f       	andi	r24, 0xFE	; 254
 3ee:	80 83       	st	Z, r24
        AdcCH = 0;
 3f0:	10 92 47 01 	sts	0x0147, r1
        break;
      }
    default: ;
  }

}
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <main>:
#endif
int main(void)
{
  if (eeprom_read_byte((uint8_t*)10) != 30);
  {
    mem_to_eeprom();
 416:	0e 94 7b 00 	call	0xf6	; 0xf6 <mem_to_eeprom>
 41a:	ee e4       	ldi	r30, 0x4E	; 78
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	86 ec       	ldi	r24, 0xC6	; 198
 420:	91 e0       	ldi	r25, 0x01	; 1
  }
  unsigned char LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  {
    CorrectionArray[LocalCounter] = 0; // clear correction array
 422:	11 92       	st	Z+, r1
  if (eeprom_read_byte((uint8_t*)10) != 30);
  {
    mem_to_eeprom();
  }
  unsigned char LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
 424:	e8 17       	cp	r30, r24
 426:	f9 07       	cpc	r31, r25
 428:	e1 f7       	brne	.-8      	; 0x422 <main+0xc>
  {
    CorrectionArray[LocalCounter] = 0; // clear correction array
  }

  eeprom_to_mem();//load data arrays into memory
 42a:	0e 94 62 00 	call	0xc4	; 0xc4 <eeprom_to_mem>
  Timer2Setup(); //setup timer2 //считает отрезки по 25 микросекунд
 42e:	0e 94 8d 00 	call	0x11a	; 0x11a <Timer2Setup>
  #ifndef USRTTEST
  ADCSetup();
 432:	0e 94 a2 00 	call	0x144	; 0x144 <ADCSetup>
  #endif
  IntExtSetup();
 436:	0e 94 b2 00 	call	0x164	; 0x164 <IntExtSetup>
  PortSetup();
 43a:	0e 94 bb 00 	call	0x176	; 0x176 <PortSetup>
  USART0_Init(MYUBRR);
 43e:	83 e3       	ldi	r24, 0x33	; 51
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_Init>
  sei();
 446:	78 94       	sei
      _delay_ms(1);
    }

    ClearTX
    */
    currentRPM = (2400000 / OldTimer) / 8;
 448:	0f 2e       	mov	r0, r31
 44a:	f0 ee       	ldi	r31, 0xE0	; 224
 44c:	8f 2e       	mov	r8, r31
 44e:	f3 e9       	ldi	r31, 0x93	; 147
 450:	9f 2e       	mov	r9, r31
 452:	f4 e0       	ldi	r31, 0x04	; 4
 454:	af 2e       	mov	r10, r31
 456:	b1 2c       	mov	r11, r1
 458:	f0 2d       	mov	r31, r0
  asm ("nop");
  //SetLed1//set bits
}
char charmap(char x, char in_min, char in_max, char out_min, char out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 45a:	0f 2e       	mov	r0, r31
 45c:	fe e1       	ldi	r31, 0x1E	; 30
 45e:	6f 2e       	mov	r6, r31
 460:	f0 2d       	mov	r31, r0
 462:	cf ef       	ldi	r28, 0xFF	; 255
 464:	d0 e0       	ldi	r29, 0x00	; 0
 466:	77 24       	eor	r7, r7
 468:	7a 94       	dec	r7
    Adc1 = charmap(RawADC1, 0, 255, 0, 255); //AdcCh0
	
	if (Uart_Bufer_index == 0)
	{
		 tempcount++;
		Uart_Bufer_index = sprintf(Bufer, "0=%u 1=%u 2=%u RPM=%lu \n\r", RawADC0,RawADC1,RawADC2,currentRPM);
 46a:	0f 2e       	mov	r0, r31
 46c:	f9 e2       	ldi	r31, 0x29	; 41
 46e:	ef 2e       	mov	r14, r31
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	ff 2e       	mov	r15, r31
 474:	f0 2d       	mov	r31, r0
 476:	01 e0       	ldi	r16, 0x01	; 1
 478:	11 e0       	ldi	r17, 0x01	; 1
	
if (Uart_Bufer_index != 0)
{	
	if (Uart_pointer == 0)
	{
	UDR0 = Bufer[Uart_pointer];
 47a:	0f 2e       	mov	r0, r31
 47c:	f6 ec       	ldi	r31, 0xC6	; 198
 47e:	cf 2e       	mov	r12, r31
 480:	d1 2c       	mov	r13, r1
 482:	f0 2d       	mov	r31, r0
  while (1)
  {

    //TODO пересчет мс в обороты оборотов = (1000/мс)*60
    //currentRPM= 60000/CurrentTimer керрентТаймер должен быть в мс
    if (RemainingFlowTime)
 484:	80 91 4c 01 	lds	r24, 0x014C
 488:	90 91 4d 01 	lds	r25, 0x014D
 48c:	89 2b       	or	r24, r25
 48e:	21 f0       	breq	.+8      	; 0x498 <main+0x82>
    {
      SetOut1
 490:	29 9a       	sbi	0x05, 1	; 5
      SetLed4
 492:	2c 9a       	sbi	0x05, 4	; 5
      SetRX
 494:	58 9a       	sbi	0x0b, 0	; 11
 496:	03 c0       	rjmp	.+6      	; 0x49e <main+0x88>
    }
    else {
      ClearRX
 498:	58 98       	cbi	0x0b, 0	; 11
      ClearOut1
 49a:	29 98       	cbi	0x05, 1	; 5
      ClearLed4
 49c:	2c 98       	cbi	0x05, 4	; 5
      _delay_ms(1);
    }

    ClearTX
    */
    currentRPM = (2400000 / OldTimer) / 8;
 49e:	20 91 44 02 	lds	r18, 0x0244
 4a2:	30 91 45 02 	lds	r19, 0x0245
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	c5 01       	movw	r24, r10
 4ac:	b4 01       	movw	r22, r8
 4ae:	0e 94 c9 02 	call	0x592	; 0x592 <__divmodsi4>
 4b2:	f5 2f       	mov	r31, r21
 4b4:	20 93 40 02 	sts	0x0240, r18
 4b8:	30 93 41 02 	sts	0x0241, r19
 4bc:	40 93 42 02 	sts	0x0242, r20
 4c0:	50 93 43 02 	sts	0x0243, r21
  asm ("nop");
  //SetLed1//set bits
}
char charmap(char x, char in_min, char in_max, char out_min, char out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 4c4:	e0 91 4a 01 	lds	r30, 0x014A
 4c8:	6e 9e       	mul	r6, r30
 4ca:	c0 01       	movw	r24, r0
 4cc:	11 24       	eor	r1, r1
 4ce:	be 01       	movw	r22, r28
 4d0:	0e 94 b5 02 	call	0x56a	; 0x56a <__divmodhi4>
 4d4:	60 93 46 01 	sts	0x0146, r22
 4d8:	50 90 49 01 	lds	r5, 0x0149
 4dc:	75 9c       	mul	r7, r5
 4de:	c0 01       	movw	r24, r0
 4e0:	11 24       	eor	r1, r1
 4e2:	be 01       	movw	r22, r28
 4e4:	0e 94 b5 02 	call	0x56a	; 0x56a <__divmodhi4>
 4e8:	60 93 45 01 	sts	0x0145, r22
    */
    currentRPM = (2400000 / OldTimer) / 8;
    ADCCorrection = charmap(RawADC2, 0, 255, 0, 30); //AdcCh2
    Adc1 = charmap(RawADC1, 0, 255, 0, 255); //AdcCh0
	
	if (Uart_Bufer_index == 0)
 4ec:	80 91 00 01 	lds	r24, 0x0100
 4f0:	81 11       	cpse	r24, r1
 4f2:	28 c0       	rjmp	.+80     	; 0x544 <main+0x12e>
	{
		 tempcount++;
 4f4:	80 91 4b 01 	lds	r24, 0x014B
 4f8:	8f 5f       	subi	r24, 0xFF	; 255
 4fa:	80 93 4b 01 	sts	0x014B, r24
		Uart_Bufer_index = sprintf(Bufer, "0=%u 1=%u 2=%u RPM=%lu \n\r", RawADC0,RawADC1,RawADC2,currentRPM);
 4fe:	ff 93       	push	r31
 500:	4f 93       	push	r20
 502:	3f 93       	push	r19
 504:	2f 93       	push	r18
 506:	1f 92       	push	r1
 508:	ef 93       	push	r30
 50a:	1f 92       	push	r1
 50c:	5f 92       	push	r5
 50e:	80 91 48 01 	lds	r24, 0x0148
 512:	1f 92       	push	r1
 514:	8f 93       	push	r24
 516:	ff 92       	push	r15
 518:	ef 92       	push	r14
 51a:	1f 93       	push	r17
 51c:	0f 93       	push	r16
 51e:	0e 94 1e 03 	call	0x63c	; 0x63c <sprintf>
 522:	80 93 00 01 	sts	0x0100, r24
		//printf(RawADC1, Bufer, 10);
		Uart_pointer = 0;
 526:	10 92 44 01 	sts	0x0144, r1
		//Uart_Bufer_index = 3;
		
    }
	
if (Uart_Bufer_index != 0)
 52a:	2d b7       	in	r18, 0x3d	; 61
 52c:	3e b7       	in	r19, 0x3e	; 62
 52e:	22 5f       	subi	r18, 0xF2	; 242
 530:	3f 4f       	sbci	r19, 0xFF	; 255
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	3e bf       	out	0x3e, r19	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	2d bf       	out	0x3d, r18	; 61
 53c:	88 23       	and	r24, r24
 53e:	09 f4       	brne	.+2      	; 0x542 <main+0x12c>
 540:	a1 cf       	rjmp	.-190    	; 0x484 <main+0x6e>
 542:	04 c0       	rjmp	.+8      	; 0x54c <main+0x136>
{	
	if (Uart_pointer == 0)
 544:	80 91 44 01 	lds	r24, 0x0144
 548:	81 11       	cpse	r24, r1
 54a:	09 c0       	rjmp	.+18     	; 0x55e <main+0x148>
	{
	UDR0 = Bufer[Uart_pointer];
 54c:	f8 01       	movw	r30, r16
 54e:	80 81       	ld	r24, Z
 550:	f6 01       	movw	r30, r12
 552:	80 83       	st	Z, r24
	Uart_pointer++;
 554:	80 91 44 01 	lds	r24, 0x0144
 558:	8f 5f       	subi	r24, 0xFF	; 255
 55a:	80 93 44 01 	sts	0x0144, r24
	}
	UCSR0B |= (1<<UDRIE0);
 55e:	e1 ec       	ldi	r30, 0xC1	; 193
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	80 62       	ori	r24, 0x20	; 32
 566:	80 83       	st	Z, r24
 568:	8d cf       	rjmp	.-230    	; 0x484 <main+0x6e>

0000056a <__divmodhi4>:
 56a:	97 fb       	bst	r25, 7
 56c:	07 2e       	mov	r0, r23
 56e:	16 f4       	brtc	.+4      	; 0x574 <__divmodhi4+0xa>
 570:	00 94       	com	r0
 572:	07 d0       	rcall	.+14     	; 0x582 <__divmodhi4_neg1>
 574:	77 fd       	sbrc	r23, 7
 576:	09 d0       	rcall	.+18     	; 0x58a <__divmodhi4_neg2>
 578:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__udivmodhi4>
 57c:	07 fc       	sbrc	r0, 7
 57e:	05 d0       	rcall	.+10     	; 0x58a <__divmodhi4_neg2>
 580:	3e f4       	brtc	.+14     	; 0x590 <__divmodhi4_exit>

00000582 <__divmodhi4_neg1>:
 582:	90 95       	com	r25
 584:	81 95       	neg	r24
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	08 95       	ret

0000058a <__divmodhi4_neg2>:
 58a:	70 95       	com	r23
 58c:	61 95       	neg	r22
 58e:	7f 4f       	sbci	r23, 0xFF	; 255

00000590 <__divmodhi4_exit>:
 590:	08 95       	ret

00000592 <__divmodsi4>:
 592:	05 2e       	mov	r0, r21
 594:	97 fb       	bst	r25, 7
 596:	1e f4       	brtc	.+6      	; 0x59e <__divmodsi4+0xc>
 598:	00 94       	com	r0
 59a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__negsi2>
 59e:	57 fd       	sbrc	r21, 7
 5a0:	07 d0       	rcall	.+14     	; 0x5b0 <__divmodsi4_neg2>
 5a2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodsi4>
 5a6:	07 fc       	sbrc	r0, 7
 5a8:	03 d0       	rcall	.+6      	; 0x5b0 <__divmodsi4_neg2>
 5aa:	4e f4       	brtc	.+18     	; 0x5be <__divmodsi4_exit>
 5ac:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__negsi2>

000005b0 <__divmodsi4_neg2>:
 5b0:	50 95       	com	r21
 5b2:	40 95       	com	r20
 5b4:	30 95       	com	r19
 5b6:	21 95       	neg	r18
 5b8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ba:	4f 4f       	sbci	r20, 0xFF	; 255
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255

000005be <__divmodsi4_exit>:
 5be:	08 95       	ret

000005c0 <__negsi2>:
 5c0:	90 95       	com	r25
 5c2:	80 95       	com	r24
 5c4:	70 95       	com	r23
 5c6:	61 95       	neg	r22
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	08 95       	ret

000005d0 <__udivmodhi4>:
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	51 e1       	ldi	r21, 0x11	; 17
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <__udivmodhi4_ep>

000005d8 <__udivmodhi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	a6 17       	cp	r26, r22
 5de:	b7 07       	cpc	r27, r23
 5e0:	10 f0       	brcs	.+4      	; 0x5e6 <__udivmodhi4_ep>
 5e2:	a6 1b       	sub	r26, r22
 5e4:	b7 0b       	sbc	r27, r23

000005e6 <__udivmodhi4_ep>:
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	5a 95       	dec	r21
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__udivmodhi4_loop>
 5ee:	80 95       	com	r24
 5f0:	90 95       	com	r25
 5f2:	bc 01       	movw	r22, r24
 5f4:	cd 01       	movw	r24, r26
 5f6:	08 95       	ret

000005f8 <__udivmodsi4>:
 5f8:	a1 e2       	ldi	r26, 0x21	; 33
 5fa:	1a 2e       	mov	r1, r26
 5fc:	aa 1b       	sub	r26, r26
 5fe:	bb 1b       	sub	r27, r27
 600:	fd 01       	movw	r30, r26
 602:	0d c0       	rjmp	.+26     	; 0x61e <__udivmodsi4_ep>

00000604 <__udivmodsi4_loop>:
 604:	aa 1f       	adc	r26, r26
 606:	bb 1f       	adc	r27, r27
 608:	ee 1f       	adc	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	a2 17       	cp	r26, r18
 60e:	b3 07       	cpc	r27, r19
 610:	e4 07       	cpc	r30, r20
 612:	f5 07       	cpc	r31, r21
 614:	20 f0       	brcs	.+8      	; 0x61e <__udivmodsi4_ep>
 616:	a2 1b       	sub	r26, r18
 618:	b3 0b       	sbc	r27, r19
 61a:	e4 0b       	sbc	r30, r20
 61c:	f5 0b       	sbc	r31, r21

0000061e <__udivmodsi4_ep>:
 61e:	66 1f       	adc	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	88 1f       	adc	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	1a 94       	dec	r1
 628:	69 f7       	brne	.-38     	; 0x604 <__udivmodsi4_loop>
 62a:	60 95       	com	r22
 62c:	70 95       	com	r23
 62e:	80 95       	com	r24
 630:	90 95       	com	r25
 632:	9b 01       	movw	r18, r22
 634:	ac 01       	movw	r20, r24
 636:	bd 01       	movw	r22, r26
 638:	cf 01       	movw	r24, r30
 63a:	08 95       	ret

0000063c <sprintf>:
 63c:	ae e0       	ldi	r26, 0x0E	; 14
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	e4 e2       	ldi	r30, 0x24	; 36
 642:	f3 e0       	ldi	r31, 0x03	; 3
 644:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__prologue_saves__+0x1c>
 648:	0d 89       	ldd	r16, Y+21	; 0x15
 64a:	1e 89       	ldd	r17, Y+22	; 0x16
 64c:	86 e0       	ldi	r24, 0x06	; 6
 64e:	8c 83       	std	Y+4, r24	; 0x04
 650:	1a 83       	std	Y+2, r17	; 0x02
 652:	09 83       	std	Y+1, r16	; 0x01
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	9f e7       	ldi	r25, 0x7F	; 127
 658:	9e 83       	std	Y+6, r25	; 0x06
 65a:	8d 83       	std	Y+5, r24	; 0x05
 65c:	ae 01       	movw	r20, r28
 65e:	47 5e       	subi	r20, 0xE7	; 231
 660:	5f 4f       	sbci	r21, 0xFF	; 255
 662:	6f 89       	ldd	r22, Y+23	; 0x17
 664:	78 8d       	ldd	r23, Y+24	; 0x18
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	0e 94 40 03 	call	0x680	; 0x680 <vfprintf>
 66e:	ef 81       	ldd	r30, Y+7	; 0x07
 670:	f8 85       	ldd	r31, Y+8	; 0x08
 672:	e0 0f       	add	r30, r16
 674:	f1 1f       	adc	r31, r17
 676:	10 82       	st	Z, r1
 678:	2e 96       	adiw	r28, 0x0e	; 14
 67a:	e4 e0       	ldi	r30, 0x04	; 4
 67c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__epilogue_restores__+0x1c>

00000680 <vfprintf>:
 680:	ac e0       	ldi	r26, 0x0C	; 12
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	e6 e4       	ldi	r30, 0x46	; 70
 686:	f3 e0       	ldi	r31, 0x03	; 3
 688:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__prologue_saves__>
 68c:	7c 01       	movw	r14, r24
 68e:	6b 01       	movw	r12, r22
 690:	8a 01       	movw	r16, r20
 692:	fc 01       	movw	r30, r24
 694:	17 82       	std	Z+7, r1	; 0x07
 696:	16 82       	std	Z+6, r1	; 0x06
 698:	83 81       	ldd	r24, Z+3	; 0x03
 69a:	81 ff       	sbrs	r24, 1
 69c:	bd c1       	rjmp	.+890    	; 0xa18 <__stack+0x119>
 69e:	ce 01       	movw	r24, r28
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	4c 01       	movw	r8, r24
 6a4:	f7 01       	movw	r30, r14
 6a6:	93 81       	ldd	r25, Z+3	; 0x03
 6a8:	f6 01       	movw	r30, r12
 6aa:	93 fd       	sbrc	r25, 3
 6ac:	85 91       	lpm	r24, Z+
 6ae:	93 ff       	sbrs	r25, 3
 6b0:	81 91       	ld	r24, Z+
 6b2:	6f 01       	movw	r12, r30
 6b4:	88 23       	and	r24, r24
 6b6:	09 f4       	brne	.+2      	; 0x6ba <vfprintf+0x3a>
 6b8:	ab c1       	rjmp	.+854    	; 0xa10 <__stack+0x111>
 6ba:	85 32       	cpi	r24, 0x25	; 37
 6bc:	39 f4       	brne	.+14     	; 0x6cc <vfprintf+0x4c>
 6be:	93 fd       	sbrc	r25, 3
 6c0:	85 91       	lpm	r24, Z+
 6c2:	93 ff       	sbrs	r25, 3
 6c4:	81 91       	ld	r24, Z+
 6c6:	6f 01       	movw	r12, r30
 6c8:	85 32       	cpi	r24, 0x25	; 37
 6ca:	29 f4       	brne	.+10     	; 0x6d6 <vfprintf+0x56>
 6cc:	b7 01       	movw	r22, r14
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 6d4:	e7 cf       	rjmp	.-50     	; 0x6a4 <vfprintf+0x24>
 6d6:	51 2c       	mov	r5, r1
 6d8:	31 2c       	mov	r3, r1
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	20 32       	cpi	r18, 0x20	; 32
 6de:	a0 f4       	brcc	.+40     	; 0x708 <vfprintf+0x88>
 6e0:	8b 32       	cpi	r24, 0x2B	; 43
 6e2:	69 f0       	breq	.+26     	; 0x6fe <vfprintf+0x7e>
 6e4:	30 f4       	brcc	.+12     	; 0x6f2 <vfprintf+0x72>
 6e6:	80 32       	cpi	r24, 0x20	; 32
 6e8:	59 f0       	breq	.+22     	; 0x700 <vfprintf+0x80>
 6ea:	83 32       	cpi	r24, 0x23	; 35
 6ec:	69 f4       	brne	.+26     	; 0x708 <vfprintf+0x88>
 6ee:	20 61       	ori	r18, 0x10	; 16
 6f0:	2c c0       	rjmp	.+88     	; 0x74a <vfprintf+0xca>
 6f2:	8d 32       	cpi	r24, 0x2D	; 45
 6f4:	39 f0       	breq	.+14     	; 0x704 <vfprintf+0x84>
 6f6:	80 33       	cpi	r24, 0x30	; 48
 6f8:	39 f4       	brne	.+14     	; 0x708 <vfprintf+0x88>
 6fa:	21 60       	ori	r18, 0x01	; 1
 6fc:	26 c0       	rjmp	.+76     	; 0x74a <vfprintf+0xca>
 6fe:	22 60       	ori	r18, 0x02	; 2
 700:	24 60       	ori	r18, 0x04	; 4
 702:	23 c0       	rjmp	.+70     	; 0x74a <vfprintf+0xca>
 704:	28 60       	ori	r18, 0x08	; 8
 706:	21 c0       	rjmp	.+66     	; 0x74a <vfprintf+0xca>
 708:	27 fd       	sbrc	r18, 7
 70a:	27 c0       	rjmp	.+78     	; 0x75a <vfprintf+0xda>
 70c:	30 ed       	ldi	r19, 0xD0	; 208
 70e:	38 0f       	add	r19, r24
 710:	3a 30       	cpi	r19, 0x0A	; 10
 712:	78 f4       	brcc	.+30     	; 0x732 <vfprintf+0xb2>
 714:	26 ff       	sbrs	r18, 6
 716:	06 c0       	rjmp	.+12     	; 0x724 <vfprintf+0xa4>
 718:	fa e0       	ldi	r31, 0x0A	; 10
 71a:	5f 9e       	mul	r5, r31
 71c:	30 0d       	add	r19, r0
 71e:	11 24       	eor	r1, r1
 720:	53 2e       	mov	r5, r19
 722:	13 c0       	rjmp	.+38     	; 0x74a <vfprintf+0xca>
 724:	8a e0       	ldi	r24, 0x0A	; 10
 726:	38 9e       	mul	r3, r24
 728:	30 0d       	add	r19, r0
 72a:	11 24       	eor	r1, r1
 72c:	33 2e       	mov	r3, r19
 72e:	20 62       	ori	r18, 0x20	; 32
 730:	0c c0       	rjmp	.+24     	; 0x74a <vfprintf+0xca>
 732:	8e 32       	cpi	r24, 0x2E	; 46
 734:	21 f4       	brne	.+8      	; 0x73e <vfprintf+0xbe>
 736:	26 fd       	sbrc	r18, 6
 738:	6b c1       	rjmp	.+726    	; 0xa10 <__stack+0x111>
 73a:	20 64       	ori	r18, 0x40	; 64
 73c:	06 c0       	rjmp	.+12     	; 0x74a <vfprintf+0xca>
 73e:	8c 36       	cpi	r24, 0x6C	; 108
 740:	11 f4       	brne	.+4      	; 0x746 <vfprintf+0xc6>
 742:	20 68       	ori	r18, 0x80	; 128
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0xca>
 746:	88 36       	cpi	r24, 0x68	; 104
 748:	41 f4       	brne	.+16     	; 0x75a <vfprintf+0xda>
 74a:	f6 01       	movw	r30, r12
 74c:	93 fd       	sbrc	r25, 3
 74e:	85 91       	lpm	r24, Z+
 750:	93 ff       	sbrs	r25, 3
 752:	81 91       	ld	r24, Z+
 754:	6f 01       	movw	r12, r30
 756:	81 11       	cpse	r24, r1
 758:	c1 cf       	rjmp	.-126    	; 0x6dc <vfprintf+0x5c>
 75a:	98 2f       	mov	r25, r24
 75c:	9f 7d       	andi	r25, 0xDF	; 223
 75e:	95 54       	subi	r25, 0x45	; 69
 760:	93 30       	cpi	r25, 0x03	; 3
 762:	28 f4       	brcc	.+10     	; 0x76e <vfprintf+0xee>
 764:	0c 5f       	subi	r16, 0xFC	; 252
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	ff e3       	ldi	r31, 0x3F	; 63
 76a:	f9 83       	std	Y+1, r31	; 0x01
 76c:	0d c0       	rjmp	.+26     	; 0x788 <vfprintf+0x108>
 76e:	83 36       	cpi	r24, 0x63	; 99
 770:	31 f0       	breq	.+12     	; 0x77e <vfprintf+0xfe>
 772:	83 37       	cpi	r24, 0x73	; 115
 774:	71 f0       	breq	.+28     	; 0x792 <vfprintf+0x112>
 776:	83 35       	cpi	r24, 0x53	; 83
 778:	09 f0       	breq	.+2      	; 0x77c <vfprintf+0xfc>
 77a:	5b c0       	rjmp	.+182    	; 0x832 <vfprintf+0x1b2>
 77c:	22 c0       	rjmp	.+68     	; 0x7c2 <vfprintf+0x142>
 77e:	f8 01       	movw	r30, r16
 780:	80 81       	ld	r24, Z
 782:	89 83       	std	Y+1, r24	; 0x01
 784:	0e 5f       	subi	r16, 0xFE	; 254
 786:	1f 4f       	sbci	r17, 0xFF	; 255
 788:	44 24       	eor	r4, r4
 78a:	43 94       	inc	r4
 78c:	51 2c       	mov	r5, r1
 78e:	54 01       	movw	r10, r8
 790:	15 c0       	rjmp	.+42     	; 0x7bc <vfprintf+0x13c>
 792:	38 01       	movw	r6, r16
 794:	f2 e0       	ldi	r31, 0x02	; 2
 796:	6f 0e       	add	r6, r31
 798:	71 1c       	adc	r7, r1
 79a:	f8 01       	movw	r30, r16
 79c:	a0 80       	ld	r10, Z
 79e:	b1 80       	ldd	r11, Z+1	; 0x01
 7a0:	26 ff       	sbrs	r18, 6
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <vfprintf+0x12a>
 7a4:	65 2d       	mov	r22, r5
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <vfprintf+0x12e>
 7aa:	6f ef       	ldi	r22, 0xFF	; 255
 7ac:	7f ef       	ldi	r23, 0xFF	; 255
 7ae:	c5 01       	movw	r24, r10
 7b0:	2c 87       	std	Y+12, r18	; 0x0c
 7b2:	0e 94 33 05 	call	0xa66	; 0xa66 <strnlen>
 7b6:	2c 01       	movw	r4, r24
 7b8:	83 01       	movw	r16, r6
 7ba:	2c 85       	ldd	r18, Y+12	; 0x0c
 7bc:	2f 77       	andi	r18, 0x7F	; 127
 7be:	22 2e       	mov	r2, r18
 7c0:	17 c0       	rjmp	.+46     	; 0x7f0 <vfprintf+0x170>
 7c2:	38 01       	movw	r6, r16
 7c4:	f2 e0       	ldi	r31, 0x02	; 2
 7c6:	6f 0e       	add	r6, r31
 7c8:	71 1c       	adc	r7, r1
 7ca:	f8 01       	movw	r30, r16
 7cc:	a0 80       	ld	r10, Z
 7ce:	b1 80       	ldd	r11, Z+1	; 0x01
 7d0:	26 ff       	sbrs	r18, 6
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <vfprintf+0x15a>
 7d4:	65 2d       	mov	r22, r5
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <vfprintf+0x15e>
 7da:	6f ef       	ldi	r22, 0xFF	; 255
 7dc:	7f ef       	ldi	r23, 0xFF	; 255
 7de:	c5 01       	movw	r24, r10
 7e0:	2c 87       	std	Y+12, r18	; 0x0c
 7e2:	0e 94 28 05 	call	0xa50	; 0xa50 <strnlen_P>
 7e6:	2c 01       	movw	r4, r24
 7e8:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ea:	20 68       	ori	r18, 0x80	; 128
 7ec:	22 2e       	mov	r2, r18
 7ee:	83 01       	movw	r16, r6
 7f0:	23 fc       	sbrc	r2, 3
 7f2:	1b c0       	rjmp	.+54     	; 0x82a <vfprintf+0x1aa>
 7f4:	83 2d       	mov	r24, r3
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	48 16       	cp	r4, r24
 7fa:	59 06       	cpc	r5, r25
 7fc:	b0 f4       	brcc	.+44     	; 0x82a <vfprintf+0x1aa>
 7fe:	b7 01       	movw	r22, r14
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 808:	3a 94       	dec	r3
 80a:	f4 cf       	rjmp	.-24     	; 0x7f4 <vfprintf+0x174>
 80c:	f5 01       	movw	r30, r10
 80e:	27 fc       	sbrc	r2, 7
 810:	85 91       	lpm	r24, Z+
 812:	27 fe       	sbrs	r2, 7
 814:	81 91       	ld	r24, Z+
 816:	5f 01       	movw	r10, r30
 818:	b7 01       	movw	r22, r14
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 820:	31 10       	cpse	r3, r1
 822:	3a 94       	dec	r3
 824:	f1 e0       	ldi	r31, 0x01	; 1
 826:	4f 1a       	sub	r4, r31
 828:	51 08       	sbc	r5, r1
 82a:	41 14       	cp	r4, r1
 82c:	51 04       	cpc	r5, r1
 82e:	71 f7       	brne	.-36     	; 0x80c <vfprintf+0x18c>
 830:	e5 c0       	rjmp	.+458    	; 0x9fc <__stack+0xfd>
 832:	84 36       	cpi	r24, 0x64	; 100
 834:	11 f0       	breq	.+4      	; 0x83a <vfprintf+0x1ba>
 836:	89 36       	cpi	r24, 0x69	; 105
 838:	39 f5       	brne	.+78     	; 0x888 <vfprintf+0x208>
 83a:	f8 01       	movw	r30, r16
 83c:	27 ff       	sbrs	r18, 7
 83e:	07 c0       	rjmp	.+14     	; 0x84e <vfprintf+0x1ce>
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	82 81       	ldd	r24, Z+2	; 0x02
 846:	93 81       	ldd	r25, Z+3	; 0x03
 848:	0c 5f       	subi	r16, 0xFC	; 252
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	08 c0       	rjmp	.+16     	; 0x85e <vfprintf+0x1de>
 84e:	60 81       	ld	r22, Z
 850:	71 81       	ldd	r23, Z+1	; 0x01
 852:	88 27       	eor	r24, r24
 854:	77 fd       	sbrc	r23, 7
 856:	80 95       	com	r24
 858:	98 2f       	mov	r25, r24
 85a:	0e 5f       	subi	r16, 0xFE	; 254
 85c:	1f 4f       	sbci	r17, 0xFF	; 255
 85e:	2f 76       	andi	r18, 0x6F	; 111
 860:	b2 2e       	mov	r11, r18
 862:	97 ff       	sbrs	r25, 7
 864:	09 c0       	rjmp	.+18     	; 0x878 <vfprintf+0x1f8>
 866:	90 95       	com	r25
 868:	80 95       	com	r24
 86a:	70 95       	com	r23
 86c:	61 95       	neg	r22
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	20 68       	ori	r18, 0x80	; 128
 876:	b2 2e       	mov	r11, r18
 878:	2a e0       	ldi	r18, 0x0A	; 10
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	a4 01       	movw	r20, r8
 87e:	0e 94 70 05 	call	0xae0	; 0xae0 <__ultoa_invert>
 882:	a8 2e       	mov	r10, r24
 884:	a8 18       	sub	r10, r8
 886:	44 c0       	rjmp	.+136    	; 0x910 <__stack+0x11>
 888:	85 37       	cpi	r24, 0x75	; 117
 88a:	29 f4       	brne	.+10     	; 0x896 <vfprintf+0x216>
 88c:	2f 7e       	andi	r18, 0xEF	; 239
 88e:	b2 2e       	mov	r11, r18
 890:	2a e0       	ldi	r18, 0x0A	; 10
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	25 c0       	rjmp	.+74     	; 0x8e0 <vfprintf+0x260>
 896:	f2 2f       	mov	r31, r18
 898:	f9 7f       	andi	r31, 0xF9	; 249
 89a:	bf 2e       	mov	r11, r31
 89c:	8f 36       	cpi	r24, 0x6F	; 111
 89e:	c1 f0       	breq	.+48     	; 0x8d0 <vfprintf+0x250>
 8a0:	18 f4       	brcc	.+6      	; 0x8a8 <vfprintf+0x228>
 8a2:	88 35       	cpi	r24, 0x58	; 88
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <vfprintf+0x244>
 8a6:	b4 c0       	rjmp	.+360    	; 0xa10 <__stack+0x111>
 8a8:	80 37       	cpi	r24, 0x70	; 112
 8aa:	19 f0       	breq	.+6      	; 0x8b2 <vfprintf+0x232>
 8ac:	88 37       	cpi	r24, 0x78	; 120
 8ae:	21 f0       	breq	.+8      	; 0x8b8 <vfprintf+0x238>
 8b0:	af c0       	rjmp	.+350    	; 0xa10 <__stack+0x111>
 8b2:	2f 2f       	mov	r18, r31
 8b4:	20 61       	ori	r18, 0x10	; 16
 8b6:	b2 2e       	mov	r11, r18
 8b8:	b4 fe       	sbrs	r11, 4
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <vfprintf+0x256>
 8bc:	8b 2d       	mov	r24, r11
 8be:	84 60       	ori	r24, 0x04	; 4
 8c0:	b8 2e       	mov	r11, r24
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x256>
 8c4:	24 ff       	sbrs	r18, 4
 8c6:	0a c0       	rjmp	.+20     	; 0x8dc <vfprintf+0x25c>
 8c8:	9f 2f       	mov	r25, r31
 8ca:	96 60       	ori	r25, 0x06	; 6
 8cc:	b9 2e       	mov	r11, r25
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0x25c>
 8d0:	28 e0       	ldi	r18, 0x08	; 8
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <vfprintf+0x260>
 8d6:	20 e1       	ldi	r18, 0x10	; 16
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x260>
 8dc:	20 e1       	ldi	r18, 0x10	; 16
 8de:	32 e0       	ldi	r19, 0x02	; 2
 8e0:	f8 01       	movw	r30, r16
 8e2:	b7 fe       	sbrs	r11, 7
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <vfprintf+0x274>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	82 81       	ldd	r24, Z+2	; 0x02
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	0c 5f       	subi	r16, 0xFC	; 252
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <__stack+0x1>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 5f       	subi	r16, 0xFE	; 254
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	a4 01       	movw	r20, r8
 902:	0e 94 70 05 	call	0xae0	; 0xae0 <__ultoa_invert>
 906:	a8 2e       	mov	r10, r24
 908:	a8 18       	sub	r10, r8
 90a:	fb 2d       	mov	r31, r11
 90c:	ff 77       	andi	r31, 0x7F	; 127
 90e:	bf 2e       	mov	r11, r31
 910:	b6 fe       	sbrs	r11, 6
 912:	0b c0       	rjmp	.+22     	; 0x92a <__stack+0x2b>
 914:	2b 2d       	mov	r18, r11
 916:	2e 7f       	andi	r18, 0xFE	; 254
 918:	a5 14       	cp	r10, r5
 91a:	50 f4       	brcc	.+20     	; 0x930 <__stack+0x31>
 91c:	b4 fe       	sbrs	r11, 4
 91e:	0a c0       	rjmp	.+20     	; 0x934 <__stack+0x35>
 920:	b2 fc       	sbrc	r11, 2
 922:	08 c0       	rjmp	.+16     	; 0x934 <__stack+0x35>
 924:	2b 2d       	mov	r18, r11
 926:	2e 7e       	andi	r18, 0xEE	; 238
 928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0x35>
 92a:	7a 2c       	mov	r7, r10
 92c:	2b 2d       	mov	r18, r11
 92e:	03 c0       	rjmp	.+6      	; 0x936 <__stack+0x37>
 930:	7a 2c       	mov	r7, r10
 932:	01 c0       	rjmp	.+2      	; 0x936 <__stack+0x37>
 934:	75 2c       	mov	r7, r5
 936:	24 ff       	sbrs	r18, 4
 938:	0d c0       	rjmp	.+26     	; 0x954 <__stack+0x55>
 93a:	fe 01       	movw	r30, r28
 93c:	ea 0d       	add	r30, r10
 93e:	f1 1d       	adc	r31, r1
 940:	80 81       	ld	r24, Z
 942:	80 33       	cpi	r24, 0x30	; 48
 944:	11 f4       	brne	.+4      	; 0x94a <__stack+0x4b>
 946:	29 7e       	andi	r18, 0xE9	; 233
 948:	09 c0       	rjmp	.+18     	; 0x95c <__stack+0x5d>
 94a:	22 ff       	sbrs	r18, 2
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__stack+0x5b>
 94e:	73 94       	inc	r7
 950:	73 94       	inc	r7
 952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0x5d>
 954:	82 2f       	mov	r24, r18
 956:	86 78       	andi	r24, 0x86	; 134
 958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
 95a:	73 94       	inc	r7
 95c:	23 fd       	sbrc	r18, 3
 95e:	13 c0       	rjmp	.+38     	; 0x986 <__stack+0x87>
 960:	20 ff       	sbrs	r18, 0
 962:	06 c0       	rjmp	.+12     	; 0x970 <__stack+0x71>
 964:	5a 2c       	mov	r5, r10
 966:	73 14       	cp	r7, r3
 968:	18 f4       	brcc	.+6      	; 0x970 <__stack+0x71>
 96a:	53 0c       	add	r5, r3
 96c:	57 18       	sub	r5, r7
 96e:	73 2c       	mov	r7, r3
 970:	73 14       	cp	r7, r3
 972:	68 f4       	brcc	.+26     	; 0x98e <__stack+0x8f>
 974:	b7 01       	movw	r22, r14
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	2c 87       	std	Y+12, r18	; 0x0c
 97c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 980:	73 94       	inc	r7
 982:	2c 85       	ldd	r18, Y+12	; 0x0c
 984:	f5 cf       	rjmp	.-22     	; 0x970 <__stack+0x71>
 986:	73 14       	cp	r7, r3
 988:	10 f4       	brcc	.+4      	; 0x98e <__stack+0x8f>
 98a:	37 18       	sub	r3, r7
 98c:	01 c0       	rjmp	.+2      	; 0x990 <__stack+0x91>
 98e:	31 2c       	mov	r3, r1
 990:	24 ff       	sbrs	r18, 4
 992:	12 c0       	rjmp	.+36     	; 0x9b8 <__stack+0xb9>
 994:	b7 01       	movw	r22, r14
 996:	80 e3       	ldi	r24, 0x30	; 48
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	2c 87       	std	Y+12, r18	; 0x0c
 99c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 9a0:	2c 85       	ldd	r18, Y+12	; 0x0c
 9a2:	22 ff       	sbrs	r18, 2
 9a4:	17 c0       	rjmp	.+46     	; 0x9d4 <__stack+0xd5>
 9a6:	21 ff       	sbrs	r18, 1
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <__stack+0xb1>
 9aa:	88 e5       	ldi	r24, 0x58	; 88
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	88 e7       	ldi	r24, 0x78	; 120
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	b7 01       	movw	r22, r14
 9b6:	0c c0       	rjmp	.+24     	; 0x9d0 <__stack+0xd1>
 9b8:	82 2f       	mov	r24, r18
 9ba:	86 78       	andi	r24, 0x86	; 134
 9bc:	59 f0       	breq	.+22     	; 0x9d4 <__stack+0xd5>
 9be:	21 fd       	sbrc	r18, 1
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__stack+0xc7>
 9c2:	80 e2       	ldi	r24, 0x20	; 32
 9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <__stack+0xc9>
 9c6:	8b e2       	ldi	r24, 0x2B	; 43
 9c8:	27 fd       	sbrc	r18, 7
 9ca:	8d e2       	ldi	r24, 0x2D	; 45
 9cc:	b7 01       	movw	r22, r14
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 9d4:	a5 14       	cp	r10, r5
 9d6:	38 f4       	brcc	.+14     	; 0x9e6 <__stack+0xe7>
 9d8:	b7 01       	movw	r22, r14
 9da:	80 e3       	ldi	r24, 0x30	; 48
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 9e2:	5a 94       	dec	r5
 9e4:	f7 cf       	rjmp	.-18     	; 0x9d4 <__stack+0xd5>
 9e6:	aa 94       	dec	r10
 9e8:	f4 01       	movw	r30, r8
 9ea:	ea 0d       	add	r30, r10
 9ec:	f1 1d       	adc	r31, r1
 9ee:	80 81       	ld	r24, Z
 9f0:	b7 01       	movw	r22, r14
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 9f8:	a1 10       	cpse	r10, r1
 9fa:	f5 cf       	rjmp	.-22     	; 0x9e6 <__stack+0xe7>
 9fc:	33 20       	and	r3, r3
 9fe:	09 f4       	brne	.+2      	; 0xa02 <__stack+0x103>
 a00:	51 ce       	rjmp	.-862    	; 0x6a4 <vfprintf+0x24>
 a02:	b7 01       	movw	r22, r14
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 a0c:	3a 94       	dec	r3
 a0e:	f6 cf       	rjmp	.-20     	; 0x9fc <__stack+0xfd>
 a10:	f7 01       	movw	r30, r14
 a12:	86 81       	ldd	r24, Z+6	; 0x06
 a14:	97 81       	ldd	r25, Z+7	; 0x07
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <__stack+0x11d>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	2c 96       	adiw	r28, 0x0c	; 12
 a1e:	e2 e1       	ldi	r30, 0x12	; 18
 a20:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__epilogue_restores__>

00000a24 <__eerd_byte_m328p>:
 a24:	f9 99       	sbic	0x1f, 1	; 31
 a26:	fe cf       	rjmp	.-4      	; 0xa24 <__eerd_byte_m328p>
 a28:	92 bd       	out	0x22, r25	; 34
 a2a:	81 bd       	out	0x21, r24	; 33
 a2c:	f8 9a       	sbi	0x1f, 0	; 31
 a2e:	99 27       	eor	r25, r25
 a30:	80 b5       	in	r24, 0x20	; 32
 a32:	08 95       	ret

00000a34 <__eewr_byte_m328p>:
 a34:	26 2f       	mov	r18, r22

00000a36 <__eewr_r18_m328p>:
 a36:	f9 99       	sbic	0x1f, 1	; 31
 a38:	fe cf       	rjmp	.-4      	; 0xa36 <__eewr_r18_m328p>
 a3a:	1f ba       	out	0x1f, r1	; 31
 a3c:	92 bd       	out	0x22, r25	; 34
 a3e:	81 bd       	out	0x21, r24	; 33
 a40:	20 bd       	out	0x20, r18	; 32
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	fa 9a       	sbi	0x1f, 2	; 31
 a48:	f9 9a       	sbi	0x1f, 1	; 31
 a4a:	0f be       	out	0x3f, r0	; 63
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	08 95       	ret

00000a50 <strnlen_P>:
 a50:	fc 01       	movw	r30, r24
 a52:	05 90       	lpm	r0, Z+
 a54:	61 50       	subi	r22, 0x01	; 1
 a56:	70 40       	sbci	r23, 0x00	; 0
 a58:	01 10       	cpse	r0, r1
 a5a:	d8 f7       	brcc	.-10     	; 0xa52 <strnlen_P+0x2>
 a5c:	80 95       	com	r24
 a5e:	90 95       	com	r25
 a60:	8e 0f       	add	r24, r30
 a62:	9f 1f       	adc	r25, r31
 a64:	08 95       	ret

00000a66 <strnlen>:
 a66:	fc 01       	movw	r30, r24
 a68:	61 50       	subi	r22, 0x01	; 1
 a6a:	70 40       	sbci	r23, 0x00	; 0
 a6c:	01 90       	ld	r0, Z+
 a6e:	01 10       	cpse	r0, r1
 a70:	d8 f7       	brcc	.-10     	; 0xa68 <strnlen+0x2>
 a72:	80 95       	com	r24
 a74:	90 95       	com	r25
 a76:	8e 0f       	add	r24, r30
 a78:	9f 1f       	adc	r25, r31
 a7a:	08 95       	ret

00000a7c <fputc>:
 a7c:	0f 93       	push	r16
 a7e:	1f 93       	push	r17
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	18 2f       	mov	r17, r24
 a86:	09 2f       	mov	r16, r25
 a88:	eb 01       	movw	r28, r22
 a8a:	8b 81       	ldd	r24, Y+3	; 0x03
 a8c:	81 fd       	sbrc	r24, 1
 a8e:	03 c0       	rjmp	.+6      	; 0xa96 <fputc+0x1a>
 a90:	8f ef       	ldi	r24, 0xFF	; 255
 a92:	9f ef       	ldi	r25, 0xFF	; 255
 a94:	20 c0       	rjmp	.+64     	; 0xad6 <fputc+0x5a>
 a96:	82 ff       	sbrs	r24, 2
 a98:	10 c0       	rjmp	.+32     	; 0xaba <fputc+0x3e>
 a9a:	4e 81       	ldd	r20, Y+6	; 0x06
 a9c:	5f 81       	ldd	r21, Y+7	; 0x07
 a9e:	2c 81       	ldd	r18, Y+4	; 0x04
 aa0:	3d 81       	ldd	r19, Y+5	; 0x05
 aa2:	42 17       	cp	r20, r18
 aa4:	53 07       	cpc	r21, r19
 aa6:	7c f4       	brge	.+30     	; 0xac6 <fputc+0x4a>
 aa8:	e8 81       	ld	r30, Y
 aaa:	f9 81       	ldd	r31, Y+1	; 0x01
 aac:	9f 01       	movw	r18, r30
 aae:	2f 5f       	subi	r18, 0xFF	; 255
 ab0:	3f 4f       	sbci	r19, 0xFF	; 255
 ab2:	39 83       	std	Y+1, r19	; 0x01
 ab4:	28 83       	st	Y, r18
 ab6:	10 83       	st	Z, r17
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <fputc+0x4a>
 aba:	e8 85       	ldd	r30, Y+8	; 0x08
 abc:	f9 85       	ldd	r31, Y+9	; 0x09
 abe:	81 2f       	mov	r24, r17
 ac0:	09 95       	icall
 ac2:	89 2b       	or	r24, r25
 ac4:	29 f7       	brne	.-54     	; 0xa90 <fputc+0x14>
 ac6:	2e 81       	ldd	r18, Y+6	; 0x06
 ac8:	3f 81       	ldd	r19, Y+7	; 0x07
 aca:	2f 5f       	subi	r18, 0xFF	; 255
 acc:	3f 4f       	sbci	r19, 0xFF	; 255
 ace:	3f 83       	std	Y+7, r19	; 0x07
 ad0:	2e 83       	std	Y+6, r18	; 0x06
 ad2:	81 2f       	mov	r24, r17
 ad4:	90 2f       	mov	r25, r16
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	08 95       	ret

00000ae0 <__ultoa_invert>:
 ae0:	fa 01       	movw	r30, r20
 ae2:	aa 27       	eor	r26, r26
 ae4:	28 30       	cpi	r18, 0x08	; 8
 ae6:	51 f1       	breq	.+84     	; 0xb3c <__ultoa_invert+0x5c>
 ae8:	20 31       	cpi	r18, 0x10	; 16
 aea:	81 f1       	breq	.+96     	; 0xb4c <__ultoa_invert+0x6c>
 aec:	e8 94       	clt
 aee:	6f 93       	push	r22
 af0:	6e 7f       	andi	r22, 0xFE	; 254
 af2:	6e 5f       	subi	r22, 0xFE	; 254
 af4:	7f 4f       	sbci	r23, 0xFF	; 255
 af6:	8f 4f       	sbci	r24, 0xFF	; 255
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	af 4f       	sbci	r26, 0xFF	; 255
 afc:	b1 e0       	ldi	r27, 0x01	; 1
 afe:	3e d0       	rcall	.+124    	; 0xb7c <__ultoa_invert+0x9c>
 b00:	b4 e0       	ldi	r27, 0x04	; 4
 b02:	3c d0       	rcall	.+120    	; 0xb7c <__ultoa_invert+0x9c>
 b04:	67 0f       	add	r22, r23
 b06:	78 1f       	adc	r23, r24
 b08:	89 1f       	adc	r24, r25
 b0a:	9a 1f       	adc	r25, r26
 b0c:	a1 1d       	adc	r26, r1
 b0e:	68 0f       	add	r22, r24
 b10:	79 1f       	adc	r23, r25
 b12:	8a 1f       	adc	r24, r26
 b14:	91 1d       	adc	r25, r1
 b16:	a1 1d       	adc	r26, r1
 b18:	6a 0f       	add	r22, r26
 b1a:	71 1d       	adc	r23, r1
 b1c:	81 1d       	adc	r24, r1
 b1e:	91 1d       	adc	r25, r1
 b20:	a1 1d       	adc	r26, r1
 b22:	20 d0       	rcall	.+64     	; 0xb64 <__ultoa_invert+0x84>
 b24:	09 f4       	brne	.+2      	; 0xb28 <__ultoa_invert+0x48>
 b26:	68 94       	set
 b28:	3f 91       	pop	r19
 b2a:	2a e0       	ldi	r18, 0x0A	; 10
 b2c:	26 9f       	mul	r18, r22
 b2e:	11 24       	eor	r1, r1
 b30:	30 19       	sub	r19, r0
 b32:	30 5d       	subi	r19, 0xD0	; 208
 b34:	31 93       	st	Z+, r19
 b36:	de f6       	brtc	.-74     	; 0xaee <__ultoa_invert+0xe>
 b38:	cf 01       	movw	r24, r30
 b3a:	08 95       	ret
 b3c:	46 2f       	mov	r20, r22
 b3e:	47 70       	andi	r20, 0x07	; 7
 b40:	40 5d       	subi	r20, 0xD0	; 208
 b42:	41 93       	st	Z+, r20
 b44:	b3 e0       	ldi	r27, 0x03	; 3
 b46:	0f d0       	rcall	.+30     	; 0xb66 <__ultoa_invert+0x86>
 b48:	c9 f7       	brne	.-14     	; 0xb3c <__ultoa_invert+0x5c>
 b4a:	f6 cf       	rjmp	.-20     	; 0xb38 <__ultoa_invert+0x58>
 b4c:	46 2f       	mov	r20, r22
 b4e:	4f 70       	andi	r20, 0x0F	; 15
 b50:	40 5d       	subi	r20, 0xD0	; 208
 b52:	4a 33       	cpi	r20, 0x3A	; 58
 b54:	18 f0       	brcs	.+6      	; 0xb5c <__ultoa_invert+0x7c>
 b56:	49 5d       	subi	r20, 0xD9	; 217
 b58:	31 fd       	sbrc	r19, 1
 b5a:	40 52       	subi	r20, 0x20	; 32
 b5c:	41 93       	st	Z+, r20
 b5e:	02 d0       	rcall	.+4      	; 0xb64 <__ultoa_invert+0x84>
 b60:	a9 f7       	brne	.-22     	; 0xb4c <__ultoa_invert+0x6c>
 b62:	ea cf       	rjmp	.-44     	; 0xb38 <__ultoa_invert+0x58>
 b64:	b4 e0       	ldi	r27, 0x04	; 4
 b66:	a6 95       	lsr	r26
 b68:	97 95       	ror	r25
 b6a:	87 95       	ror	r24
 b6c:	77 95       	ror	r23
 b6e:	67 95       	ror	r22
 b70:	ba 95       	dec	r27
 b72:	c9 f7       	brne	.-14     	; 0xb66 <__ultoa_invert+0x86>
 b74:	00 97       	sbiw	r24, 0x00	; 0
 b76:	61 05       	cpc	r22, r1
 b78:	71 05       	cpc	r23, r1
 b7a:	08 95       	ret
 b7c:	9b 01       	movw	r18, r22
 b7e:	ac 01       	movw	r20, r24
 b80:	0a 2e       	mov	r0, r26
 b82:	06 94       	lsr	r0
 b84:	57 95       	ror	r21
 b86:	47 95       	ror	r20
 b88:	37 95       	ror	r19
 b8a:	27 95       	ror	r18
 b8c:	ba 95       	dec	r27
 b8e:	c9 f7       	brne	.-14     	; 0xb82 <__ultoa_invert+0xa2>
 b90:	62 0f       	add	r22, r18
 b92:	73 1f       	adc	r23, r19
 b94:	84 1f       	adc	r24, r20
 b96:	95 1f       	adc	r25, r21
 b98:	a0 1d       	adc	r26, r0
 b9a:	08 95       	ret

00000b9c <__prologue_saves__>:
 b9c:	2f 92       	push	r2
 b9e:	3f 92       	push	r3
 ba0:	4f 92       	push	r4
 ba2:	5f 92       	push	r5
 ba4:	6f 92       	push	r6
 ba6:	7f 92       	push	r7
 ba8:	8f 92       	push	r8
 baa:	9f 92       	push	r9
 bac:	af 92       	push	r10
 bae:	bf 92       	push	r11
 bb0:	cf 92       	push	r12
 bb2:	df 92       	push	r13
 bb4:	ef 92       	push	r14
 bb6:	ff 92       	push	r15
 bb8:	0f 93       	push	r16
 bba:	1f 93       	push	r17
 bbc:	cf 93       	push	r28
 bbe:	df 93       	push	r29
 bc0:	cd b7       	in	r28, 0x3d	; 61
 bc2:	de b7       	in	r29, 0x3e	; 62
 bc4:	ca 1b       	sub	r28, r26
 bc6:	db 0b       	sbc	r29, r27
 bc8:	0f b6       	in	r0, 0x3f	; 63
 bca:	f8 94       	cli
 bcc:	de bf       	out	0x3e, r29	; 62
 bce:	0f be       	out	0x3f, r0	; 63
 bd0:	cd bf       	out	0x3d, r28	; 61
 bd2:	09 94       	ijmp

00000bd4 <__epilogue_restores__>:
 bd4:	2a 88       	ldd	r2, Y+18	; 0x12
 bd6:	39 88       	ldd	r3, Y+17	; 0x11
 bd8:	48 88       	ldd	r4, Y+16	; 0x10
 bda:	5f 84       	ldd	r5, Y+15	; 0x0f
 bdc:	6e 84       	ldd	r6, Y+14	; 0x0e
 bde:	7d 84       	ldd	r7, Y+13	; 0x0d
 be0:	8c 84       	ldd	r8, Y+12	; 0x0c
 be2:	9b 84       	ldd	r9, Y+11	; 0x0b
 be4:	aa 84       	ldd	r10, Y+10	; 0x0a
 be6:	b9 84       	ldd	r11, Y+9	; 0x09
 be8:	c8 84       	ldd	r12, Y+8	; 0x08
 bea:	df 80       	ldd	r13, Y+7	; 0x07
 bec:	ee 80       	ldd	r14, Y+6	; 0x06
 bee:	fd 80       	ldd	r15, Y+5	; 0x05
 bf0:	0c 81       	ldd	r16, Y+4	; 0x04
 bf2:	1b 81       	ldd	r17, Y+3	; 0x03
 bf4:	aa 81       	ldd	r26, Y+2	; 0x02
 bf6:	b9 81       	ldd	r27, Y+1	; 0x01
 bf8:	ce 0f       	add	r28, r30
 bfa:	d1 1d       	adc	r29, r1
 bfc:	0f b6       	in	r0, 0x3f	; 63
 bfe:	f8 94       	cli
 c00:	de bf       	out	0x3e, r29	; 62
 c02:	0f be       	out	0x3f, r0	; 63
 c04:	cd bf       	out	0x3d, r28	; 61
 c06:	ed 01       	movw	r28, r26
 c08:	08 95       	ret

00000c0a <_exit>:
 c0a:	f8 94       	cli

00000c0c <__stop_program>:
 c0c:	ff cf       	rjmp	.-2      	; 0xc0c <__stop_program>
