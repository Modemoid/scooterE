
ingectorIntEEprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000546  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800108  00800108  000005e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000559  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e0  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ee  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045f  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000019ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_1>
   8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 01 	call	0x398	; 0x398 <main>
  9e:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <eeprom_to_mem>:




void eeprom_to_mem(void)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	0a e8       	ldi	r16, 0x8A	; 138
  b0:	11 e0       	ldi	r17, 0x01	; 1
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  b2:	c0 e0       	ldi	r28, 0x00	; 0
  b4:	d0 e0       	ldi	r29, 0x00	; 0
  {
    //eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
    TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  b6:	ce 01       	movw	r24, r28
  b8:	0e 94 8b 02 	call	0x516	; 0x516 <__eerd_byte_m328p>
  bc:	f8 01       	movw	r30, r16
  be:	81 93       	st	Z+, r24
  c0:	8f 01       	movw	r16, r30


void eeprom_to_mem(void)
{
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	c8 37       	cpi	r28, 0x78	; 120
  c6:	d1 05       	cpc	r29, r1
  c8:	b1 f7       	brne	.-20     	; 0xb6 <eeprom_to_mem+0x10>
  {
    //eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
    TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  }
  TimeArray[def_ArrSize] = 0;
  ca:	10 92 02 02 	sts	0x0202, r1
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <mem_to_eeprom>:
void mem_to_eeprom(void)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	1a e0       	ldi	r17, 0x0A	; 10
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  {

    eeprom_write_byte ((uint8_t*)LocalCounter, LocalCounter * 2 + 10 );
  e4:	61 2f       	mov	r22, r17
  e6:	ce 01       	movw	r24, r28
  e8:	0e 94 93 02 	call	0x526	; 0x526 <__eewr_byte_m328p>
  TimeArray[def_ArrSize] = 0;
}
void mem_to_eeprom(void)
{
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  ec:	21 96       	adiw	r28, 0x01	; 1
  ee:	1e 5f       	subi	r17, 0xFE	; 254
  f0:	1a 3f       	cpi	r17, 0xFA	; 250
  f2:	c1 f7       	brne	.-16     	; 0xe4 <mem_to_eeprom+0xc>
    eeprom_write_byte ((uint8_t*)LocalCounter, LocalCounter * 2 + 10 );

    //eeprom_write_byte ((uint8_t*)LocalCounter, TimeArray[LocalCounter]);
    //TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  }
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	08 95       	ret

000000fc <Timer2Setup>:
  // LED_PORT = LED_PORT ^ (1<<LED1); //switch

#ifdef Atmega8
  OCR2 = 199; //нужно 200 тиков, счет с 0
#else
  OCR2A = 199;
  fc:	87 ec       	ldi	r24, 0xC7	; 199
  fe:	80 93 b3 00 	sts	0x00B3, r24
  //CS20=1 //CPU clock
  */
  //теперь разрешим от него прерывания
#else

  TCCR2A = 0;
 102:	e0 eb       	ldi	r30, 0xB0	; 176
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	10 82       	st	Z, r1
  TCCR2A |= (1 << COM2A1 | 0 << COM2A1 | 1 << WGM21 | 0 << WGM20 );
 108:	80 81       	ld	r24, Z
 10a:	82 68       	ori	r24, 0x82	; 130
 10c:	80 83       	st	Z, r24
  TCCR2B = 0;
 10e:	e1 eb       	ldi	r30, 0xB1	; 177
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
  TCCR2B |= ( 0 << CS22 | 0 << CS21 | 1 << CS20);
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
#endif
  Timer2IntON
 11a:	e0 e7       	ldi	r30, 0x70	; 112
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <ADCSetup>:
  // LED_PORT|= 1<<LED4; //set
  // LED_PORT&= ~(1<<LED1);//clear
  // LED_PORT = LED_PORT ^ (1<<LED1); //switch


  ADMUX |= (0 << REFS1 | 1 << REFS0 | 1 << ADLAR | 0 << MUX3 | 0 << MUX2 | 0 << MUX1 | 0 << MUX0); //ADC0 chanel (see MUX)
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 66       	ori	r24, 0x60	; 96
 12e:	80 83       	st	Z, r24
  ADPS2 1\
  ADPS1 1 | 125 kHz@8Mhz
  ADPS0 0/
  */
#else
  ADCSRA |= (1 << ADEN | 1 << ADSC | 1 << ADATE | 1 << ADIE | 1 << ADPS2 | 1 << ADPS1 | 0 << ADPS0);
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8e 6e       	ori	r24, 0xEE	; 238
 138:	80 83       	st	Z, r24
  //ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
  ADCSRB |= (0 << ACME | 0 << ADTS2 | 1 << ADTS1 | 0 << ADTS0);
 13a:	eb e7       	ldi	r30, 0x7B	; 123
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 83       	st	Z, r24
 144:	08 95       	ret

00000146 <IntExtSetup>:
#ifdef Atmega8
  MCUCR |= (1 << ISC01) | (1 << ISC00); // по поднимающемуся фронту
  GICR |= (1 << INT0);
#else

  EICRA |= (1 << ISC11 | 1 << ISC10 | 1 << ISC01 | 1 << ISC00);
 146:	e9 e6       	ldi	r30, 0x69	; 105
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8f 60       	ori	r24, 0x0F	; 15
 14e:	80 83       	st	Z, r24
  EIMSK |= (1 << INT0 | 1 << INT1);
 150:	8d b3       	in	r24, 0x1d	; 29
 152:	83 60       	ori	r24, 0x03	; 3
 154:	8d bb       	out	0x1d, r24	; 29
 156:	08 95       	ret

00000158 <PortSetup>:

}
void PortSetup(void)
{
  //настройка портов для кнопок
  DDRC = 0b00000000;  //kb port
 158:	17 b8       	out	0x07, r1	; 7
  PORTC = 0b00000000; //kb port
 15a:	18 b8       	out	0x08, r1	; 8

  //настройка портов
  //DDRB = 0b11100110;  //kb port
  //PORTB = 0b00000000; //kb port

  DDRD = 0b00000011; //rx tx as led
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0b00000000;
 160:	1b b8       	out	0x0b, r1	; 11
  //PINx регистр чтения
  //PORTx 1=pullup(in)
  //DDRx 0=in 1=out

  Out_DDR |= (1 << Out1 | 1 << Out2 | 1 << Out3);
 162:	84 b1       	in	r24, 0x04	; 4
 164:	8e 60       	ori	r24, 0x0E	; 14
 166:	84 b9       	out	0x04, r24	; 4

  //#ifdef DEBUG_LEDS
  LED_DDR |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4); //Led port
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	80 6f       	ori	r24, 0xF0	; 240
 16c:	84 b9       	out	0x04, r24	; 4
  LED_PORT &= ~(1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4); //Led port
 16e:	2d 98       	cbi	0x05, 5	; 5
 170:	08 95       	ret

00000172 <LoadFuelTime>:
  //#endif
}
void LoadFuelTime(void)
{
  //    Coffs[6]; //0 - open time (use as "+ingector open time -ingector close time", 1 - NU, 2 - min drocel position, 3 - max drocel position, 4-drebezg flag
  RemainingFlowTime = Coffs[6] + TimeArray[DrocelPosition] + CorrectionArray[DrocelPosition] + ADCCorrection; //TODO: загрузить значение из таблички "оставшиеся времея потока" в зависимости от того что у нас с ј?ѕ(не забыть поправки начала-конца) + коэффициенты (открытие-закрытие)
 172:	80 91 08 02 	lds	r24, 0x0208
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	40 91 06 01 	lds	r20, 0x0106
 17c:	fc 01       	movw	r30, r24
 17e:	e6 57       	subi	r30, 0x76	; 118
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	20 81       	ld	r18, Z
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	24 0f       	add	r18, r20
 188:	31 1d       	adc	r19, r1
 18a:	fc 01       	movw	r30, r24
 18c:	e0 5f       	subi	r30, 0xF0	; 240
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	80 81       	ld	r24, Z
 192:	a9 01       	movw	r20, r18
 194:	48 0f       	add	r20, r24
 196:	51 1d       	adc	r21, r1
 198:	87 fd       	sbrc	r24, 7
 19a:	5a 95       	dec	r21
 19c:	ca 01       	movw	r24, r20
 19e:	20 91 09 01 	lds	r18, 0x0109
 1a2:	82 0f       	add	r24, r18
 1a4:	91 1d       	adc	r25, r1
 1a6:	90 93 0f 01 	sts	0x010F, r25
 1aa:	80 93 0e 01 	sts	0x010E, r24
 1ae:	08 95       	ret

000001b0 <Low_FuelFlow_Exeption>:

}
void Low_FuelFlow_Exeption (void)
{
  SetTX
 1b0:	59 9a       	sbi	0x0b, 1	; 11
 1b2:	08 95       	ret

000001b4 <__vector_2>:
char charmap(char x, char in_min, char in_max, char out_min, char out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
ISR( INT1_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
}
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_1>:
ISR( INT0_vect )
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
  //SwitchTX
  //тахометр
  OldTimer = CurrentTimer;
 1ea:	80 91 88 01 	lds	r24, 0x0188
 1ee:	90 91 89 01 	lds	r25, 0x0189
 1f2:	90 93 07 02 	sts	0x0207, r25
 1f6:	80 93 06 02 	sts	0x0206, r24
  CurrentTimer = 0;
 1fa:	10 92 89 01 	sts	0x0189, r1
 1fe:	10 92 88 01 	sts	0x0188, r1
  //конец тахометр

  if (Coffs[4] == 0) {//drebezg protection
 202:	80 91 04 01 	lds	r24, 0x0104
 206:	81 11       	cpse	r24, r1
 208:	11 c0       	rjmp	.+34     	; 0x22c <__vector_1+0x64>
    Coffs[4] = 1;//set drebezg protection flag
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 04 01 	sts	0x0104, r24

    if (RemainingFlowTime == 0) //TODO: проверить пустое ли у нас оставшееся время.
 210:	80 91 0e 01 	lds	r24, 0x010E
 214:	90 91 0f 01 	lds	r25, 0x010F
 218:	89 2b       	or	r24, r25
 21a:	21 f4       	brne	.+8      	; 0x224 <__vector_1+0x5c>
    {
      LoadFuelTime();
 21c:	0e 94 b9 00 	call	0x172	; 0x172 <LoadFuelTime>
      ClearTX
 220:	59 98       	cbi	0x0b, 1	; 11
 222:	04 c0       	rjmp	.+8      	; 0x22c <__vector_1+0x64>
    } else
    {
      Low_FuelFlow_Exeption();
 224:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Low_FuelFlow_Exeption>
      LoadFuelTime();
 228:	0e 94 b9 00 	call	0x172	; 0x172 <LoadFuelTime>
  /*
  //если стоит мало оборотов дернуть процедуру "стартовая порция", сбросить "мало оборотов"
  //посчитать через сколько начать брызгать
  //запустить таймер 1 на "брызг" (комперј и комперЅ)
  */
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_9>:
ISR( TIMER2_OVF_vect )
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
  asm ("nop"); //прерывание вызывается вслед за timer_comp - в этом режиме работы таймера бессмысленно
 258:	00 00       	nop
}
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_7>:
#ifdef Atmega8
ISR( TIMER2_COMP_vect )
#else
ISR( TIMER2_COMPA_vect)
#endif
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	2f 93       	push	r18
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
  //SwitchRX
  //SwitchOut1
  //Coffs[5]++;
  if (Coffs[4] == 1)
 274:	80 91 04 01 	lds	r24, 0x0104
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	11 f4       	brne	.+4      	; 0x280 <__vector_7+0x1c>
  {
    Coffs[4] = 0;
 27c:	10 92 04 01 	sts	0x0104, r1
  }

  if (CurrentTimer < MinOperationRPM) //TODO: инкремент переменной тахометра
 280:	80 91 88 01 	lds	r24, 0x0188
 284:	90 91 89 01 	lds	r25, 0x0189
 288:	80 32       	cpi	r24, 0x20	; 32
 28a:	2e e4       	ldi	r18, 0x4E	; 78
 28c:	92 07       	cpc	r25, r18
 28e:	28 f4       	brcc	.+10     	; 0x29a <__vector_7+0x36>
  {
    CurrentTimer++;
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 89 01 	sts	0x0189, r25
 296:	80 93 88 01 	sts	0x0188, r24
  } else
  {
    //todo: exeption низкие обороты работы двигателя
  }
  if (RemainingFlowTime)
 29a:	80 91 0e 01 	lds	r24, 0x010E
 29e:	90 91 0f 01 	lds	r25, 0x010F
 2a2:	00 97       	sbiw	r24, 0x00	; 0
 2a4:	29 f0       	breq	.+10     	; 0x2b0 <__vector_7+0x4c>
  {
    RemainingFlowTime--; //уменьшаем оставшееся время потока
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	90 93 0f 01 	sts	0x010F, r25
 2ac:	80 93 0e 01 	sts	0x010E, r24
  }
}
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_21>:

ISR(ADC_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31

  switch (AdcCH)
 2e2:	80 91 0a 01 	lds	r24, 0x010A
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	59 f1       	breq	.+86     	; 0x340 <__vector_21+0x80>
 2ea:	18 f0       	brcs	.+6      	; 0x2f2 <__vector_21+0x32>
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	c1 f1       	breq	.+112    	; 0x360 <__vector_21+0xa0>
 2f0:	42 c0       	rjmp	.+132    	; 0x376 <__vector_21+0xb6>
  {
    case 0:
      {
        RawADC0 =  ADCH;
 2f2:	80 91 79 00 	lds	r24, 0x0079
 2f6:	80 93 0b 01 	sts	0x010B, r24
        ADMUX |= 1 << MUX1; //set (mux0 =0 mun1=1)
 2fa:	ec e7       	ldi	r30, 0x7C	; 124
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	82 60       	ori	r24, 0x02	; 2
 302:	80 83       	st	Z, r24
        AdcCH = 1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 0a 01 	sts	0x010A, r24

        DrocelPosition = charmap(RawADC0, 1, 255, Coffs[2], Coffs[3]);
 30a:	e0 91 02 01 	lds	r30, 0x0102
  asm ("nop");
  //SetLed1//set bits
}
char charmap(char x, char in_min, char in_max, char out_min, char out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 30e:	40 91 0b 01 	lds	r20, 0x010B
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	41 50       	subi	r20, 0x01	; 1
 316:	51 09       	sbc	r21, r1
 318:	20 91 03 01 	lds	r18, 0x0103
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	2e 1b       	sub	r18, r30
 320:	31 09       	sbc	r19, r1
 322:	42 9f       	mul	r20, r18
 324:	c0 01       	movw	r24, r0
 326:	43 9f       	mul	r20, r19
 328:	90 0d       	add	r25, r0
 32a:	52 9f       	mul	r21, r18
 32c:	90 0d       	add	r25, r0
 32e:	11 24       	eor	r1, r1
 330:	6e ef       	ldi	r22, 0xFE	; 254
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	0e 94 22 02 	call	0x444	; 0x444 <__divmodhi4>
 338:	e6 0f       	add	r30, r22
      {
        RawADC0 =  ADCH;
        ADMUX |= 1 << MUX1; //set (mux0 =0 mun1=1)
        AdcCH = 1;

        DrocelPosition = charmap(RawADC0, 1, 255, Coffs[2], Coffs[3]);
 33a:	e0 93 08 02 	sts	0x0208, r30
        break;
 33e:	1b c0       	rjmp	.+54     	; 0x376 <__vector_21+0xb6>
      }
    case 1:
      {
        RawADC2 =  ADCH;
 340:	80 91 79 00 	lds	r24, 0x0079
 344:	80 93 0d 01 	sts	0x010D, r24
        ADMUX |= 1 << MUX0; //set
 348:	ec e7       	ldi	r30, 0x7C	; 124
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	80 83       	st	Z, r24
        ADMUX &= ~(1 << MUX1); //clear (mux0=1 mun1=0)
 352:	80 81       	ld	r24, Z
 354:	8d 7f       	andi	r24, 0xFD	; 253
 356:	80 83       	st	Z, r24
        AdcCH = 2;
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	80 93 0a 01 	sts	0x010A, r24
        break;
 35e:	0b c0       	rjmp	.+22     	; 0x376 <__vector_21+0xb6>
      }
    case 2:
      {
        RawADC1 =  ADCH;
 360:	80 91 79 00 	lds	r24, 0x0079
 364:	80 93 0c 01 	sts	0x010C, r24
        ADMUX &= ~(1 << MUX0); //clear(mux0=0 mun1=0)
 368:	ec e7       	ldi	r30, 0x7C	; 124
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	8e 7f       	andi	r24, 0xFE	; 254
 370:	80 83       	st	Z, r24
        AdcCH = 0;
 372:	10 92 0a 01 	sts	0x010A, r1
        break;
      }
    default: ;
  }

}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <main>:

int main(void)
{
  if (eeprom_read_byte((uint8_t*)10) != 30);
  {
    mem_to_eeprom();
 398:	0e 94 6c 00 	call	0xd8	; 0xd8 <mem_to_eeprom>
 39c:	e0 e1       	ldi	r30, 0x10	; 16
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	88 e8       	ldi	r24, 0x88	; 136
 3a2:	91 e0       	ldi	r25, 0x01	; 1
  }
  unsigned char LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  {
    CorrectionArray[LocalCounter] = 0; // clear correction array
 3a4:	11 92       	st	Z+, r1
  if (eeprom_read_byte((uint8_t*)10) != 30);
  {
    mem_to_eeprom();
  }
  unsigned char LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
 3a6:	e8 17       	cp	r30, r24
 3a8:	f9 07       	cpc	r31, r25
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0xc>
  {
    CorrectionArray[LocalCounter] = 0; // clear correction array
  }

  eeprom_to_mem();//load data arrays into memory
 3ac:	0e 94 53 00 	call	0xa6	; 0xa6 <eeprom_to_mem>
  Timer2Setup(); //setup timer2 //считает отрезки по 25 микросекунд
 3b0:	0e 94 7e 00 	call	0xfc	; 0xfc <Timer2Setup>
  ADCSetup();
 3b4:	0e 94 93 00 	call	0x126	; 0x126 <ADCSetup>
  IntExtSetup();
 3b8:	0e 94 a3 00 	call	0x146	; 0x146 <IntExtSetup>
  PortSetup();
 3bc:	0e 94 ac 00 	call	0x158	; 0x158 <PortSetup>
  sei();
 3c0:	78 94       	sei
      _delay_ms(1);
    }

    ClearTX
    */
    currentRPM = (2400000 / OldTimer) / 8;
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f0 ee       	ldi	r31, 0xE0	; 224
 3c6:	cf 2e       	mov	r12, r31
 3c8:	f3 e9       	ldi	r31, 0x93	; 147
 3ca:	df 2e       	mov	r13, r31
 3cc:	f4 e0       	ldi	r31, 0x04	; 4
 3ce:	ef 2e       	mov	r14, r31
 3d0:	f1 2c       	mov	r15, r1
 3d2:	f0 2d       	mov	r31, r0
  asm ("nop");
  //SetLed1//set bits
}
char charmap(char x, char in_min, char in_max, char out_min, char out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 3d4:	0e e1       	ldi	r16, 0x1E	; 30
 3d6:	cf ef       	ldi	r28, 0xFF	; 255
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	1f ef       	ldi	r17, 0xFF	; 255
  while (1)
  {

    //TODO пересчет мс в обороты оборотов = (1000/мс)*60
    //currentRPM= 60000/CurrentTimer керрентТаймер должен быть в мс
    if (RemainingFlowTime)
 3dc:	80 91 0e 01 	lds	r24, 0x010E
 3e0:	90 91 0f 01 	lds	r25, 0x010F
 3e4:	89 2b       	or	r24, r25
 3e6:	21 f0       	breq	.+8      	; 0x3f0 <main+0x58>
    {
      SetOut1
 3e8:	29 9a       	sbi	0x05, 1	; 5
      SetLed4
 3ea:	2c 9a       	sbi	0x05, 4	; 5
      SetRX
 3ec:	58 9a       	sbi	0x0b, 0	; 11
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <main+0x5e>
    }
    else {
      ClearRX
 3f0:	58 98       	cbi	0x0b, 0	; 11
      ClearOut1
 3f2:	29 98       	cbi	0x05, 1	; 5
      ClearLed4
 3f4:	2c 98       	cbi	0x05, 4	; 5
      _delay_ms(1);
    }

    ClearTX
    */
    currentRPM = (2400000 / OldTimer) / 8;
 3f6:	20 91 06 02 	lds	r18, 0x0206
 3fa:	30 91 07 02 	lds	r19, 0x0207
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	c7 01       	movw	r24, r14
 404:	b6 01       	movw	r22, r12
 406:	0e 94 36 02 	call	0x46c	; 0x46c <__divmodsi4>
 40a:	20 93 02 02 	sts	0x0202, r18
 40e:	30 93 03 02 	sts	0x0203, r19
 412:	40 93 04 02 	sts	0x0204, r20
 416:	50 93 05 02 	sts	0x0205, r21
  asm ("nop");
  //SetLed1//set bits
}
char charmap(char x, char in_min, char in_max, char out_min, char out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 41a:	80 91 0d 01 	lds	r24, 0x010D
 41e:	08 9f       	mul	r16, r24
 420:	c0 01       	movw	r24, r0
 422:	11 24       	eor	r1, r1
 424:	be 01       	movw	r22, r28
 426:	0e 94 22 02 	call	0x444	; 0x444 <__divmodhi4>
 42a:	60 93 09 01 	sts	0x0109, r22
 42e:	80 91 0c 01 	lds	r24, 0x010C
 432:	18 9f       	mul	r17, r24
 434:	c0 01       	movw	r24, r0
 436:	11 24       	eor	r1, r1
 438:	be 01       	movw	r22, r28
 43a:	0e 94 22 02 	call	0x444	; 0x444 <__divmodhi4>
 43e:	60 93 08 01 	sts	0x0108, r22


    //TODO: дрыгать форсункой в зависимости от того что у нас с "оставшимся временем потока"
    //TODO:: Please write your application code

  }
 442:	cc cf       	rjmp	.-104    	; 0x3dc <main+0x44>

00000444 <__divmodhi4>:
 444:	97 fb       	bst	r25, 7
 446:	07 2e       	mov	r0, r23
 448:	16 f4       	brtc	.+4      	; 0x44e <__divmodhi4+0xa>
 44a:	00 94       	com	r0
 44c:	07 d0       	rcall	.+14     	; 0x45c <__divmodhi4_neg1>
 44e:	77 fd       	sbrc	r23, 7
 450:	09 d0       	rcall	.+18     	; 0x464 <__divmodhi4_neg2>
 452:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 456:	07 fc       	sbrc	r0, 7
 458:	05 d0       	rcall	.+10     	; 0x464 <__divmodhi4_neg2>
 45a:	3e f4       	brtc	.+14     	; 0x46a <__divmodhi4_exit>

0000045c <__divmodhi4_neg1>:
 45c:	90 95       	com	r25
 45e:	81 95       	neg	r24
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <__divmodhi4_neg2>:
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255

0000046a <__divmodhi4_exit>:
 46a:	08 95       	ret

0000046c <__divmodsi4>:
 46c:	05 2e       	mov	r0, r21
 46e:	97 fb       	bst	r25, 7
 470:	1e f4       	brtc	.+6      	; 0x478 <__divmodsi4+0xc>
 472:	00 94       	com	r0
 474:	0e 94 4d 02 	call	0x49a	; 0x49a <__negsi2>
 478:	57 fd       	sbrc	r21, 7
 47a:	07 d0       	rcall	.+14     	; 0x48a <__divmodsi4_neg2>
 47c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__udivmodsi4>
 480:	07 fc       	sbrc	r0, 7
 482:	03 d0       	rcall	.+6      	; 0x48a <__divmodsi4_neg2>
 484:	4e f4       	brtc	.+18     	; 0x498 <__divmodsi4_exit>
 486:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__negsi2>

0000048a <__divmodsi4_neg2>:
 48a:	50 95       	com	r21
 48c:	40 95       	com	r20
 48e:	30 95       	com	r19
 490:	21 95       	neg	r18
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	4f 4f       	sbci	r20, 0xFF	; 255
 496:	5f 4f       	sbci	r21, 0xFF	; 255

00000498 <__divmodsi4_exit>:
 498:	08 95       	ret

0000049a <__negsi2>:
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	08 95       	ret

000004aa <__udivmodhi4>:
 4aa:	aa 1b       	sub	r26, r26
 4ac:	bb 1b       	sub	r27, r27
 4ae:	51 e1       	ldi	r21, 0x11	; 17
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <__udivmodhi4_ep>

000004b2 <__udivmodhi4_loop>:
 4b2:	aa 1f       	adc	r26, r26
 4b4:	bb 1f       	adc	r27, r27
 4b6:	a6 17       	cp	r26, r22
 4b8:	b7 07       	cpc	r27, r23
 4ba:	10 f0       	brcs	.+4      	; 0x4c0 <__udivmodhi4_ep>
 4bc:	a6 1b       	sub	r26, r22
 4be:	b7 0b       	sbc	r27, r23

000004c0 <__udivmodhi4_ep>:
 4c0:	88 1f       	adc	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	5a 95       	dec	r21
 4c6:	a9 f7       	brne	.-22     	; 0x4b2 <__udivmodhi4_loop>
 4c8:	80 95       	com	r24
 4ca:	90 95       	com	r25
 4cc:	bc 01       	movw	r22, r24
 4ce:	cd 01       	movw	r24, r26
 4d0:	08 95       	ret

000004d2 <__udivmodsi4>:
 4d2:	a1 e2       	ldi	r26, 0x21	; 33
 4d4:	1a 2e       	mov	r1, r26
 4d6:	aa 1b       	sub	r26, r26
 4d8:	bb 1b       	sub	r27, r27
 4da:	fd 01       	movw	r30, r26
 4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <__udivmodsi4_ep>

000004de <__udivmodsi4_loop>:
 4de:	aa 1f       	adc	r26, r26
 4e0:	bb 1f       	adc	r27, r27
 4e2:	ee 1f       	adc	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	a2 17       	cp	r26, r18
 4e8:	b3 07       	cpc	r27, r19
 4ea:	e4 07       	cpc	r30, r20
 4ec:	f5 07       	cpc	r31, r21
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__udivmodsi4_ep>
 4f0:	a2 1b       	sub	r26, r18
 4f2:	b3 0b       	sbc	r27, r19
 4f4:	e4 0b       	sbc	r30, r20
 4f6:	f5 0b       	sbc	r31, r21

000004f8 <__udivmodsi4_ep>:
 4f8:	66 1f       	adc	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a 94       	dec	r1
 502:	69 f7       	brne	.-38     	; 0x4de <__udivmodsi4_loop>
 504:	60 95       	com	r22
 506:	70 95       	com	r23
 508:	80 95       	com	r24
 50a:	90 95       	com	r25
 50c:	9b 01       	movw	r18, r22
 50e:	ac 01       	movw	r20, r24
 510:	bd 01       	movw	r22, r26
 512:	cf 01       	movw	r24, r30
 514:	08 95       	ret

00000516 <__eerd_byte_m328p>:
 516:	f9 99       	sbic	0x1f, 1	; 31
 518:	fe cf       	rjmp	.-4      	; 0x516 <__eerd_byte_m328p>
 51a:	92 bd       	out	0x22, r25	; 34
 51c:	81 bd       	out	0x21, r24	; 33
 51e:	f8 9a       	sbi	0x1f, 0	; 31
 520:	99 27       	eor	r25, r25
 522:	80 b5       	in	r24, 0x20	; 32
 524:	08 95       	ret

00000526 <__eewr_byte_m328p>:
 526:	26 2f       	mov	r18, r22

00000528 <__eewr_r18_m328p>:
 528:	f9 99       	sbic	0x1f, 1	; 31
 52a:	fe cf       	rjmp	.-4      	; 0x528 <__eewr_r18_m328p>
 52c:	1f ba       	out	0x1f, r1	; 31
 52e:	92 bd       	out	0x22, r25	; 34
 530:	81 bd       	out	0x21, r24	; 33
 532:	20 bd       	out	0x20, r18	; 32
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	fa 9a       	sbi	0x1f, 2	; 31
 53a:	f9 9a       	sbi	0x1f, 1	; 31
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	08 95       	ret

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
