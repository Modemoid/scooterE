
ingectorIntEEprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  0000032e  000003c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  008000d8  008000d8  0000043a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000036a  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000159  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025b  00000000  00000000  000009b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000280  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000029a  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	84 c0       	rjmp	.+264    	; 0x10c <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	c9 c0       	rjmp	.+402    	; 0x19a <__vector_3>
   8:	bd c0       	rjmp	.+378    	; 0x184 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	ec c0       	rjmp	.+472    	; 0x1f6 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e2       	ldi	r30, 0x2E	; 46
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 3d       	cpi	r26, 0xD8	; 216
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a8 ed       	ldi	r26, 0xD8	; 216
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e8 d0       	rcall	.+464    	; 0x22a <main>
  5a:	67 c1       	rjmp	.+718    	; 0x32a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <eeprom_to_mem>:




void eeprom_to_mem(void)
{
  5e:	0f 93       	push	r16
  60:	1f 93       	push	r17
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	05 ee       	ldi	r16, 0xE5	; 229
  68:	10 e0       	ldi	r17, 0x00	; 0
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  6a:	c0 e0       	ldi	r28, 0x00	; 0
  6c:	d0 e0       	ldi	r29, 0x00	; 0
  {
    //eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
    TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  6e:	ce 01       	movw	r24, r28
  70:	54 d1       	rcall	.+680    	; 0x31a <__eerd_byte_m8>
  72:	f8 01       	movw	r30, r16
  74:	81 93       	st	Z+, r24
  76:	8f 01       	movw	r16, r30


void eeprom_to_mem(void)
{
  uint16_t LocalCounter = 0;
  for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
  78:	21 96       	adiw	r28, 0x01	; 1
  7a:	c8 37       	cpi	r28, 0x78	; 120
  7c:	d1 05       	cpc	r29, r1
  7e:	b9 f7       	brne	.-18     	; 0x6e <eeprom_to_mem+0x10>
  {
    //eeprom_write_byte ((uint8_t*) LocalCounter, LocalCounter);
    TimeArray[LocalCounter] = eeprom_read_byte((uint8_t*)LocalCounter); // read the byte in location 23
  }
  TimeArray[def_ArrSize] = 0;
  80:	10 92 5d 01 	sts	0x015D, r1
}
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	0f 91       	pop	r16
  8c:	08 95       	ret

0000008e <Timer2Setup>:


  // LED_PORT|= 1<<LED4; //set
  // LED_PORT&= ~(1<<LED1);//clear
  // LED_PORT = LED_PORT ^ (1<<LED1); //switch
Coffs[1] = 0;
  8e:	10 92 db 00 	sts	0x00DB, r1
Coffs[5] = 0;
  92:	10 92 df 00 	sts	0x00DF, r1
TCCR2 = 0;
  96:	15 bc       	out	0x25, r1	; 37
  OCR2 = 199; //нужно 200 тиков, счет с 0
  98:	87 ec       	ldi	r24, 0xC7	; 199
  9a:	83 bd       	out	0x23, r24	; 35

  //TCCR2 |= (0 << FOC2 | 0 << WGM20 | 0 << COM21 | 0 << COM20 | 1 << WGM21 | 0 << CS22 | 0 << CS21 | 1 << CS20);
  TCCR2 = 0;
  9c:	15 bc       	out	0x25, r1	; 37
  TCCR2 |= ( 0 << WGM20 | 0 << COM21 | 0 << COM20 | 1 << WGM21 | 0 << CS22 | 0 << CS21 | 1 << CS20);
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	89 60       	ori	r24, 0x09	; 9
  a2:	85 bd       	out	0x25, r24	; 37
  //CS22 =0
  //CS21 =0
  //CS20=1 //CPU clock
  */
  //теперь разрешим от него прерывания
  Timer2IntON
  a4:	89 b7       	in	r24, 0x39	; 57
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	89 bf       	out	0x39, r24	; 57
  aa:	08 95       	ret

000000ac <ADCSetup>:
  // LED_PORT|= 1<<LED4; //set
  // LED_PORT&= ~(1<<LED1);//clear
  // LED_PORT = LED_PORT ^ (1<<LED1); //switch


  ADMUX |= (0 << REFS1 | 0 << REFS0 | 1 << ADLAR | 0 << MUX3 | 0 << MUX2 | 0 << MUX1 | 0 << MUX0); //ADC0 chanel (see MUX)
  ac:	3d 9a       	sbi	0x07, 5	; 7
  MUX2
  MUX1
  MUX0
  */

  ADCSRA |= (1 << ADEN |1<<ADSC| 1 << ADFR | 1 << ADIE | 1 << ADPS2 | 1 << ADPS1 | 0 << ADPS0);
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	8e 6e       	ori	r24, 0xEE	; 238
  b2:	86 b9       	out	0x06, r24	; 6
  b4:	08 95       	ret

000000b6 <IntExtSetup>:
void IntExtSetup(void)
{
  //сбрасываем все биты ISCxx
  //MCUCR &= ~( (1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00) )
  //настраиваем на срабатывание INT0 по переднему фронту
  MCUCR |= (1 << ISC01) | (1 << ISC00); // по поднимающемуся фронту
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	85 bf       	out	0x35, r24	; 53
  GICR |= (1 << INT0);
  bc:	8b b7       	in	r24, 0x3b	; 59
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8b bf       	out	0x3b, r24	; 59
  c2:	08 95       	ret

000000c4 <PortSetup>:
}
void PortSetup(void)
{
		//настройка портов для кнопок
		DDRC = 0b00000000;  //kb port
  c4:	14 ba       	out	0x14, r1	; 20
		PORTC = 0b00000000; //kb port
  c6:	15 ba       	out	0x15, r1	; 21

		//настройка портов
		//DDRB = 0b11100110;  //kb port
		//PORTB = 0b00000000; //kb port
		
		DDRD = 0b00000000;
  c8:	11 ba       	out	0x11, r1	; 17
		PORTD = 0b00000000;
  ca:	12 ba       	out	0x12, r1	; 18
		//PINx регистр чтения
		//PORTx 1=pullup(in)
		//DDRx 0=in 1=out
		
		Out_DDR|=(1<<Out1|1<<Out2|1<<Out3);
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	8e 60       	ori	r24, 0x0E	; 14
  d0:	87 bb       	out	0x17, r24	; 23
		
		//#ifdef DEBUG_LEDS
		LED_DDR|= (1<<LED1)|(1<<LED2)|(1<<LED3)|(1<<LED4);     //Led port
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	80 6f       	ori	r24, 0xF0	; 240
  d6:	87 bb       	out	0x17, r24	; 23
		LED_PORT&= ~(1<<LED1)|(1<<LED2)|(1<<LED3)|(1<<LED4); //Led port
  d8:	c5 98       	cbi	0x18, 5	; 24
  da:	08 95       	ret

000000dc <LoadFuelTime>:
		//#endif
}
void LoadFuelTime(void)
{
  //    Coffs[6]; //0 - open time (use as "+ingector open time -ingector close time", 1 - NU, 2 - min drocel position, 3 - max drocel position, 4-drebezg flag
  RemainingFlowTime = Coffs[6]+TimeArray[DrocelPosition] + CorrectionArray[DrocelPosition]; //TODO: загрузить значение из таблички "оставшиеся времея потока" в зависимости от того что у нас с АЦП(не забыть поправки начала-конца) + коэффициенты (открытие-закрытие)
  dc:	80 91 63 01 	lds	r24, 0x0163
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	40 91 e0 00 	lds	r20, 0x00E0
  e6:	fc 01       	movw	r30, r24
  e8:	eb 51       	subi	r30, 0x1B	; 27
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	20 81       	ld	r18, Z
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	24 0f       	add	r18, r20
  f2:	31 1d       	adc	r19, r1
  f4:	fc 01       	movw	r30, r24
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	80 81       	ld	r24, Z
  fc:	a9 01       	movw	r20, r18
  fe:	48 0f       	add	r20, r24
 100:	51 1d       	adc	r21, r1
 102:	50 93 e2 00 	sts	0x00E2, r21
 106:	40 93 e1 00 	sts	0x00E1, r20
 10a:	08 95       	ret

0000010c <__vector_1>:
void SoftBugON(void) {
  asm ("nop");
  //SetLed1//set bits
}
  ISR( INT0_vect )
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31

  //тахометр
  OldTimer = CurrentTimer;
 12e:	80 91 e3 00 	lds	r24, 0x00E3
 132:	90 91 e4 00 	lds	r25, 0x00E4
 136:	90 93 62 01 	sts	0x0162, r25
 13a:	80 93 61 01 	sts	0x0161, r24
  CurrentTimer = 0;
 13e:	10 92 e4 00 	sts	0x00E4, r1
 142:	10 92 e3 00 	sts	0x00E3, r1
  //конец тахометр

  if (Coffs[4] == 0) {//drebezg protection
 146:	80 91 de 00 	lds	r24, 0x00DE
 14a:	81 11       	cpse	r24, r1
 14c:	0a c0       	rjmp	.+20     	; 0x162 <__vector_1+0x56>
    Coffs[4] = 1;//set drebezg protection flag
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 de 00 	sts	0x00DE, r24

    if (TimeArray[def_ArrSize] == 0) //TODO: проверить пустое ли у нас оставшееся время.
 154:	80 91 5d 01 	lds	r24, 0x015D
 158:	81 11       	cpse	r24, r1
 15a:	02 c0       	rjmp	.+4      	; 0x160 <__vector_1+0x54>
    {
      LoadFuelTime();
 15c:	bf df       	rcall	.-130    	; 0xdc <LoadFuelTime>
 15e:	01 c0       	rjmp	.+2      	; 0x162 <__vector_1+0x56>
    } else
    {
      Low_FuelFlow_Exeption();
      LoadFuelTime();
 160:	bd df       	rcall	.-134    	; 0xdc <LoadFuelTime>
    /*
    //если стоит мало оборотов дернуть процедуру "стартовая порция", сбросить "мало оборотов"
	//посчитать через сколько начать брызгать
    //запустить таймер 1 на "брызг" (комперА и комперБ)
    */
  }
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_4>:
  ISR( TIMER2_OVF_vect )
  {
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
	  asm ("nop"); //прерывание вызывается вслед за timer_comp - в этом режиме работы таймера бессмысленно
 18e:	00 00       	nop
  }
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_3>:
  ISR( TIMER2_COMP_vect )
  {
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
	 
	  //Coffs[5]++;
    if (Coffs[4] == 1)
 1aa:	80 91 de 00 	lds	r24, 0x00DE
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <__vector_3+0x1c>
    {
      Coffs[4] = 0;
 1b2:	10 92 de 00 	sts	0x00DE, r1
    }

    if (CurrentTimer < MinOperationRPM) //TODO: инкремент переменной тахометра
 1b6:	80 91 e3 00 	lds	r24, 0x00E3
 1ba:	90 91 e4 00 	lds	r25, 0x00E4
 1be:	80 32       	cpi	r24, 0x20	; 32
 1c0:	2e e4       	ldi	r18, 0x4E	; 78
 1c2:	92 07       	cpc	r25, r18
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <__vector_3+0x36>
    {
      CurrentTimer++;
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 e4 00 	sts	0x00E4, r25
 1cc:	80 93 e3 00 	sts	0x00E3, r24
    } else
    {
      //todo: exeption низкие обороты работы двигателя
    }
	if (RemainingFlowTime)
 1d0:	80 91 e1 00 	lds	r24, 0x00E1
 1d4:	90 91 e2 00 	lds	r25, 0x00E2
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	29 f0       	breq	.+10     	; 0x1e6 <__vector_3+0x4c>
	{
	RemainingFlowTime--; //уменьшаем оставшееся время потока
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	90 93 e2 00 	sts	0x00E2, r25
 1e2:	80 93 e1 00 	sts	0x00E1, r24
	}

    //TODO: декримент значения "оставшиеся времея потока"
    //тут мы должны вертеть "время впрыска"
    //обрабатывать нужно в основном цикле. ?
  }
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_14>:
  ISR(ADC_vect)
  {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 RawADC =  ADCH;	  
 204:	85 b1       	in	r24, 0x05	; 5
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 d9 00 	sts	0x00D9, r25
 20c:	80 93 d8 00 	sts	0x00D8, r24
    if (ADCH < def_ArrSize) {
 210:	85 b1       	in	r24, 0x05	; 5
 212:	88 37       	cpi	r24, 0x78	; 120
 214:	18 f4       	brcc	.+6      	; 0x21c <__vector_14+0x26>
      DrocelPosition = ADCH;
 216:	85 b1       	in	r24, 0x05	; 5
 218:	80 93 63 01 	sts	0x0163, r24
    } else
    {
      //TODO:Exeption - too big drocel travel 
	  //todo:activate remaping
    }
  }
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:


  int main(void)
  {
 22a:	e0 e6       	ldi	r30, 0x60	; 96
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	88 ed       	ldi	r24, 0xD8	; 216
 230:	90 e0       	ldi	r25, 0x00	; 0

    unsigned char LocalCounter = 0;
    for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
    {
      CorrectionArray[LocalCounter] = 1; // clear correction array
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	21 93       	st	Z+, r18

  int main(void)
  {

    unsigned char LocalCounter = 0;
    for (LocalCounter = 0; LocalCounter < def_ArrSize; LocalCounter++)
 236:	e8 17       	cp	r30, r24
 238:	f9 07       	cpc	r31, r25
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0xa>
    {
      CorrectionArray[LocalCounter] = 1; // clear correction array
    }

Coffs[0] = 0;
 23c:	10 92 da 00 	sts	0x00DA, r1
    eeprom_to_mem();//load data arrays into memory
 240:	0e df       	rcall	.-484    	; 0x5e <eeprom_to_mem>
    Timer2Setup(); //setup timer2 //считает отрезки по 25 микросекунд
 242:	25 df       	rcall	.-438    	; 0x8e <Timer2Setup>
    ADCSetup();
 244:	33 df       	rcall	.-410    	; 0xac <ADCSetup>
    IntExtSetup();
 246:	37 df       	rcall	.-402    	; 0xb6 <IntExtSetup>
PortSetup();
 248:	3d df       	rcall	.-390    	; 0xc4 <PortSetup>
sei();
 24a:	78 94       	sei
    while (1)
    {

      //TODO пересчет мс в обороты оборотов = (1000/мс)*60
      //currentRPM= 60000/CurrentTimer керренттаймер должен быть в мс
	  SwitchLed2
 24c:	c0 e4       	ldi	r28, 0x40	; 64
		  SetLed4
	  }else {
	  ClearOut1
	  ClearLed4
	  }
      currentRPM = 2400000 / OldTimer;
 24e:	0f 2e       	mov	r0, r31
 250:	c1 2c       	mov	r12, r1
 252:	ff e9       	ldi	r31, 0x9F	; 159
 254:	df 2e       	mov	r13, r31
 256:	f4 e2       	ldi	r31, 0x24	; 36
 258:	ef 2e       	mov	r14, r31
 25a:	f1 2c       	mov	r15, r1
 25c:	f0 2d       	mov	r31, r0
    while (1)
    {

      //TODO пересчет мс в обороты оборотов = (1000/мс)*60
      //currentRPM= 60000/CurrentTimer керренттаймер должен быть в мс
	  SwitchLed2
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	8c 27       	eor	r24, r28
 262:	88 bb       	out	0x18, r24	; 24
	  if (RemainingFlowTime)
 264:	80 91 e1 00 	lds	r24, 0x00E1
 268:	90 91 e2 00 	lds	r25, 0x00E2
 26c:	89 2b       	or	r24, r25
 26e:	19 f0       	breq	.+6      	; 0x276 <main+0x4c>
	  {
		  SetOut1
 270:	c1 9a       	sbi	0x18, 1	; 24
		  SetLed4
 272:	c4 9a       	sbi	0x18, 4	; 24
 274:	02 c0       	rjmp	.+4      	; 0x27a <main+0x50>
	  }else {
	  ClearOut1
 276:	c1 98       	cbi	0x18, 1	; 24
	  ClearLed4
 278:	c4 98       	cbi	0x18, 4	; 24
	  }
      currentRPM = 2400000 / OldTimer;
 27a:	20 91 61 01 	lds	r18, 0x0161
 27e:	30 91 62 01 	lds	r19, 0x0162
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	09 d0       	rcall	.+18     	; 0x29e <__divmodsi4>
 28c:	20 93 5d 01 	sts	0x015D, r18
 290:	30 93 5e 01 	sts	0x015E, r19
 294:	40 93 5f 01 	sts	0x015F, r20
 298:	50 93 60 01 	sts	0x0160, r21

      //TODO: дрыгать форсункой в зависимости от того что у нас с "оставшимся временем потока"
      //TODO:: Please write your application code
	  
    }
 29c:	e0 cf       	rjmp	.-64     	; 0x25e <main+0x34>

0000029e <__divmodsi4>:
 29e:	05 2e       	mov	r0, r21
 2a0:	97 fb       	bst	r25, 7
 2a2:	16 f4       	brtc	.+4      	; 0x2a8 <__divmodsi4+0xa>
 2a4:	00 94       	com	r0
 2a6:	0f d0       	rcall	.+30     	; 0x2c6 <__negsi2>
 2a8:	57 fd       	sbrc	r21, 7
 2aa:	05 d0       	rcall	.+10     	; 0x2b6 <__divmodsi4_neg2>
 2ac:	14 d0       	rcall	.+40     	; 0x2d6 <__udivmodsi4>
 2ae:	07 fc       	sbrc	r0, 7
 2b0:	02 d0       	rcall	.+4      	; 0x2b6 <__divmodsi4_neg2>
 2b2:	46 f4       	brtc	.+16     	; 0x2c4 <__divmodsi4_exit>
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <__negsi2>

000002b6 <__divmodsi4_neg2>:
 2b6:	50 95       	com	r21
 2b8:	40 95       	com	r20
 2ba:	30 95       	com	r19
 2bc:	21 95       	neg	r18
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	4f 4f       	sbci	r20, 0xFF	; 255
 2c2:	5f 4f       	sbci	r21, 0xFF	; 255

000002c4 <__divmodsi4_exit>:
 2c4:	08 95       	ret

000002c6 <__negsi2>:
 2c6:	90 95       	com	r25
 2c8:	80 95       	com	r24
 2ca:	70 95       	com	r23
 2cc:	61 95       	neg	r22
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255
 2d0:	8f 4f       	sbci	r24, 0xFF	; 255
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	08 95       	ret

000002d6 <__udivmodsi4>:
 2d6:	a1 e2       	ldi	r26, 0x21	; 33
 2d8:	1a 2e       	mov	r1, r26
 2da:	aa 1b       	sub	r26, r26
 2dc:	bb 1b       	sub	r27, r27
 2de:	fd 01       	movw	r30, r26
 2e0:	0d c0       	rjmp	.+26     	; 0x2fc <__udivmodsi4_ep>

000002e2 <__udivmodsi4_loop>:
 2e2:	aa 1f       	adc	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	ee 1f       	adc	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	a2 17       	cp	r26, r18
 2ec:	b3 07       	cpc	r27, r19
 2ee:	e4 07       	cpc	r30, r20
 2f0:	f5 07       	cpc	r31, r21
 2f2:	20 f0       	brcs	.+8      	; 0x2fc <__udivmodsi4_ep>
 2f4:	a2 1b       	sub	r26, r18
 2f6:	b3 0b       	sbc	r27, r19
 2f8:	e4 0b       	sbc	r30, r20
 2fa:	f5 0b       	sbc	r31, r21

000002fc <__udivmodsi4_ep>:
 2fc:	66 1f       	adc	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	1a 94       	dec	r1
 306:	69 f7       	brne	.-38     	; 0x2e2 <__udivmodsi4_loop>
 308:	60 95       	com	r22
 30a:	70 95       	com	r23
 30c:	80 95       	com	r24
 30e:	90 95       	com	r25
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	bd 01       	movw	r22, r26
 316:	cf 01       	movw	r24, r30
 318:	08 95       	ret

0000031a <__eerd_byte_m8>:
 31a:	e1 99       	sbic	0x1c, 1	; 28
 31c:	fe cf       	rjmp	.-4      	; 0x31a <__eerd_byte_m8>
 31e:	9f bb       	out	0x1f, r25	; 31
 320:	8e bb       	out	0x1e, r24	; 30
 322:	e0 9a       	sbi	0x1c, 0	; 28
 324:	99 27       	eor	r25, r25
 326:	8d b3       	in	r24, 0x1d	; 29
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
