
Light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000840  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000343  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000aa  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000028a  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b5  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000022  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e9       	ldi	r30, 0x92	; 146
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	19 c0       	rjmp	.+50     	; 0x8e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
int main(void)
{
char butt, bt1;

	//настройка портов для кнопок
	DDRC = 0b00110000;  //kb port
  5e:	80 e3       	ldi	r24, 0x30	; 48
  60:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00001111; //kb port
  62:	8f e0       	ldi	r24, 0x0F	; 15
  64:	85 bb       	out	0x15, r24	; 21

	//настройка портов для кнопок
	DDRD = 0b11000000;  //kb port
  66:	80 ec       	ldi	r24, 0xC0	; 192
  68:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000; //kb port
  6a:	12 ba       	out	0x12, r1	; 18
    {	
		butt = 	PINC&0b00000111;	
		bt1 = butt;
		switch (butt)
			{
				case 0b00000110: PORTD = 0b10000000;break;
  6c:	20 e8       	ldi	r18, 0x80	; 128
				case 0b00000101: PORTD = 0b00000000;break;
				case 0b00000011: PORTD = 0b01000000;break;					
  6e:	90 e4       	ldi	r25, 0x40	; 64
	//DDRx 0=in 1=out
	//конец настройки портов

    while(1)
    {	
		butt = 	PINC&0b00000111;	
  70:	83 b3       	in	r24, 0x13	; 19
  72:	87 70       	andi	r24, 0x07	; 7
		bt1 = butt;
		switch (butt)
  74:	85 30       	cpi	r24, 0x05	; 5
  76:	39 f0       	breq	.+14     	; 0x86 <main+0x28>
  78:	86 30       	cpi	r24, 0x06	; 6
  7a:	19 f0       	breq	.+6      	; 0x82 <main+0x24>
  7c:	83 30       	cpi	r24, 0x03	; 3
  7e:	c1 f7       	brne	.-16     	; 0x70 <main+0x12>
  80:	04 c0       	rjmp	.+8      	; 0x8a <main+0x2c>
			{
				case 0b00000110: PORTD = 0b10000000;break;
  82:	22 bb       	out	0x12, r18	; 18
  84:	f5 cf       	rjmp	.-22     	; 0x70 <main+0x12>
				case 0b00000101: PORTD = 0b00000000;break;
  86:	12 ba       	out	0x12, r1	; 18
  88:	f3 cf       	rjmp	.-26     	; 0x70 <main+0x12>
				case 0b00000011: PORTD = 0b01000000;break;					
  8a:	92 bb       	out	0x12, r25	; 18
  8c:	f1 cf       	rjmp	.-30     	; 0x70 <main+0x12>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
