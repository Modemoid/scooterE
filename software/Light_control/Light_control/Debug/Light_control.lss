
Light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004ca  0000055e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800062  00800062  00000560  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000657  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e5  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ed  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ff  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  00001c6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	75 c1       	rjmp	.+746    	; 0x2f8 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	13 c1       	rjmp	.+550    	; 0x238 <__vector_8>
  12:	93 c0       	rjmp	.+294    	; 0x13a <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	fb c0       	rjmp	.+502    	; 0x214 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__vector_17>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ec       	ldi	r30, 0xCA	; 202
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 37       	cpi	r26, 0x72	; 114
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ab d1       	rcall	.+854    	; 0x3b0 <main>
  5a:	35 c2       	rjmp	.+1130   	; 0x4c6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_17>:

//статус модуля
volatile static uint8_t twiState = TW_NO_INFO;

ISR(TWI_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	ef 93       	push	r30
  6e:	ff 93       	push	r31
	
//берем статусный код модуля
uint8_t TWIstatus = TWSR & 0xF8;
  70:	81 b1       	in	r24, 0x01	; 1
  72:	88 7f       	andi	r24, 0xF8	; 248
//обрабатываем его
switch (TWIstatus)
  74:	88 34       	cpi	r24, 0x48	; 72
  76:	09 f4       	brne	.+2      	; 0x7a <__vector_17+0x1c>
  78:	44 c0       	rjmp	.+136    	; 0x102 <__vector_17+0xa4>
  7a:	89 34       	cpi	r24, 0x49	; 73
  7c:	40 f4       	brcc	.+16     	; 0x8e <__vector_17+0x30>
  7e:	80 32       	cpi	r24, 0x20	; 32
  80:	09 f4       	brne	.+2      	; 0x84 <__vector_17+0x26>
  82:	3f c0       	rjmp	.+126    	; 0x102 <__vector_17+0xa4>
  84:	80 33       	cpi	r24, 0x30	; 48
  86:	e9 f1       	breq	.+122    	; 0x102 <__vector_17+0xa4>
  88:	88 23       	and	r24, r24
  8a:	d9 f1       	breq	.+118    	; 0x102 <__vector_17+0xa4>
  8c:	3f c0       	rjmp	.+126    	; 0x10c <__vector_17+0xae>
  8e:	88 3b       	cpi	r24, 0xB8	; 184
  90:	f1 f0       	breq	.+60     	; 0xce <__vector_17+0x70>
  92:	89 3b       	cpi	r24, 0xB9	; 185
  94:	18 f4       	brcc	.+6      	; 0x9c <__vector_17+0x3e>
  96:	88 3a       	cpi	r24, 0xA8	; 168
  98:	c9 f5       	brne	.+114    	; 0x10c <__vector_17+0xae>
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <__vector_17+0x48>
  9c:	80 3c       	cpi	r24, 0xC0	; 192
  9e:	61 f1       	breq	.+88     	; 0xf8 <__vector_17+0x9a>
  a0:	88 3c       	cpi	r24, 0xC8	; 200
  a2:	a1 f5       	brne	.+104    	; 0x10c <__vector_17+0xae>
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__vector_17+0x9a>
{
	/*дальше коды для слейва*/
	case TW_ST_SLA_ACK: //0xA8 SLA+R received, ACK returned  нам какой то другой мастер по имени обращается и просить ему передать байтиков.
			 //and load first data
			 
			SetLed1
  a6:	c0 9a       	sbi	0x18, 0	; 24
			i2c_Index = 0;
				i2c_Buffer[0] = 0xAA;
  a8:	8a ea       	ldi	r24, 0xAA	; 170
  aa:	80 93 6b 00 	sts	0x006B, r24
				i2c_Buffer[1] = 0x55;
  ae:	95 e5       	ldi	r25, 0x55	; 85
  b0:	90 93 6c 00 	sts	0x006C, r25
				i2c_Buffer[2] = 0xFF;
  b4:	9f ef       	ldi	r25, 0xFF	; 255
  b6:	90 93 6d 00 	sts	0x006D, r25
				i2c_Buffer[3] = 0x00;
  ba:	10 92 6e 00 	sts	0x006E, r1
				TWDR = i2c_Buffer[i2c_Index++];
  be:	83 b9       	out	0x03, r24	; 3
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 6a 00 	sts	0x006A, r24
				TWCR|= (0<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  c6:	86 b7       	in	r24, 0x36	; 54
  c8:	85 64       	ori	r24, 0x45	; 69
  ca:	86 bf       	out	0x36, r24	; 54
				break;
  cc:	21 c0       	rjmp	.+66     	; 0x110 <__vector_17+0xb2>
	case TW_ST_DATA_ACK: //Send Byte Receive ACK Ну дали мы ему байт. Он нам ACK. А мы тем временем думаем слать ему еще один (последний) и говорить «иди NACK». Или же у нас дофига их и можно еще пообщаться.	
			SetLed2
  ce:	c1 9a       	sbi	0x18, 1	; 24
			if (i2c_Index < i2cBuffSize)
  d0:	80 91 6a 00 	lds	r24, 0x006A
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	68 f4       	brcc	.+26     	; 0xf2 <__vector_17+0x94>
			{
			TWDR = i2c_Buffer[i2c_Index++];
  d8:	e8 2f       	mov	r30, r24
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	e5 59       	subi	r30, 0x95	; 149
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	90 81       	ld	r25, Z
  e2:	93 b9       	out	0x03, r25	; 3
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 6a 00 	sts	0x006A, r24
			TWCR|= (0<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  ea:	86 b7       	in	r24, 0x36	; 54
  ec:	85 64       	ori	r24, 0x45	; 69
  ee:	86 bf       	out	0x36, r24	; 54
  f0:	0f c0       	rjmp	.+30     	; 0x110 <__vector_17+0xb2>
			//LED_PORT|= 1<<LED4; //на запись
			}
			else 
			{
				TWCR|= (0<<TWINT);
  f2:	86 b7       	in	r24, 0x36	; 54
  f4:	86 bf       	out	0x36, r24	; 54
  f6:	0c c0       	rjmp	.+24     	; 0x110 <__vector_17+0xb2>
			break;
	case TW_ST_DATA_NACK: //влетаю сюда - что делать еще не азобрался, хотя вроде все правильно.
			//SetLed3
	case TW_ST_LAST_DATA:
			//SetLed4
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  f8:	84 ec       	ldi	r24, 0xC4	; 196
  fa:	86 bf       	out	0x36, r24	; 54
			i2c_Index = 0;
  fc:	10 92 6a 00 	sts	0x006A, r1
			break;
 100:	07 c0       	rjmp	.+14     	; 0x110 <__vector_17+0xb2>
	case TW_MR_SLA_NACK:
	case TW_MT_DATA_NACK:
	
	case TW_BUS_ERROR:
		//сохраняем статусный код
		twiState = TWIstatus;
 102:	80 93 60 00 	sts	0x0060, r24
		//запрещаем прерывания модуля
		TWCR = (1<<TWEN)|(0<<TWIE);
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	86 bf       	out	0x36, r24	; 54
		break;
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__vector_17+0xb2>
	default:
			//сохраняем статусный код
			twiState = TWIstatus;
 10c:	80 93 60 00 	sts	0x0060, r24

	}
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <Init_Slave_i2c>:

void Init_Slave_i2c(void)				// Настройка режима слейва (если нужно)
{
	//LED_PORT|= 1<<LED3; //set
	TWAR = i2c_MasterAddress;					// Внесем в регистр свой адрес, на который будем отзываться.
 122:	80 ef       	ldi	r24, 0xF0	; 240
 124:	82 b9       	out	0x02, r24	; 2
	// 1 в нулевом бите означает, что мы отзываемся на широковещательные пакеты
	//SlaveOutFunc = Addr;						// Присвоим указателю выхода по слейву функцию выхода
	// TWCR = (1<<TWEN)|(1<<TWEA)|(1<<TWIE);
	TWBR=32;// Bit Rate: 100,000 kHz @8MHz
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	80 b9       	out	0x00, r24	; 0
	
	TWCR = 	0<<TWSTA|
 12a:	85 e4       	ldi	r24, 0x45	; 69
 12c:	86 bf       	out	0x36, r24	; 54
			0<<TWINT|
			1<<TWEA|
			1<<TWEN|
			1<<TWIE;							// Включаем агрегат и начинаем слушать шину.

}
 12e:	08 95       	ret

00000130 <Init_Debug_Led>:

#ifdef DEBUG_LEDS
void (Init_Debug_Led)(void)
{
	LED_DDR|= (1<<LED1)|(1<<LED2)|(1<<LED3)|(1<<LED4);     //Led port
 130:	87 b3       	in	r24, 0x17	; 23
 132:	8f 60       	ori	r24, 0x0F	; 15
 134:	87 bb       	out	0x17, r24	; 23
	LED_PORT&= ~(1<<LED1)|(1<<LED2)|(1<<LED3)|(1<<LED4); //Led port
 136:	c0 98       	cbi	0x18, 0	; 24

}
 138:	08 95       	ret

0000013a <__vector_9>:
char adc7,adcstate=0; //For ADC ch6 vector
#endif

//End of globa var
ISR(TIMER0_OVF_vect) //used for strobe //ok. work
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
	  }

#endif

  #ifdef Strobe_Bink //ok. work
 	 if (Strobe_on)
 14a:	80 91 66 00 	lds	r24, 0x0066
 14e:	88 23       	and	r24, r24
 150:	09 f4       	brne	.+2      	; 0x154 <__vector_9+0x1a>
 152:	58 c0       	rjmp	.+176    	; 0x204 <__vector_9+0xca>
	  {
		  Strobe_on++;
 154:	98 2f       	mov	r25, r24
 156:	9f 5f       	subi	r25, 0xFF	; 255
 158:	90 93 66 00 	sts	0x0066, r25
		  
		 if (Strobe_on < Strobe_TIME && Strobe_on > (Strobe_TIME/4+Strobe_TIME/2+Strobe_TIME/8)) //128 - 112
 15c:	28 2f       	mov	r18, r24
 15e:	20 57       	subi	r18, 0x70	; 112
 160:	2f 30       	cpi	r18, 0x0F	; 15
 162:	28 f4       	brcc	.+10     	; 0x16e <__vector_9+0x34>
		 {
				 	 OutPort &= 0b11011111;
 164:	20 91 71 00 	lds	r18, 0x0071
 168:	2f 7d       	andi	r18, 0xDF	; 223
 16a:	20 93 71 00 	sts	0x0071, r18
		 }
		 if (Strobe_on < (Strobe_TIME/4+Strobe_TIME/2+Strobe_TIME/8) && Strobe_on > (Strobe_TIME/2+Strobe_TIME/4)) //112-96
 16e:	28 2f       	mov	r18, r24
 170:	20 56       	subi	r18, 0x60	; 96
 172:	2f 30       	cpi	r18, 0x0F	; 15
 174:	28 f4       	brcc	.+10     	; 0x180 <__vector_9+0x46>
		 {
			 	 	 OutPort |= 0b00100000;
 176:	20 91 71 00 	lds	r18, 0x0071
 17a:	20 62       	ori	r18, 0x20	; 32
 17c:	20 93 71 00 	sts	0x0071, r18
		 }
		 if (Strobe_on < (Strobe_TIME/2+Strobe_TIME/4) && Strobe_on > (Strobe_TIME/2) ) //96-64
 180:	28 2f       	mov	r18, r24
 182:	20 54       	subi	r18, 0x40	; 64
 184:	2f 31       	cpi	r18, 0x1F	; 31
 186:	28 f4       	brcc	.+10     	; 0x192 <__vector_9+0x58>
		 {
			 OutPort &= 0b11011111;
 188:	20 91 71 00 	lds	r18, 0x0071
 18c:	2f 7d       	andi	r18, 0xDF	; 223
 18e:	20 93 71 00 	sts	0x0071, r18
		 }		
		 if (Strobe_on < Strobe_TIME/2 && Strobe_on > (Strobe_TIME/4+Strobe_TIME/8)) //64-48
 192:	28 2f       	mov	r18, r24
 194:	20 53       	subi	r18, 0x30	; 48
 196:	2f 30       	cpi	r18, 0x0F	; 15
 198:	28 f4       	brcc	.+10     	; 0x1a4 <__vector_9+0x6a>
		 {
			 	 	 OutPort |= 0b00100000;
 19a:	20 91 71 00 	lds	r18, 0x0071
 19e:	20 62       	ori	r18, 0x20	; 32
 1a0:	20 93 71 00 	sts	0x0071, r18
		 }
		 if (Strobe_on < (Strobe_TIME/4+Strobe_TIME/8) && Strobe_on > (Strobe_TIME/4) ) //48-32
 1a4:	28 2f       	mov	r18, r24
 1a6:	20 52       	subi	r18, 0x20	; 32
 1a8:	2f 30       	cpi	r18, 0x0F	; 15
 1aa:	28 f4       	brcc	.+10     	; 0x1b6 <__vector_9+0x7c>
		 {
			 OutPort &= 0b11011111;
 1ac:	20 91 71 00 	lds	r18, 0x0071
 1b0:	2f 7d       	andi	r18, 0xDF	; 223
 1b2:	20 93 71 00 	sts	0x0071, r18
		 }		
		 if (Strobe_on < Strobe_TIME/4 && Strobe_on > (Strobe_TIME/8) )//32-16
 1b6:	28 2f       	mov	r18, r24
 1b8:	20 51       	subi	r18, 0x10	; 16
 1ba:	2f 30       	cpi	r18, 0x0F	; 15
 1bc:	28 f4       	brcc	.+10     	; 0x1c8 <__vector_9+0x8e>
		 {
			 	 	 OutPort |= 0b00100000;
 1be:	20 91 71 00 	lds	r18, 0x0071
 1c2:	20 62       	ori	r18, 0x20	; 32
 1c4:	20 93 71 00 	sts	0x0071, r18
		 }
		 if (Strobe_on < (Strobe_TIME/8) && Strobe_on > (Strobe_TIME/16) ) //16-8
 1c8:	88 50       	subi	r24, 0x08	; 8
 1ca:	87 30       	cpi	r24, 0x07	; 7
 1cc:	28 f4       	brcc	.+10     	; 0x1d8 <__vector_9+0x9e>
		 {
			 OutPort &= 0b11011111;
 1ce:	80 91 71 00 	lds	r24, 0x0071
 1d2:	8f 7d       	andi	r24, 0xDF	; 223
 1d4:	80 93 71 00 	sts	0x0071, r24
		 }
		 if (Strobe_on < Strobe_TIME/16) //8-0
 1d8:	98 30       	cpi	r25, 0x08	; 8
 1da:	28 f4       	brcc	.+10     	; 0x1e6 <__vector_9+0xac>
		 {
			 OutPort |= 0b00100000;
 1dc:	80 91 71 00 	lds	r24, 0x0071
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	80 93 71 00 	sts	0x0071, r24
		 }
		 if (Strobe_on > Strobe_TIME) //strobe turn off
 1e6:	91 38       	cpi	r25, 0x81	; 129
 1e8:	38 f0       	brcs	.+14     	; 0x1f8 <__vector_9+0xbe>
		 {
			
			 Strobe_on = 0;
 1ea:	10 92 66 00 	sts	0x0066, r1
			  OutPort &= 0b11011111;
 1ee:	80 91 71 00 	lds	r24, 0x0071
 1f2:	8f 7d       	andi	r24, 0xDF	; 223
 1f4:	80 93 71 00 	sts	0x0071, r24
		 }
		
	  
 	 }
  #endif
  	if (Strobe_on > Strobe_TIME)
 1f8:	80 91 66 00 	lds	r24, 0x0066
 1fc:	81 38       	cpi	r24, 0x81	; 129
 1fe:	10 f0       	brcs	.+4      	; 0x204 <__vector_9+0xca>
  	{
	  	Strobe_on = 0;
 200:	10 92 66 00 	sts	0x0066, r1
  	}
} 
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_14>:
ISR(ADC_vect) //buttons 
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
#ifndef adc7Use	
	adc6 = ADCL;
 220:	84 b1       	in	r24, 0x04	; 4
 222:	80 93 6f 00 	sts	0x006F, r24
	adc6 = ADCH;
 226:	85 b1       	in	r24, 0x05	; 5
 228:	80 93 6f 00 	sts	0x006F, r24
	adcstate = 0;
	ADCSRA = (1<<ADSC);
	}
#endif	

}
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
	#ifdef TurnBlinkTime03s 
	// Reinitialize Timer1 value /0,3c
	TCNT1H=0x6D84 >> 8;
 246:	8d e6       	ldi	r24, 0x6D	; 109
 248:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x6D84 & 0xff;
 24a:	84 e8       	ldi	r24, 0x84	; 132
 24c:	8c bd       	out	0x2c, r24	; 44
	// Reinitialize Timer1 value /0,249c
	TCNT1H=0xB403 >> 8;
	TCNT1L=0xB403 & 0xff;
	#endif

	if (T1temp == 0)
 24e:	80 91 62 00 	lds	r24, 0x0062
 252:	88 23       	and	r24, r24
 254:	29 f5       	brne	.+74     	; 0x2a0 <__vector_8+0x68>
	{
		if (turnOn == 0b00000001 )
 256:	80 91 63 00 	lds	r24, 0x0063
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	31 f4       	brne	.+12     	; 0x26a <__vector_8+0x32>
		{
			OutPort |=0b10000000;
 25e:	90 91 71 00 	lds	r25, 0x0071
 262:	90 68       	ori	r25, 0x80	; 128
 264:	90 93 71 00 	sts	0x0071, r25
 268:	10 c0       	rjmp	.+32     	; 0x28a <__vector_8+0x52>
		}
		if (turnOn == 0b00000010)
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	31 f4       	brne	.+12     	; 0x27a <__vector_8+0x42>
		{
			OutPort |=0b01000000;
 26e:	80 91 71 00 	lds	r24, 0x0071
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 93 71 00 	sts	0x0071, r24
 278:	0f c0       	rjmp	.+30     	; 0x298 <__vector_8+0x60>
		}
		if (turnOn == 0b00000011)
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	31 f4       	brne	.+12     	; 0x28a <__vector_8+0x52>
		{
			OutPort |= 0b11000000;
 27e:	80 91 71 00 	lds	r24, 0x0071
 282:	80 6c       	ori	r24, 0xC0	; 192
 284:	80 93 71 00 	sts	0x0071, r24
 288:	07 c0       	rjmp	.+14     	; 0x298 <__vector_8+0x60>
		}
		if (turnOn == 0b00000000 )
 28a:	88 23       	and	r24, r24
 28c:	29 f4       	brne	.+10     	; 0x298 <__vector_8+0x60>
		{
			OutPort &= 0b00111111;
 28e:	80 91 71 00 	lds	r24, 0x0071
 292:	8f 73       	andi	r24, 0x3F	; 63
 294:	80 93 71 00 	sts	0x0071, r24
		}
		T1temp = 1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 62 00 	sts	0x0062, r24
 29e:	25 c0       	rjmp	.+74     	; 0x2ea <__vector_8+0xb2>
	}
	else if (T1temp == 1)
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	19 f5       	brne	.+70     	; 0x2ea <__vector_8+0xb2>
	{
		if (turnOn == 0b00000001 )
 2a4:	80 91 63 00 	lds	r24, 0x0063
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	31 f4       	brne	.+12     	; 0x2b8 <__vector_8+0x80>
		{
			OutPort &=0b01111111;
 2ac:	90 91 71 00 	lds	r25, 0x0071
 2b0:	9f 77       	andi	r25, 0x7F	; 127
 2b2:	90 93 71 00 	sts	0x0071, r25
 2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <__vector_8+0xa0>
		}
		if (turnOn == 0b00000010)
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	31 f4       	brne	.+12     	; 0x2c8 <__vector_8+0x90>
		{
			OutPort &=0b10111111;
 2bc:	80 91 71 00 	lds	r24, 0x0071
 2c0:	8f 7b       	andi	r24, 0xBF	; 191
 2c2:	80 93 71 00 	sts	0x0071, r24
 2c6:	0f c0       	rjmp	.+30     	; 0x2e6 <__vector_8+0xae>
		}
		if (turnOn == 0b00000011)
 2c8:	83 30       	cpi	r24, 0x03	; 3
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <__vector_8+0xa0>
		{
			OutPort &= 0b00111111;
 2cc:	80 91 71 00 	lds	r24, 0x0071
 2d0:	8f 73       	andi	r24, 0x3F	; 63
 2d2:	80 93 71 00 	sts	0x0071, r24
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <__vector_8+0xae>
		}
		if (turnOn == 0b00000000 )
 2d8:	88 23       	and	r24, r24
 2da:	29 f4       	brne	.+10     	; 0x2e6 <__vector_8+0xae>
		{
			OutPort &= 0b00111111;
 2dc:	80 91 71 00 	lds	r24, 0x0071
 2e0:	8f 73       	andi	r24, 0x3F	; 63
 2e2:	80 93 71 00 	sts	0x0071, r24
		}
		T1temp = 0;
 2e6:	10 92 62 00 	sts	0x0062, r1
	}
	
}
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__vector_6>:
ISR(TIMER1_COMPA_vect)//turn signal blink 
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
	
if (T1temp == 0)
 306:	80 91 62 00 	lds	r24, 0x0062
 30a:	88 23       	and	r24, r24
 30c:	29 f5       	brne	.+74     	; 0x358 <__vector_6+0x60>
{
	if (turnOn == 0b00000001 )
 30e:	80 91 63 00 	lds	r24, 0x0063
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	31 f4       	brne	.+12     	; 0x322 <__vector_6+0x2a>
	{
		OutPort |=0b10000000;
 316:	90 91 71 00 	lds	r25, 0x0071
 31a:	90 68       	ori	r25, 0x80	; 128
 31c:	90 93 71 00 	sts	0x0071, r25
 320:	10 c0       	rjmp	.+32     	; 0x342 <__vector_6+0x4a>
	}
	if (turnOn == 0b00000010)
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	31 f4       	brne	.+12     	; 0x332 <__vector_6+0x3a>
	{
		OutPort |=0b01000000;
 326:	80 91 71 00 	lds	r24, 0x0071
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	80 93 71 00 	sts	0x0071, r24
 330:	0f c0       	rjmp	.+30     	; 0x350 <__vector_6+0x58>
	}
	if (turnOn == 0b00000011)
 332:	83 30       	cpi	r24, 0x03	; 3
 334:	31 f4       	brne	.+12     	; 0x342 <__vector_6+0x4a>
	{
		OutPort |= 0b11000000;
 336:	80 91 71 00 	lds	r24, 0x0071
 33a:	80 6c       	ori	r24, 0xC0	; 192
 33c:	80 93 71 00 	sts	0x0071, r24
 340:	07 c0       	rjmp	.+14     	; 0x350 <__vector_6+0x58>
	}
	if (turnOn == 0b00000000 )
 342:	88 23       	and	r24, r24
 344:	29 f4       	brne	.+10     	; 0x350 <__vector_6+0x58>
	{
		 OutPort &= 0b00111111;
 346:	80 91 71 00 	lds	r24, 0x0071
 34a:	8f 73       	andi	r24, 0x3F	; 63
 34c:	80 93 71 00 	sts	0x0071, r24
	}
T1temp = 1;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 62 00 	sts	0x0062, r24
 356:	25 c0       	rjmp	.+74     	; 0x3a2 <__vector_6+0xaa>
}
else if (T1temp == 1)
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	19 f5       	brne	.+70     	; 0x3a2 <__vector_6+0xaa>
{
	if (turnOn == 0b00000001 )
 35c:	80 91 63 00 	lds	r24, 0x0063
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	31 f4       	brne	.+12     	; 0x370 <__vector_6+0x78>
	{
		OutPort &=0b01111111;
 364:	90 91 71 00 	lds	r25, 0x0071
 368:	9f 77       	andi	r25, 0x7F	; 127
 36a:	90 93 71 00 	sts	0x0071, r25
 36e:	10 c0       	rjmp	.+32     	; 0x390 <__vector_6+0x98>
	}
	if (turnOn == 0b00000010)
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	31 f4       	brne	.+12     	; 0x380 <__vector_6+0x88>
	{
		OutPort &=0b10111111;
 374:	80 91 71 00 	lds	r24, 0x0071
 378:	8f 7b       	andi	r24, 0xBF	; 191
 37a:	80 93 71 00 	sts	0x0071, r24
 37e:	0f c0       	rjmp	.+30     	; 0x39e <__vector_6+0xa6>
	}
	if (turnOn == 0b00000011)
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	31 f4       	brne	.+12     	; 0x390 <__vector_6+0x98>
	{
		OutPort &= 0b00111111;
 384:	80 91 71 00 	lds	r24, 0x0071
 388:	8f 73       	andi	r24, 0x3F	; 63
 38a:	80 93 71 00 	sts	0x0071, r24
 38e:	07 c0       	rjmp	.+14     	; 0x39e <__vector_6+0xa6>
	}
	if (turnOn == 0b00000000 )
 390:	88 23       	and	r24, r24
 392:	29 f4       	brne	.+10     	; 0x39e <__vector_6+0xa6>
	{
		OutPort &= 0b00111111;
 394:	80 91 71 00 	lds	r24, 0x0071
 398:	8f 73       	andi	r24, 0x3F	; 63
 39a:	80 93 71 00 	sts	0x0071, r24
	}
	T1temp = 0;
 39e:	10 92 62 00 	sts	0x0062, r1
}
}
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <main>:
{
	
unsigned char butt,butt1,swadc6;
//настройка 8бит таймера 
// Clock value: 31,250 kHz
TCCR0=(1<<CS02) | (0<<CS01) | (0<<CS00);// 1 переполнение = 0.08192 сек (8,192 мс)
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	83 bf       	out	0x33, r24	; 51
//TCCR0|=(1<<CS00)|(1<<CS01); // Тактировать с коэффициентом 64. 1 переполнение = 0.016384 сек #####1mhz
// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (1<<TOIE0);
 3b4:	85 e0       	ldi	r24, 0x05	; 5
 3b6:	89 bf       	out	0x39, r24	; 57
//TIMSK|=(1<<TOIE0)|(1<<OCIE1A); #####1mhz
//настройка 16 бит таймера 
// Clock value: 125,000 kHz
//ovf time = 0,52429c
TCCR1A|=(0<<COM1A0)|(0<<COM1A1)|(0<<COM1B0)|(0<<COM1B1)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(0<<WGM10);
 3b8:	8f b5       	in	r24, 0x2f	; 47
 3ba:	8f bd       	out	0x2f, r24	; 47
TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);//prescalar = 64
 3bc:	8e b5       	in	r24, 0x2e	; 46
 3be:	83 60       	ori	r24, 0x03	; 3
 3c0:	8e bd       	out	0x2e, r24	; 46
//TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);//prescalar = 8 #####1mhz

#ifdef TurnBlinkTime03s 
TCNT1H=0x6D;//0.3c
 3c2:	8d e6       	ldi	r24, 0x6D	; 109
 3c4:	8d bd       	out	0x2d, r24	; 45
TCNT1L=0x84;//0,3c
 3c6:	84 e8       	ldi	r24, 0x84	; 132
 3c8:	8c bd       	out	0x2c, r24	; 44
#ifdef TurnBlinkTime025s 
TCNT1H=0xB4;//0,249c
TCNT1L=0x03;//0,249c
#endif

Init_Slave_i2c();
 3ca:	ab de       	rcall	.-682    	; 0x122 <Init_Slave_i2c>

//OCR1A = 0x7A11; #####1mhz


	//настройка портов для кнопок
	DDRC = 0b00110000;  //kb port
 3cc:	80 e3       	ldi	r24, 0x30	; 48
 3ce:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00001111; //kb port
 3d0:	8f e0       	ldi	r24, 0x0F	; 15
 3d2:	85 bb       	out	0x15, r24	; 21

	//настройка портов 
	DDRD = 0b11111100;  //kb port
 3d4:	8c ef       	ldi	r24, 0xFC	; 252
 3d6:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000; //kb port
 3d8:	12 ba       	out	0x12, r1	; 18
	//PINx регистр чтения
	//PORTx 1=pullup(in)
	//DDRx 0=in 1=out
	LED_DDR|= (1<<LED1)|(1<<LED2)|(1<<LED3)|(1<<LED4);     //Led port
 3da:	87 b3       	in	r24, 0x17	; 23
 3dc:	8f 60       	ori	r24, 0x0F	; 15
 3de:	87 bb       	out	0x17, r24	; 23
	LED_PORT&= ~(1<<LED1)|(1<<LED2)|(1<<LED3)|(1<<LED4); //Led port
 3e0:	c0 98       	cbi	0x18, 0	; 24
	//конец настройки портов

#ifdef HeadLightControl
	//adc setup
	ADMUX = (0<<REFS0|0<<REFS1|1<<ADLAR|0<<MUX0|1<<MUX1|1<<MUX2|0<<MUX3);
 3e2:	86 e2       	ldi	r24, 0x26	; 38
 3e4:	87 b9       	out	0x07, r24	; 7
	//mux0-mux3 выбирать какой ацп 0-0<<MUX0|0<<MUX1|0<<MUX2|0<<MUX3 1-1<<MUX0|0<<MUX1|0<<MUX2|0<<MUX3
	//0<<MUX0|1<<MUX1|1<<MUX2|0<<MUX3 = ADC6
	//1<<MUX0|1<<MUX1|1<<MUX2|0<<MUX3 = ADC7
#ifndef adc7Use

	ADCSRA = (1<<ADEN|1<<ADSC|1<<ADFR|1<<ADIE|1<<ADPS0|1<<ADPS1|1<<ADPS2);
 3e6:	8f ee       	ldi	r24, 0xEF	; 239
 3e8:	86 b9       	out	0x06, r24	; 6
#endif
	//adcstate = 0;

#endif
#ifdef DayLightOnStart
OutPort |=0b00000100;
 3ea:	80 91 71 00 	lds	r24, 0x0071
 3ee:	84 60       	ori	r24, 0x04	; 4
OutPort &=0b11100111;
 3f0:	87 7e       	andi	r24, 0xE7	; 231
 3f2:	80 93 71 00 	sts	0x0071, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	8f e7       	ldi	r24, 0x7F	; 127
 3f8:	98 e3       	ldi	r25, 0x38	; 56
 3fa:	a1 e0       	ldi	r26, 0x01	; 1
 3fc:	81 50       	subi	r24, 0x01	; 1
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	a0 40       	sbci	r26, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x4c>
 404:	00 c0       	rjmp	.+0      	; 0x406 <main+0x56>
 406:	00 00       	nop
Init_Slave_i2c(i2c_MasterAddress);
	
//}
#endif
_delay_ms(50);
sei();//разрешаем прерывания глобально	
 408:	78 94       	sei
#endif
#ifdef Strobe //set strob_on if button pressed
	butt1 = 	PINC&0b00001000;
	if (!butt1) 
	{
		Strobe_on = 1;
 40a:	21 e0       	ldi	r18, 0x01	; 1
	AdcKey=1;
}

if (100>adc6 && adc6>60)
{
	AdcKey=2;
 40c:	42 e0       	ldi	r20, 0x02	; 2
}
if (150>adc6 && adc6>100)
{
	AdcKey=3;
 40e:	33 e0       	ldi	r19, 0x03	; 3
_delay_ms(50);
sei();//разрешаем прерывания глобально	
    while(1)
    {	
#ifdef TurnControl
		butt = 	PINC&0b00000111;
 410:	83 b3       	in	r24, 0x13	; 19
 412:	87 70       	andi	r24, 0x07	; 7
		
#ifdef TurnBlink
{
	switch (butt)
 414:	85 30       	cpi	r24, 0x05	; 5
 416:	59 f0       	breq	.+22     	; 0x42e <main+0x7e>
 418:	86 30       	cpi	r24, 0x06	; 6
 41a:	19 f0       	breq	.+6      	; 0x422 <main+0x72>
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	79 f4       	brne	.+30     	; 0x43e <main+0x8e>
 420:	09 c0       	rjmp	.+18     	; 0x434 <main+0x84>
	{
		case 0b00000110: turnOn |= 0b00000001;break;
 422:	80 91 63 00 	lds	r24, 0x0063
 426:	81 60       	ori	r24, 0x01	; 1
 428:	80 93 63 00 	sts	0x0063, r24
 42c:	08 c0       	rjmp	.+16     	; 0x43e <main+0x8e>
		case 0b00000101: turnOn = 0;break;
 42e:	10 92 63 00 	sts	0x0063, r1
 432:	05 c0       	rjmp	.+10     	; 0x43e <main+0x8e>
		case 0b00000011: turnOn |= 0b00000010;break;
 434:	80 91 63 00 	lds	r24, 0x0063
 438:	82 60       	ori	r24, 0x02	; 2
 43a:	80 93 63 00 	sts	0x0063, r24
			}
}
#endif*/
#endif
#ifdef Strobe //set strob_on if button pressed
	butt1 = 	PINC&0b00001000;
 43e:	83 b3       	in	r24, 0x13	; 19
	if (!butt1) 
 440:	83 fd       	sbrc	r24, 3
 442:	02 c0       	rjmp	.+4      	; 0x448 <main+0x98>
	{
		Strobe_on = 1;
 444:	20 93 66 00 	sts	0x0066, r18
{
	
}
#endif
#ifdef HeadLightControl
if (30>adc6 && adc6>5 )
 448:	80 91 6f 00 	lds	r24, 0x006F
 44c:	98 2f       	mov	r25, r24
 44e:	96 50       	subi	r25, 0x06	; 6
 450:	98 31       	cpi	r25, 0x18	; 24
 452:	10 f4       	brcc	.+4      	; 0x458 <main+0xa8>
{
	AdcKey=1;
 454:	20 93 64 00 	sts	0x0064, r18
}

if (100>adc6 && adc6>60)
 458:	98 2f       	mov	r25, r24
 45a:	9d 53       	subi	r25, 0x3D	; 61
 45c:	97 32       	cpi	r25, 0x27	; 39
 45e:	10 f4       	brcc	.+4      	; 0x464 <__stack+0x5>
{
	AdcKey=2;
 460:	40 93 64 00 	sts	0x0064, r20
}
if (150>adc6 && adc6>100)
 464:	98 2f       	mov	r25, r24
 466:	95 56       	subi	r25, 0x65	; 101
 468:	91 33       	cpi	r25, 0x31	; 49
 46a:	10 f4       	brcc	.+4      	; 0x470 <__stack+0x11>
{
	AdcKey=3;
 46c:	30 93 64 00 	sts	0x0064, r19
}
if (150<adc6)
 470:	87 39       	cpi	r24, 0x97	; 151
 472:	18 f0       	brcs	.+6      	; 0x47a <__stack+0x1b>
{
	AdcKey=0;
 474:	10 92 64 00 	sts	0x0064, r1
 478:	1c c0       	rjmp	.+56     	; 0x4b2 <__stack+0x53>

#endif

#ifdef HeadLight_Single_Beam
{
	switch (AdcKey)
 47a:	80 91 64 00 	lds	r24, 0x0064
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	59 f0       	breq	.+22     	; 0x498 <__stack+0x39>
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	81 f0       	breq	.+32     	; 0x4a6 <__stack+0x47>
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	a1 f4       	brne	.+40     	; 0x4b2 <__stack+0x53>
	{
		case 1:
		{

			OutPort |=0b00011000;
 48a:	80 91 71 00 	lds	r24, 0x0071
 48e:	88 61       	ori	r24, 0x18	; 24
			OutPort &=0b11111011;			
 490:	8b 7f       	andi	r24, 0xFB	; 251
 492:	80 93 71 00 	sts	0x0071, r24
			break;
 496:	0d c0       	rjmp	.+26     	; 0x4b2 <__stack+0x53>
		}
		case 2:
		{
			OutPort |=0b00001000;
 498:	80 91 71 00 	lds	r24, 0x0071
 49c:	88 60       	ori	r24, 0x08	; 8
			OutPort &=0b11101011;
 49e:	8b 7e       	andi	r24, 0xEB	; 235
 4a0:	80 93 71 00 	sts	0x0071, r24

			break;
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <__stack+0x53>
		}
		case 3:
		{
			OutPort |=0b00000100;
 4a6:	80 91 71 00 	lds	r24, 0x0071
 4aa:	84 60       	ori	r24, 0x04	; 4
			OutPort &=0b11100111;
 4ac:	87 7e       	andi	r24, 0xE7	; 231
 4ae:	80 93 71 00 	sts	0x0071, r24
 4b2:	af e5       	ldi	r26, 0x5F	; 95
 4b4:	ba ee       	ldi	r27, 0xEA	; 234
 4b6:	11 97       	sbiw	r26, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__stack+0x57>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__stack+0x5d>
 4bc:	00 00       	nop
#ifdef debounce_delay
_delay_ms(debounce_time);
#endif	

	
	PORTD = OutPort;	
 4be:	80 91 71 00 	lds	r24, 0x0071
 4c2:	82 bb       	out	0x12, r24	; 18
	//PORTB = turnOn;	
		
        //TODO:: Please write your application code 
    }
 4c4:	a5 cf       	rjmp	.-182    	; 0x410 <main+0x60>

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
