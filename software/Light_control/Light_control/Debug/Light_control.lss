
Light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000186  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000396  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d2  00000000  00000000  00000cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d8  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e1       	ldi	r30, 0x12	; 18
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	28 d0       	rcall	.+80     	; 0xaa <main>
  5a:	59 c0       	rjmp	.+178    	; 0x10e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_9>:
//gobal VAR
char OutPort; //for output port D (use only 6 end bit, 0 and 1 bit - UART now reserved for future options)
char Strobe_on = 0; //for strobe
//End of globa var
ISR(TIMER0_OVF_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
 #ifndef Strobe_Bink
	 if (Strobe_on)
  6c:	80 91 60 00 	lds	r24, 0x0060
  70:	88 23       	and	r24, r24
  72:	49 f0       	breq	.+18     	; 0x86 <__vector_9+0x28>
	 {
 	 OutPort |= 0b00100000;
  74:	90 91 61 00 	lds	r25, 0x0061
  78:	90 62       	ori	r25, 0x20	; 32
  7a:	90 93 61 00 	sts	0x0061, r25
	  Strobe_on++;
  7e:	8f 5f       	subi	r24, 0xFF	; 255
  80:	80 93 60 00 	sts	0x0060, r24
  84:	05 c0       	rjmp	.+10     	; 0x90 <__vector_9+0x32>
     }else {
	 OutPort &= 0b11011111;
  86:	80 91 61 00 	lds	r24, 0x0061
  8a:	8f 7d       	andi	r24, 0xDF	; 223
  8c:	80 93 61 00 	sts	0x0061, r24
	}
	if (Strobe_on > Strobe_TIME)
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	85 36       	cpi	r24, 0x65	; 101
  96:	10 f0       	brcs	.+4      	; 0x9c <__vector_9+0x3e>
	{
	Strobe_on = 0; 		
  98:	10 92 60 00 	sts	0x0060, r1
	}
#endif
}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <main>:



int main(void)
{
	sei();//разрешаем прерывания глобально
  aa:	78 94       	sei
char butt,butt1;
//настройка 8бит таймера 
TCCR0|=(1<<CS00)|(1<<CS01); // Тактировать с коэффициентом 64. 1 переполнение = 0.016384 сек
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	83 bf       	out	0x33, r24	; 51
TIMSK|=(1<<TOIE0);
  b2:	89 b7       	in	r24, 0x39	; 57
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	89 bf       	out	0x39, r24	; 57



	//настройка портов для кнопок
	DDRC = 0b00110000;  //kb port
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00001111; //kb port
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	85 bb       	out	0x15, r24	; 21

	//настройка портов для кнопок
	DDRD = 0b11100000;  //kb port
  c0:	80 ee       	ldi	r24, 0xE0	; 224
  c2:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000; //kb port
  c4:	12 ba       	out	0x12, r1	; 18
#endif
#ifdef Strobe
	butt1 = 	PINC&0b00001000;
	if (!butt1) 
	{
		Strobe_on = 1;
  c6:	91 e0       	ldi	r25, 0x01	; 1
	//конец настройки портов

    while(1)
    {	
#ifdef TurnControl
		butt = 	PINC&0b00000111;	
  c8:	83 b3       	in	r24, 0x13	; 19
  ca:	87 70       	andi	r24, 0x07	; 7
		switch (butt)
  cc:	85 30       	cpi	r24, 0x05	; 5
  ce:	59 f0       	breq	.+22     	; 0xe6 <main+0x3c>
  d0:	86 30       	cpi	r24, 0x06	; 6
  d2:	19 f0       	breq	.+6      	; 0xda <main+0x30>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 f4       	brne	.+36     	; 0xfc <main+0x52>
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <main+0x48>
			{
				case 0b00000110: OutPort |= 0b10000000;break;
  da:	80 91 61 00 	lds	r24, 0x0061
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 93 61 00 	sts	0x0061, r24
  e4:	0b c0       	rjmp	.+22     	; 0xfc <main+0x52>
				case 0b00000101: OutPort &= 0b00111111;break;
  e6:	80 91 61 00 	lds	r24, 0x0061
  ea:	8f 73       	andi	r24, 0x3F	; 63
  ec:	80 93 61 00 	sts	0x0061, r24
  f0:	05 c0       	rjmp	.+10     	; 0xfc <main+0x52>
				case 0b00000011: OutPort |= 0b01000000;break;					
  f2:	80 91 61 00 	lds	r24, 0x0061
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 93 61 00 	sts	0x0061, r24
				default: ;
			}
#endif
#ifdef Strobe
	butt1 = 	PINC&0b00001000;
  fc:	83 b3       	in	r24, 0x13	; 19
	if (!butt1) 
  fe:	83 fd       	sbrc	r24, 3
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x5c>
	{
		Strobe_on = 1;
 102:	90 93 60 00 	sts	0x0060, r25
#ifdef i2c_Comm


#endif
		
	PORTD = OutPort;		
 106:	80 91 61 00 	lds	r24, 0x0061
 10a:	82 bb       	out	0x12, r24	; 18
		
        //TODO:: Please write your application code 
    }
 10c:	dd cf       	rjmp	.-70     	; 0xc8 <main+0x1e>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
