
TermoStat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab5  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ee  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ad  00000000  00000000  00001245  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008bd  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ec e3       	ldi	r30, 0x3C	; 60
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	dd d0       	rcall	.+442    	; 0x1fe <main>
  44:	f9 c0       	rjmp	.+498    	; 0x238 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <dallas_write>:
		current_byte = identifier_bit / 8;
		current_bit = identifier_bit - (current_byte * 8);
		
		dallas_write(identifier->identifier[current_byte] & _BV(current_bit));
	}
}
  48:	81 11       	cpse	r24, r1
  4a:	0d c0       	rjmp	.+26     	; 0x66 <dallas_write+0x1e>
  4c:	8f b7       	in	r24, 0x3f	; 63
  4e:	f8 94       	cli

void dallas_write(uint8_t bit) {
	if (bit == 0x00) {
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
			// Configure the pin as an output.
			DALLAS_DDR |= _BV(DALLAS_PIN);
  50:	b8 9a       	sbi	0x17, 0	; 23
		
			// Pull the bus low.
			DALLAS_PORT &= ~_BV(DALLAS_PIN);
  52:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	9e e1       	ldi	r25, 0x1E	; 30
  56:	9a 95       	dec	r25
  58:	f1 f7       	brne	.-4      	; 0x56 <dallas_write+0xe>
		
			// Wait the required time.
			_delay_us(90);
		
			// Release the bus.
			DALLAS_PORT |= _BV(DALLAS_PIN);
  5a:	c0 9a       	sbi	0x18, 0	; 24
  5c:	9a e0       	ldi	r25, 0x0A	; 10
  5e:	9a 95       	dec	r25
  60:	f1 f7       	brne	.-4      	; 0x5e <dallas_write+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  62:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
  64:	08 95       	ret
			// Let the rest of the time slot expire.
			_delay_us(30);
		}
	}
	else {
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  66:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  68:	f8 94       	cli
			// Configure the pin as an output.
			DALLAS_DDR |= _BV(DALLAS_PIN);
  6a:	b8 9a       	sbi	0x17, 0	; 23
		
			// Pull the bus low.
			DALLAS_PORT &= ~_BV(DALLAS_PIN);
  6c:	c0 98       	cbi	0x18, 0	; 24
  6e:	93 e0       	ldi	r25, 0x03	; 3
  70:	9a 95       	dec	r25
  72:	f1 f7       	brne	.-4      	; 0x70 <dallas_write+0x28>
  74:	00 00       	nop
		
			// Wait the required time.
			_delay_us(10);
		
			// Release the bus.
			DALLAS_PORT |= _BV(DALLAS_PIN);
  76:	c0 9a       	sbi	0x18, 0	; 24
  78:	90 e1       	ldi	r25, 0x10	; 16
  7a:	9a 95       	dec	r25
  7c:	f1 f7       	brne	.-4      	; 0x7a <dallas_write+0x32>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <dallas_write+0x38>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  80:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
  82:	08 95       	ret

00000084 <dallas_read>:
}

uint8_t dallas_read(void) {
	uint8_t reply;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  84:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  86:	f8 94       	cli
		// Configure the pin as an output.
		DALLAS_DDR |= _BV(DALLAS_PIN);
  88:	b8 9a       	sbi	0x17, 0	; 23
	
		// Pull the bus low.
		DALLAS_PORT &= ~_BV(DALLAS_PIN);
  8a:	c0 98       	cbi	0x18, 0	; 24
  8c:	00 c0       	rjmp	.+0      	; 0x8e <dallas_read+0xa>
	
		// Wait the required time.
		_delay_us(2);
	
		// Configure as input.
		DALLAS_DDR &= ~_BV(DALLAS_PIN);
  8e:	b8 98       	cbi	0x17, 0	; 23
  90:	23 e0       	ldi	r18, 0x03	; 3
  92:	2a 95       	dec	r18
  94:	f1 f7       	brne	.-4      	; 0x92 <dallas_read+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <dallas_read+0x14>
		
		// Wait for a bit.
		_delay_us(11);
		
		if ((DALLAS_PORT_IN & _BV(DALLAS_PIN)) == 0x00) {
  98:	86 b3       	in	r24, 0x16	; 22
  9a:	2f e0       	ldi	r18, 0x0F	; 15
  9c:	2a 95       	dec	r18
  9e:	f1 f7       	brne	.-4      	; 0x9c <dallas_read+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <__stack+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  a2:	9f bf       	out	0x3f, r25	; 63
		// Let the rest of the time slot expire.
		_delay_us(47);
	}
	
	return reply;
}
  a4:	81 70       	andi	r24, 0x01	; 1
  a6:	08 95       	ret

000000a8 <dallas_reset>:
	uint8_t reply;
	
	// Reset the slave_reply variable.
	reply = 0x00;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  a8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  aa:	f8 94       	cli
	
		// Configure the pin as an output.
		DALLAS_DDR |= _BV(DALLAS_PIN);
  ac:	b8 9a       	sbi	0x17, 0	; 23
	
		// Pull the bus low.
		DALLAS_PORT &= ~_BV(DALLAS_PIN);
  ae:	c0 98       	cbi	0x18, 0	; 24
  b0:	26 ea       	ldi	r18, 0xA6	; 166
  b2:	2a 95       	dec	r18
  b4:	f1 f7       	brne	.-4      	; 0xb2 <dallas_reset+0xa>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <dallas_reset+0x10>
	
		// Wait the required time.
		_delay_us(500); // 500 uS
	
		// Switch to an input, enable the pin change interrupt, and wait.
		DALLAS_DDR &= ~_BV(DALLAS_PIN);
  b8:	b8 98       	cbi	0x17, 0	; 23
  ba:	87 e1       	ldi	r24, 0x17	; 23
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <dallas_reset+0x14>
  c0:	00 00       	nop
		
		_delay_us(70);
		
		if ((DALLAS_PORT_IN & _BV(DALLAS_PIN)) == 0x00) {
  c2:	86 b3       	in	r24, 0x16	; 22
  c4:	2c e8       	ldi	r18, 0x8C	; 140
  c6:	2a 95       	dec	r18
  c8:	f1 f7       	brne	.-4      	; 0xc6 <dallas_reset+0x1e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  ca:	9f bf       	out	0x3f, r25	; 63
  cc:	80 95       	com	r24
		
		_delay_us(420);
	}
	
	return reply;
}
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	08 95       	ret

000000d2 <dallas_write_byte>:

void dallas_write_byte(uint8_t byte) {
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	d8 2f       	mov	r29, r24
  d8:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t position;
	
	for (position = 0x00; position < 0x08; position++) {
		dallas_write(byte & 0x01);
  da:	8d 2f       	mov	r24, r29
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	b4 df       	rcall	.-152    	; 0x48 <dallas_write>
		
		byte = (byte >> 1);
  e0:	d6 95       	lsr	r29
  e2:	c1 50       	subi	r28, 0x01	; 1
}

void dallas_write_byte(uint8_t byte) {
	uint8_t position;
	
	for (position = 0x00; position < 0x08; position++) {
  e4:	d1 f7       	brne	.-12     	; 0xda <dallas_write_byte+0x8>
		dallas_write(byte & 0x01);
		
		byte = (byte >> 1);
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <dallas_discover_identifier>:

DALLAS_IDENTIFIER_LIST_t * get_identifier_list(void) {
	return &identifier_list;
}

static uint8_t dallas_discover_identifier(DALLAS_IDENTIFIER_t * current_identifier, DALLAS_IDENTIFIER_t * last_identifier) {
  ec:	8f 92       	push	r8
  ee:	9f 92       	push	r9
  f0:	af 92       	push	r10
  f2:	bf 92       	push	r11
  f4:	cf 92       	push	r12
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	7c 01       	movw	r14, r24
 102:	eb 01       	movw	r28, r22
	uint8_t identifier_diverged;
	
	identifier_diverged = 0x00;
	identifier_bit = 0x00;
	
	dallas_reset();
 104:	d1 df       	rcall	.-94     	; 0xa8 <dallas_reset>
	dallas_write_byte(SEARCH_ROM_COMMAND);
 106:	80 ef       	ldi	r24, 0xF0	; 240
 108:	e4 df       	rcall	.-56     	; 0xd2 <dallas_write_byte>
	uint8_t received_two_bits;
	uint8_t current_bit;
	uint8_t current_byte;
	uint8_t identifier_diverged;
	
	identifier_diverged = 0x00;
 10a:	a1 2c       	mov	r10, r1
	identifier_bit = 0x00;
	
	dallas_reset();
	dallas_write_byte(SEARCH_ROM_COMMAND);
	
	for (identifier_bit = 0; identifier_bit < DALLAS_NUM_IDENTIFIER_BITS; identifier_bit++) {
 10c:	10 e0       	ldi	r17, 0x00	; 0
			
			dallas_write(0x00);
		}
		else if (received_two_bits == 0x00) {
			if ((identifier_diverged == 0x00) && (last_identifier != 0x00)) {
				identifier_diverged = 0x01;
 10e:	cc 24       	eor	r12, r12
 110:	c3 94       	inc	r12
				
				if ((last_identifier->identifier[current_byte] & _BV(current_bit)) == 0x00) {
					// Then we choose 1.
					
					current_identifier->identifier[current_byte] += (1 << current_bit);
 112:	88 24       	eor	r8, r8
 114:	83 94       	inc	r8
 116:	91 2c       	mov	r9, r1
	
	dallas_reset();
	dallas_write_byte(SEARCH_ROM_COMMAND);
	
	for (identifier_bit = 0; identifier_bit < DALLAS_NUM_IDENTIFIER_BITS; identifier_bit++) {
		received_two_bits = (dallas_read() << 1);
 118:	b5 df       	rcall	.-150    	; 0x84 <dallas_read>
 11a:	b8 2e       	mov	r11, r24
 11c:	bb 0c       	add	r11, r11
		received_two_bits += dallas_read();
 11e:	b2 df       	rcall	.-156    	; 0x84 <dallas_read>
 120:	8b 0d       	add	r24, r11
		
		current_byte = identifier_bit / 8;
		current_bit = identifier_bit - (current_byte * 8);
 122:	21 2f       	mov	r18, r17
 124:	26 95       	lsr	r18
 126:	26 95       	lsr	r18
 128:	26 95       	lsr	r18
 12a:	91 2f       	mov	r25, r17
 12c:	97 70       	andi	r25, 0x07	; 7
		
		if (received_two_bits == 0x02) {
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	81 f4       	brne	.+32     	; 0x152 <dallas_discover_identifier+0x66>
			// All devices have a 1 at this position.
			
			current_identifier->identifier[current_byte] += (1 << current_bit);
 132:	f7 01       	movw	r30, r14
 134:	e2 0f       	add	r30, r18
 136:	f1 1d       	adc	r31, r1
 138:	94 01       	movw	r18, r8
 13a:	02 c0       	rjmp	.+4      	; 0x140 <dallas_discover_identifier+0x54>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	9a 95       	dec	r25
 142:	e2 f7       	brpl	.-8      	; 0x13c <dallas_discover_identifier+0x50>
 144:	c9 01       	movw	r24, r18
 146:	90 81       	ld	r25, Z
 148:	89 0f       	add	r24, r25
 14a:	80 83       	st	Z, r24
			
			dallas_write(0x01);
 14c:	8c 2d       	mov	r24, r12
 14e:	7c df       	rcall	.-264    	; 0x48 <dallas_write>
 150:	30 c0       	rjmp	.+96     	; 0x1b2 <dallas_discover_identifier+0xc6>
		}
		else if (received_two_bits == 0x01) {
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	19 f4       	brne	.+6      	; 0x15c <dallas_discover_identifier+0x70>
			// All devices have a 0 at this position.
			
			dallas_write(0x00);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	77 df       	rcall	.-274    	; 0x48 <dallas_write>
 15a:	2b c0       	rjmp	.+86     	; 0x1b2 <dallas_discover_identifier+0xc6>
		}
		else if (received_two_bits == 0x00) {
 15c:	81 11       	cpse	r24, r1
 15e:	32 c0       	rjmp	.+100    	; 0x1c4 <dallas_discover_identifier+0xd8>
			if ((identifier_diverged == 0x00) && (last_identifier != 0x00)) {
 160:	a1 10       	cpse	r10, r1
 162:	25 c0       	rjmp	.+74     	; 0x1ae <dallas_discover_identifier+0xc2>
 164:	20 97       	sbiw	r28, 0x00	; 0
 166:	19 f1       	breq	.+70     	; 0x1ae <dallas_discover_identifier+0xc2>
				identifier_diverged = 0x01;
				
				if ((last_identifier->identifier[current_byte] & _BV(current_bit)) == 0x00) {
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	fe 01       	movw	r30, r28
 16c:	e2 0f       	add	r30, r18
 16e:	f3 1f       	adc	r31, r19
 170:	40 81       	ld	r20, Z
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	09 2e       	mov	r0, r25
 176:	02 c0       	rjmp	.+4      	; 0x17c <dallas_discover_identifier+0x90>
 178:	55 95       	asr	r21
 17a:	47 95       	ror	r20
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <dallas_discover_identifier+0x8c>
 180:	40 fd       	sbrc	r20, 0
 182:	11 c0       	rjmp	.+34     	; 0x1a6 <dallas_discover_identifier+0xba>
					// Then we choose 1.
					
					current_identifier->identifier[current_byte] += (1 << current_bit);
 184:	f7 01       	movw	r30, r14
 186:	e2 0f       	add	r30, r18
 188:	f3 1f       	adc	r31, r19
 18a:	94 01       	movw	r18, r8
 18c:	02 c0       	rjmp	.+4      	; 0x192 <dallas_discover_identifier+0xa6>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	9a 95       	dec	r25
 194:	e2 f7       	brpl	.-8      	; 0x18e <dallas_discover_identifier+0xa2>
 196:	c9 01       	movw	r24, r18
 198:	90 81       	ld	r25, Z
 19a:	89 0f       	add	r24, r25
 19c:	80 83       	st	Z, r24
					
					dallas_write(0x01);
 19e:	8c 2d       	mov	r24, r12
 1a0:	53 df       	rcall	.-346    	; 0x48 <dallas_write>
			
			dallas_write(0x00);
		}
		else if (received_two_bits == 0x00) {
			if ((identifier_diverged == 0x00) && (last_identifier != 0x00)) {
				identifier_diverged = 0x01;
 1a2:	ac 2c       	mov	r10, r12
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <dallas_discover_identifier+0xc6>
					dallas_write(0x01);
				}
				else {
					// Otherwise 0.
					
					dallas_write(0x00);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	4f df       	rcall	.-354    	; 0x48 <dallas_write>
			
			dallas_write(0x00);
		}
		else if (received_two_bits == 0x00) {
			if ((identifier_diverged == 0x00) && (last_identifier != 0x00)) {
				identifier_diverged = 0x01;
 1aa:	ac 2c       	mov	r10, r12
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <dallas_discover_identifier+0xc6>
					dallas_write(0x00);
				}
			}
			else {
				// We'll go with 0.
				dallas_write(0x00);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	4b df       	rcall	.-362    	; 0x48 <dallas_write>
	identifier_bit = 0x00;
	
	dallas_reset();
	dallas_write_byte(SEARCH_ROM_COMMAND);
	
	for (identifier_bit = 0; identifier_bit < DALLAS_NUM_IDENTIFIER_BITS; identifier_bit++) {
 1b2:	1f 5f       	subi	r17, 0xFF	; 255
 1b4:	10 34       	cpi	r17, 0x40	; 64
 1b6:	09 f0       	breq	.+2      	; 0x1ba <dallas_discover_identifier+0xce>
 1b8:	af cf       	rjmp	.-162    	; 0x118 <dallas_discover_identifier+0x2c>
			// Error!
			return DALLAS_IDENTIFIER_SEARCH_ERROR;
		}
	}
	
	if (identifier_diverged == 0x00) {
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	aa 20       	and	r10, r10
 1be:	19 f0       	breq	.+6      	; 0x1c6 <dallas_discover_identifier+0xda>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <dallas_discover_identifier+0xda>
				dallas_write(0x00);
			}
		}
		else {
			// Error!
			return DALLAS_IDENTIFIER_SEARCH_ERROR;
 1c4:	82 e0       	ldi	r24, 0x02	; 2
		return DALLAS_IDENTIFIER_DONE;
	}
	else {
		return DALLAS_IDENTIFIER_NO_ERROR;
	}
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	cf 90       	pop	r12
 1d2:	bf 90       	pop	r11
 1d4:	af 90       	pop	r10
 1d6:	9f 90       	pop	r9
 1d8:	8f 90       	pop	r8
 1da:	08 95       	ret

000001dc <dallas_search_identifiers>:
	uint8_t current_device;
	uint8_t return_code;
	
	for (current_device = 0x00; current_device < DALLAS_NUM_DEVICES; current_device++) {
		if (current_device == 0x00) {
			return_code = dallas_discover_identifier(&identifier_list.identifiers[current_device], 0x00);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	82 e6       	ldi	r24, 0x62	; 98
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	83 df       	rcall	.-250    	; 0xec <dallas_discover_identifier>
		}
		else {
			return_code = dallas_discover_identifier(&identifier_list.identifiers[current_device], &identifier_list.identifiers[current_device-1]);
		}
		
		if (return_code == DALLAS_IDENTIFIER_DONE) {
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <dallas_search_identifiers+0x16>
			identifier_list.num_devices = current_device + 0x01;
 1ea:	80 93 6a 00 	sts	0x006A, r24
			return 0x00;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
		}
		else if (return_code == DALLAS_IDENTIFIER_SEARCH_ERROR) {
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	11 f4       	brne	.+4      	; 0x1fa <dallas_search_identifiers+0x1e>
			return 0x01;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
		}
	}
	
	return 0x02;
 1fa:	82 e0       	ldi	r24, 0x02	; 2
}
 1fc:	08 95       	ret

000001fe <main>:
char OneWireDev=5;

int main(void)
{
		// - Configure alarm pin
		ALARM_DDRReg |= ( 1 << ALARM_PIN );
 1fe:	bb 9a       	sbi	0x17, 3	; 23
		ALARM1_DDRReg |= ( 1 << ALARM1_PIN );
 200:	bc 9a       	sbi	0x17, 4	; 23
		// - Configure PWM pin
		Relay_DDRReg |= ( 1 << Relay_PIN );
 202:	b9 9a       	sbi	0x17, 1	; 23
		Relay1_DDRReg |= ( 1 << Relay1_PIN );
 204:	ba 9a       	sbi	0x17, 2	; 23
		
		
    while(1)
    {
		Alarm_On;
 206:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	86 e7       	ldi	r24, 0x76	; 118
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x10>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x1a>
 218:	00 00       	nop
		_delay_ms(50);
		Alarm_Off;
 21a:	c3 98       	cbi	0x18, 3	; 24
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	86 e7       	ldi	r24, 0x76	; 118
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x24>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x2e>
 22c:	00 00       	nop
		//dallas_drive_bus();
		_delay_ms(50);
		OneWireDev = dallas_reset();
 22e:	3c df       	rcall	.-392    	; 0xa8 <dallas_reset>
 230:	80 93 60 00 	sts	0x0060, r24
		 dallas_search_identifiers();
 234:	d3 df       	rcall	.-90     	; 0x1dc <dallas_search_identifiers>
 236:	e7 cf       	rjmp	.-50     	; 0x206 <main+0x8>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
